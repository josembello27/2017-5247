
Micro tarea 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a54  08005a54  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000018  08005a74  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08005a74  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166aa  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002969  00000000  00000000  0003673b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebf  00000000  00000000  0003a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cd8  00000000  00000000  0003b24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016da5  00000000  00000000  0005cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d678b  00000000  00000000  00073ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005190  00000000  00000000  0014a458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0014f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000018 	.word	0x20000018
 8000274:	00000000 	.word	0x00000000
 8000278:	080059f4 	.word	0x080059f4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000001c 	.word	0x2000001c
 8000294:	080059f4 	.word	0x080059f4

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d146      	bne.n	8000366 <__udivmoddi4+0x9e>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d95e      	bls.n	800039c <__udivmoddi4+0xd4>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	409c      	lsls	r4, r3
 80002f0:	fa20 f202 	lsr.w	r2, r0, r2
 80002f4:	4317      	orrs	r7, r2
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	0c22      	lsrs	r2, r4, #16
 8000300:	fbb7 f1fe 	udiv	r1, r7, lr
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	fb01 f005 	mul.w	r0, r1, r5
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 8134 	bhi.w	800058c <__udivmoddi4+0x2c4>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	fbb2 f0fe 	udiv	r0, r2, lr
 800032e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	42a5      	cmp	r5, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x88>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x86>
 8000348:	42a5      	cmp	r5, r4
 800034a:	f200 8119 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 800034e:	4610      	mov	r0, r2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xb4>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80fc 	beq.w	8000568 <__udivmoddi4+0x2a0>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14c      	bne.n	800041e <__udivmoddi4+0x156>
 8000384:	42ab      	cmp	r3, r5
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2a6>
 800038a:	4282      	cmp	r2, r0
 800038c:	f240 80ef 	bls.w	800056e <__udivmoddi4+0x2a6>
 8000390:	4608      	mov	r0, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0x9a>
 8000396:	e9c6 4700 	strd	r4, r7, [r6]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0x9a>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xd8>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f382 	clz	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 809f 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ba:	fb0e 2015 	mls	r0, lr, r5, r2
 80003be:	0c22      	lsrs	r2, r4, #16
 80003c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c4:	fb07 f005 	mul.w	r0, r7, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90f      	bls.n	80003ec <__udivmoddi4+0x124>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d4:	bf2c      	ite	cs
 80003d6:	f04f 0901 	movcs.w	r9, #1
 80003da:	f04f 0900 	movcc.w	r9, #0
 80003de:	4290      	cmp	r0, r2
 80003e0:	d903      	bls.n	80003ea <__udivmoddi4+0x122>
 80003e2:	f1b9 0f00 	cmp.w	r9, #0
 80003e6:	f000 80ce 	beq.w	8000586 <__udivmoddi4+0x2be>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f8:	fb00 f707 	mul.w	r7, r0, r7
 80003fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000400:	42a7      	cmp	r7, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	42a7      	cmp	r7, r4
 8000410:	f200 80b3 	bhi.w	800057a <__udivmoddi4+0x2b2>
 8000414:	4610      	mov	r0, r2
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041c:	e79c      	b.n	8000358 <__udivmoddi4+0x90>
 800041e:	f1c1 0420 	rsb	r4, r1, #32
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 fc01 	lsl.w	ip, r5, r1
 8000428:	fa22 f704 	lsr.w	r7, r2, r4
 800042c:	40e5      	lsrs	r5, r4
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f304 	lsr.w	r3, r0, r4
 8000436:	4088      	lsls	r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb5 fef8 	udiv	lr, r5, r8
 800044c:	fb08 551e 	mls	r5, r8, lr, r5
 8000450:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a9      	cmp	r9, r5
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b2>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a9      	cmp	r9, r5
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 808d 	beq.w	8000592 <__udivmoddi4+0x2ca>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba5 0509 	sub.w	r5, r5, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb5 f3f8 	udiv	r3, r5, r8
 8000486:	fb08 5513 	mls	r5, r8, r3, r5
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000492:	45ac      	cmp	ip, r5
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1dc>
 8000496:	197d      	adds	r5, r7, r5
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1da>
 800049e:	45ac      	cmp	ip, r5
 80004a0:	d87e      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a8:	eba5 050c 	sub.w	r5, r5, ip
 80004ac:	fba3 9802 	umull	r9, r8, r3, r2
 80004b0:	4545      	cmp	r5, r8
 80004b2:	46ce      	mov	lr, r9
 80004b4:	46c4      	mov	ip, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1f6>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x200>
 80004ba:	4548      	cmp	r0, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x200>
 80004be:	3b01      	subs	r3, #1
 80004c0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d06f      	beq.n	80005ac <__udivmoddi4+0x2e4>
 80004cc:	ebb0 020e 	subs.w	r2, r0, lr
 80004d0:	eb65 050c 	sbc.w	r5, r5, ip
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	fa05 f404 	lsl.w	r4, r5, r4
 80004da:	40cd      	lsrs	r5, r1
 80004dc:	4618      	mov	r0, r3
 80004de:	4314      	orrs	r4, r2
 80004e0:	2100      	movs	r1, #0
 80004e2:	e9c6 4500 	strd	r4, r5, [r6]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	4099      	lsls	r1, r3
 80004f2:	409c      	lsls	r4, r3
 80004f4:	40d5      	lsrs	r5, r2
 80004f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fa:	fa20 f202 	lsr.w	r2, r0, r2
 80004fe:	fa1f f78c 	uxth.w	r7, ip
 8000502:	fbb5 f0fe 	udiv	r0, r5, lr
 8000506:	430a      	orrs	r2, r1
 8000508:	fb0e 5510 	mls	r5, lr, r0, r5
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f507 	mul.w	r5, r0, r7
 8000516:	428d      	cmp	r5, r1
 8000518:	d90e      	bls.n	8000538 <__udivmoddi4+0x270>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	bf2c      	ite	cs
 8000524:	f04f 0901 	movcs.w	r9, #1
 8000528:	f04f 0900 	movcc.w	r9, #0
 800052c:	428d      	cmp	r5, r1
 800052e:	d902      	bls.n	8000536 <__udivmoddi4+0x26e>
 8000530:	f1b9 0f00 	cmp.w	r9, #0
 8000534:	d031      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000536:	4640      	mov	r0, r8
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000540:	fb0e 1115 	mls	r1, lr, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f107 	mul.w	r1, r5, r7
 800054c:	4291      	cmp	r1, r2
 800054e:	d907      	bls.n	8000560 <__udivmoddi4+0x298>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d201      	bcs.n	800055e <__udivmoddi4+0x296>
 800055a:	4291      	cmp	r1, r2
 800055c:	d823      	bhi.n	80005a6 <__udivmoddi4+0x2de>
 800055e:	4645      	mov	r5, r8
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000566:	e726      	b.n	80003b6 <__udivmoddi4+0xee>
 8000568:	4631      	mov	r1, r6
 800056a:	4630      	mov	r0, r6
 800056c:	e6f9      	b.n	8000362 <__udivmoddi4+0x9a>
 800056e:	1a84      	subs	r4, r0, r2
 8000570:	eb65 0203 	sbc.w	r2, r5, r3
 8000574:	2001      	movs	r0, #1
 8000576:	4617      	mov	r7, r2
 8000578:	e70b      	b.n	8000392 <__udivmoddi4+0xca>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74a      	b.n	8000416 <__udivmoddi4+0x14e>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e6e4      	b.n	8000350 <__udivmoddi4+0x88>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e72f      	b.n	80003ec <__udivmoddi4+0x124>
 800058c:	3902      	subs	r1, #2
 800058e:	4462      	add	r2, ip
 8000590:	e6c9      	b.n	8000326 <__udivmoddi4+0x5e>
 8000592:	f1ae 0e02 	sub.w	lr, lr, #2
 8000596:	443d      	add	r5, r7
 8000598:	e76f      	b.n	800047a <__udivmoddi4+0x1b2>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7cb      	b.n	8000538 <__udivmoddi4+0x270>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e77e      	b.n	80004a4 <__udivmoddi4+0x1dc>
 80005a6:	3d02      	subs	r5, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7d9      	b.n	8000560 <__udivmoddi4+0x298>
 80005ac:	4618      	mov	r0, r3
 80005ae:	4631      	mov	r1, r6
 80005b0:	e6d7      	b.n	8000362 <__udivmoddi4+0x9a>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fd60 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f852 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f992 	bl	80008ec <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f8b8 	bl	800073c <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f910 	bl	80007f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005d0:	f000 f95a 	bl	8000888 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80005d4:	f000 f8be 	bl	8000754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005d8:	4821      	ldr	r0, [pc, #132]	; (8000660 <main+0xa8>)
 80005da:	f004 f9c9 	bl	8004970 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	     if(ESTADO_SIGUIENTE == ESTADO_INIT)
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0xac>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b06      	cmp	r3, #6
 80005e4:	d104      	bne.n	80005f0 <main+0x38>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_INIT();
 80005e6:	f000 fb1d 	bl	8000c24 <Func_ESTADO_INIT>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <main+0xac>)
 80005ee:	6013      	str	r3, [r2, #0]
	      }

	      if(ESTADO_SIGUIENTE == ESTADO_ABIERTO)
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0xac>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d104      	bne.n	8000602 <main+0x4a>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_ABIERTO();
 80005f8:	f000 fa44 	bl	8000a84 <Func_ESTADO_ABIERTO>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <main+0xac>)
 8000600:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_CERRADO)
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <main+0xac>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d104      	bne.n	8000614 <main+0x5c>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_CERRADO();
 800060a:	f000 fa63 	bl	8000ad4 <Func_ESTADO_CERRADO>
 800060e:	4603      	mov	r3, r0
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <main+0xac>)
 8000612:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_ABRIENDO)
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0xac>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d104      	bne.n	8000626 <main+0x6e>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_ABRIENDO();
 800061c:	f000 fa82 	bl	8000b24 <Func_ESTADO_ABRIENDO>
 8000620:	4603      	mov	r3, r0
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <main+0xac>)
 8000624:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_CERRANDO)
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <main+0xac>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d104      	bne.n	8000638 <main+0x80>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_CERRANDO();
 800062e:	f000 faa1 	bl	8000b74 <Func_ESTADO_CERRANDO>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <main+0xac>)
 8000636:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_INTERMEDIO)
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <main+0xac>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b05      	cmp	r3, #5
 800063e:	d104      	bne.n	800064a <main+0x92>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_INTERMEDIO();
 8000640:	f000 fac0 	bl	8000bc4 <Func_ESTADO_INTERMEDIO>
 8000644:	4603      	mov	r3, r0
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <main+0xac>)
 8000648:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_ERROR)
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <main+0xac>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1c5      	bne.n	80005de <main+0x26>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_ERROR();
 8000652:	f000 fa0d 	bl	8000a70 <Func_ESTADO_ERROR>
 8000656:	4603      	mov	r3, r0
 8000658:	4a02      	ldr	r2, [pc, #8]	; (8000664 <main+0xac>)
 800065a:	6013      	str	r3, [r2, #0]
	     if(ESTADO_SIGUIENTE == ESTADO_INIT)
 800065c:	e7bf      	b.n	80005de <main+0x26>
 800065e:	bf00      	nop
 8000660:	20000034 	.word	0x20000034
 8000664:	20000008 	.word	0x20000008

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b09c      	sub	sp, #112	; 0x70
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2250      	movs	r2, #80	; 0x50
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 f98f 	bl	800599a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <SystemClock_Config+0xd0>)
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	4a29      	ldr	r2, [pc, #164]	; (8000738 <SystemClock_Config+0xd0>)
 8000694:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000698:	6113      	str	r3, [r2, #16]
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <SystemClock_Config+0xd0>)
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a6:	bf00      	nop
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xd0>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d1f9      	bne.n	80006a8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006b4:	2321      	movs	r3, #33	; 0x21
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006c8:	2303      	movs	r3, #3
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006cc:	230c      	movs	r3, #12
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006e0:	2304      	movs	r3, #4
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f89d 	bl	8001830 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006fc:	f000 fafc 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	231f      	movs	r3, #31
 8000702:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2303      	movs	r3, #3
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fcbe 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072a:	f000 fae5 	bl	8000cf8 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3770      	adds	r7, #112	; 0x70
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	44020800 	.word	0x44020800

0800073c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000740:	f000 ff68 	bl	8001614 <HAL_ICACHE_Enable>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800074a:	f000 fad5 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_TIM2_Init+0x98>)
 8000774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000778:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_TIM2_Init+0x98>)
 800077c:	2250      	movs	r2, #80	; 0x50
 800077e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_TIM2_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_TIM2_Init+0x98>)
 8000788:	f242 7210 	movw	r2, #10000	; 0x2710
 800078c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_TIM2_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_TIM2_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_TIM2_Init+0x98>)
 800079c:	f004 f890 	bl	80048c0 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a6:	f000 faa7 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_TIM2_Init+0x98>)
 80007b8:	f004 f92e 	bl	8004a18 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007c2:	f000 fa99 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_TIM2_Init+0x98>)
 80007d4:	f004 fb34 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007de:	f000 fa8b 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000034 	.word	0x20000034

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_USART1_UART_Init+0x90>)
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_USART1_UART_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_USART1_UART_Init+0x90>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_USART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_USART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_USART1_UART_Init+0x90>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_USART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800083a:	f004 fb69 	bl	8004f10 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 fa58 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800084c:	f004 ff80 	bl	8005750 <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 fa4f 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800085e:	f004 ffb5 	bl	80057cc <HAL_UARTEx_SetRxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 fa46 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_USART1_UART_Init+0x90>)
 800086e:	f004 ff36 	bl	80056de <HAL_UARTEx_DisableFifoMode>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 fa3e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000080 	.word	0x20000080
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <MX_USB_PCD_Init+0x60>)
 8000890:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 8000894:	2208      	movs	r2, #8
 8000896:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 800089a:	2202      	movs	r2, #2
 800089c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USB_PCD_Init+0x5c>)
 80008d0:	f000 feb0 	bl	8001634 <HAL_PCD_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80008da:	f000 fa0d 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000114 	.word	0x20000114
 80008e8:	40016000 	.word	0x40016000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000908:	4a54      	ldr	r2, [pc, #336]	; (8000a5c <MX_GPIO_Init+0x170>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000912:	4b52      	ldr	r3, [pc, #328]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000920:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000926:	4a4d      	ldr	r2, [pc, #308]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000930:	4b4a      	ldr	r3, [pc, #296]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000944:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800094e:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <MX_GPIO_Init+0x170>)
 800095e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000962:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <MX_GPIO_Init+0x170>)
 800096e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <MX_GPIO_Init+0x170>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000980:	4a36      	ldr	r2, [pc, #216]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098a:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <MX_GPIO_Init+0x170>)
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|Ma_Pin|Mc_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	21e0      	movs	r1, #224	; 0xe0
 800099c:	4830      	ldr	r0, [pc, #192]	; (8000a60 <MX_GPIO_Init+0x174>)
 800099e:	f000 fe21 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a8:	482e      	ldr	r0, [pc, #184]	; (8000a64 <MX_GPIO_Init+0x178>)
 80009aa:	f000 fe1b 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b4:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_GPIO_Init+0x17c>)
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4828      	ldr	r0, [pc, #160]	; (8000a64 <MX_GPIO_Init+0x178>)
 80009c4:	f000 fcbc 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sa_Pin Sc_Pin Bc_Pin Ba_Pin */
  GPIO_InitStruct.Pin = Sa_Pin|Sc_Pin|Bc_Pin|Ba_Pin;
 80009c8:	f240 3311 	movw	r3, #785	; 0x311
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x174>)
 80009de:	f000 fcaf 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_VCP_RX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin;
 80009e2:	2308      	movs	r3, #8
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 80009f2:	230d      	movs	r3, #13
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x174>)
 80009fe:	f000 fc9f 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin Ma_Pin Mc_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|Ma_Pin|Mc_Pin;
 8000a02:	23e0      	movs	r3, #224	; 0xe0
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000a1a:	f000 fc91 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <MX_GPIO_Init+0x178>)
 8000a38:	f000 fc82 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_GPIO_Init+0x17c>)
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_GPIO_Init+0x180>)
 8000a50:	f000 fc76 	bl	8001340 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	44020c00 	.word	0x44020c00
 8000a60:	42020000 	.word	0x42020000
 8000a64:	42020800 	.word	0x42020800
 8000a68:	10110000 	.word	0x10110000
 8000a6c:	42020c00 	.word	0x42020c00

08000a70 <Func_ESTADO_ERROR>:

/* USER CODE BEGIN 4 */
int Func_ESTADO_ERROR(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
    for(;;)
    {
        inout.Led = TRUE;
 8000a74:	4a02      	ldr	r2, [pc, #8]	; (8000a80 <Func_ESTADO_ERROR+0x10>)
 8000a76:	7813      	ldrb	r3, [r2, #0]
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	7013      	strb	r3, [r2, #0]
 8000a7e:	e7f9      	b.n	8000a74 <Func_ESTADO_ERROR+0x4>
 8000a80:	2000041c 	.word	0x2000041c

08000a84 <Func_ESTADO_ABIERTO>:
    }
}
int Func_ESTADO_ABIERTO(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <Func_ESTADO_ABIERTO+0x44>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <Func_ESTADO_ABIERTO+0x48>)
 8000a8e:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABIERTO;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <Func_ESTADO_ABIERTO+0x44>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <Func_ESTADO_ABIERTO+0x4c>)
 8000a98:	7813      	ldrb	r3, [r2, #0]
 8000a9a:	f36f 03c3 	bfc	r3, #3, #1
 8000a9e:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <Func_ESTADO_ABIERTO+0x4c>)
 8000aa2:	7813      	ldrb	r3, [r2, #0]
 8000aa4:	f36f 0382 	bfc	r3, #2, #1
 8000aa8:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_ON, INTER_RAPIDO);
 8000aaa:	2119      	movs	r1, #25
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f909 	bl	8000cc4 <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Bc == TRUE)
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <Func_ESTADO_ABIERTO+0x4c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d1f8      	bne.n	8000ab2 <Func_ESTADO_ABIERTO+0x2e>
        {
            return ESTADO_CERRANDO;
 8000ac0:	2304      	movs	r3, #4
        }
    }
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	2000041c 	.word	0x2000041c

08000ad4 <Func_ESTADO_CERRADO>:
int Func_ESTADO_CERRADO(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <Func_ESTADO_CERRADO+0x44>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <Func_ESTADO_CERRADO+0x48>)
 8000ade:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRADO;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <Func_ESTADO_CERRADO+0x44>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <Func_ESTADO_CERRADO+0x4c>)
 8000ae8:	7813      	ldrb	r3, [r2, #0]
 8000aea:	f36f 0382 	bfc	r3, #2, #1
 8000aee:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <Func_ESTADO_CERRADO+0x4c>)
 8000af2:	7813      	ldrb	r3, [r2, #0]
 8000af4:	f36f 03c3 	bfc	r3, #3, #1
 8000af8:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_OFF, INTER_OFF);
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 f8e1 	bl	8000cc4 <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Ba == TRUE)
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <Func_ESTADO_CERRADO+0x4c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d1f8      	bne.n	8000b02 <Func_ESTADO_CERRADO+0x2e>
        {
            return ESTADO_ABRIENDO;
 8000b10:	2303      	movs	r3, #3
        }
    }

}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	2000041c 	.word	0x2000041c

08000b24 <Func_ESTADO_ABRIENDO>:
int Func_ESTADO_ABRIENDO(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <Func_ESTADO_ABRIENDO+0x44>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <Func_ESTADO_ABRIENDO+0x48>)
 8000b2e:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABRIENDO;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <Func_ESTADO_ABRIENDO+0x44>)
 8000b32:	2203      	movs	r2, #3
 8000b34:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <Func_ESTADO_ABRIENDO+0x4c>)
 8000b38:	7813      	ldrb	r3, [r2, #0]
 8000b3a:	f36f 0382 	bfc	r3, #2, #1
 8000b3e:	7013      	strb	r3, [r2, #0]
    inout.Ma = TRUE;
 8000b40:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <Func_ESTADO_ABRIENDO+0x4c>)
 8000b42:	7813      	ldrb	r3, [r2, #0]
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_ON, INTER_LENTO);
 8000b4a:	2132      	movs	r1, #50	; 0x32
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f8b9 	bl	8000cc4 <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Sa == TRUE)
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <Func_ESTADO_ABRIENDO+0x4c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d1f8      	bne.n	8000b52 <Func_ESTADO_ABRIENDO+0x2e>
        {
            return ESTADO_ABIERTO;
 8000b60:	2301      	movs	r3, #1
        }
    }
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	2000041c 	.word	0x2000041c

08000b74 <Func_ESTADO_CERRANDO>:
int Func_ESTADO_CERRANDO(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <Func_ESTADO_CERRANDO+0x44>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <Func_ESTADO_CERRANDO+0x48>)
 8000b7e:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRANDO;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <Func_ESTADO_CERRANDO+0x44>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	601a      	str	r2, [r3, #0]
    inout.Mc = TRUE;
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <Func_ESTADO_CERRANDO+0x4c>)
 8000b88:	7813      	ldrb	r3, [r2, #0]
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <Func_ESTADO_CERRANDO+0x4c>)
 8000b92:	7813      	ldrb	r3, [r2, #0]
 8000b94:	f36f 03c3 	bfc	r3, #3, #1
 8000b98:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_ON, INTER_LENTO);
 8000b9a:	2132      	movs	r1, #50	; 0x32
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 f891 	bl	8000cc4 <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Sc == TRUE)
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <Func_ESTADO_CERRANDO+0x4c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d1f8      	bne.n	8000ba2 <Func_ESTADO_CERRANDO+0x2e>
        {
            return ESTADO_CERRADO;
 8000bb0:	2302      	movs	r3, #2
        }
    }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000004 	.word	0x20000004
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	2000041c 	.word	0x2000041c

08000bc4 <Func_ESTADO_INTERMEDIO>:
int Func_ESTADO_INTERMEDIO(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <Func_ESTADO_INTERMEDIO+0x54>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <Func_ESTADO_INTERMEDIO+0x58>)
 8000bce:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INTERMEDIO;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <Func_ESTADO_INTERMEDIO+0x54>)
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000bd8:	7813      	ldrb	r3, [r2, #0]
 8000bda:	f36f 03c3 	bfc	r3, #3, #1
 8000bde:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000be2:	7813      	ldrb	r3, [r2, #0]
 8000be4:	f36f 0382 	bfc	r3, #2, #1
 8000be8:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
        if(inout.Ba == TRUE)
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <Func_ESTADO_INTERMEDIO+0x38>
        {
            return ESTADO_ABRIENDO;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e007      	b.n	8000c0c <Func_ESTADO_INTERMEDIO+0x48>
        }
        if(inout.Bc == TRUE)
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d1ef      	bne.n	8000bea <Func_ESTADO_INTERMEDIO+0x26>
        {
            return ESTADO_CERRANDO;
 8000c0a:	2304      	movs	r3, #4
        }
    }
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	2000041c 	.word	0x2000041c

08000c24 <Func_ESTADO_INIT>:
int Func_ESTADO_INIT(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <Func_ESTADO_INIT+0x94>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <Func_ESTADO_INIT+0x98>)
 8000c2e:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INIT;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <Func_ESTADO_INIT+0x94>)
 8000c32:	2206      	movs	r2, #6
 8000c34:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 8000c36:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c38:	7813      	ldrb	r3, [r2, #0]
 8000c3a:	f36f 03c3 	bfc	r3, #3, #1
 8000c3e:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000c40:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c42:	7813      	ldrb	r3, [r2, #0]
 8000c44:	f36f 0382 	bfc	r3, #2, #1
 8000c48:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
        if((inout.Sa == TRUE) && (inout.Sc == TRUE))
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d108      	bne.n	8000c6a <Func_ESTADO_INIT+0x46>
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d101      	bne.n	8000c6a <Func_ESTADO_INIT+0x46>
        {
            return ESTADO_ERROR;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e020      	b.n	8000cac <Func_ESTADO_INIT+0x88>
        }

        if(inout.Sa == TRUE)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <Func_ESTADO_INIT+0x58>
        {
            return ESTADO_ABIERTO;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e017      	b.n	8000cac <Func_ESTADO_INIT+0x88>
        }

        if(inout.Sc == TRUE)
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <Func_ESTADO_INIT+0x6a>
        {
            return ESTADO_CERRADO;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e00e      	b.n	8000cac <Func_ESTADO_INIT+0x88>
        }

        if((inout.Sa == FALSE) && (inout.Sc == FALSE))
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1d6      	bne.n	8000c4a <Func_ESTADO_INIT+0x26>
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <Func_ESTADO_INIT+0x9c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1cf      	bne.n	8000c4a <Func_ESTADO_INIT+0x26>
        {
            return ESTADO_INTERMEDIO;
 8000caa:	2305      	movs	r3, #5
        }
    }
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	2000041c 	.word	0x2000041c

08000cc4 <Func_ESTADO_SETTINGLED>:

int Func_ESTADO_SETTINGLED(int St, int Inter)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	LedStatus.StatusLED = St;       //Estado del Led
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	b2d9      	uxtb	r1, r3
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <Func_ESTADO_SETTINGLED+0x30>)
 8000cd8:	7813      	ldrb	r3, [r2, #0]
 8000cda:	f361 0300 	bfi	r3, r1, #0, #1
 8000cde:	7013      	strb	r3, [r2, #0]
	LedStatus.InterLED = Inter;     //Velocidad de Intermitencia
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <Func_ESTADO_SETTINGLED+0x30>)
 8000ce4:	6053      	str	r3, [r2, #4]
	return 0;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20000420 	.word	0x20000420

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>

08000d02 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d20:	d10e      	bne.n	8000d40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d28:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	44020c00 	.word	0x44020c00

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ac      	sub	sp, #176	; 0xb0
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2288      	movs	r2, #136	; 0x88
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fe12 	bl	800599a <memset>
  if(huart->Instance==USART1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <HAL_UART_MspInit+0xc4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d145      	bne.n	8000e0c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d80:	f04f 0201 	mov.w	r2, #1
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fcc5 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000da0:	f7ff ffaa 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_UART_MspInit+0xc8>)
 8000da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_UART_MspInit+0xc8>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_UART_MspInit+0xc8>)
 8000db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_UART_MspInit+0xc8>)
 8000dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_UART_MspInit+0xc8>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_UART_MspInit+0xc8>)
 8000dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000de0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_UART_MspInit+0xcc>)
 8000e08:	f000 fa9a 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	37b0      	adds	r7, #176	; 0xb0
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40013800 	.word	0x40013800
 8000e18:	44020c00 	.word	0x44020c00
 8000e1c:	42020400 	.word	0x42020400

08000e20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0ac      	sub	sp, #176	; 0xb0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2288      	movs	r2, #136	; 0x88
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fdaa 	bl	800599a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a27      	ldr	r2, [pc, #156]	; (8000ee8 <HAL_PCD_MspInit+0xc8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d146      	bne.n	8000ede <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	f04f 0310 	mov.w	r3, #16
 8000e58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e5c:	2330      	movs	r3, #48	; 0x30
 8000e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fc5c 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000e72:	f7ff ff41 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_PCD_MspInit+0xcc>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_PCD_MspInit+0xcc>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_PCD_MspInit+0xcc>)
 8000e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_DN_Pin|USB_FS_DP_Pin;
 8000e94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <HAL_PCD_MspInit+0xd0>)
 8000ebc:	f000 fa40 	bl	8001340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_PCD_MspInit+0xcc>)
 8000ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <HAL_PCD_MspInit+0xcc>)
 8000ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ecc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_PCD_MspInit+0xcc>)
 8000ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	37b0      	adds	r7, #176	; 0xb0
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40016000 	.word	0x40016000
 8000eec:	44020c00 	.word	0x44020c00
 8000ef0:	42020000 	.word	0x42020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f8fa 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <SystemInit+0xc8>)
 8000f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f54:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <SystemInit+0xc8>)
 8000f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <SystemInit+0xcc>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <SystemInit+0xcc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <SystemInit+0xcc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemInit+0xcc>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4927      	ldr	r1, [pc, #156]	; (8001014 <SystemInit+0xcc>)
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemInit+0xd0>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemInit+0xcc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemInit+0xcc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemInit+0xcc>)
 8000f8a:	4a24      	ldr	r2, [pc, #144]	; (800101c <SystemInit+0xd4>)
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <SystemInit+0xcc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemInit+0xcc>)
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemInit+0xd4>)
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <SystemInit+0xcc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <SystemInit+0xcc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <SystemInit+0xcc>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000faa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <SystemInit+0xcc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <SystemInit+0xc8>)
 8000fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <SystemInit+0xd8>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000fc2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000fca:	d003      	beq.n	8000fd4 <SystemInit+0x8c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000fd2:	d117      	bne.n	8001004 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <SystemInit+0xd8>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <SystemInit+0xd8>)
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <SystemInit+0xdc>)
 8000fe4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <SystemInit+0xd8>)
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <SystemInit+0xe0>)
 8000fea:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SystemInit+0xd8>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <SystemInit+0xd8>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <SystemInit+0xd8>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <SystemInit+0xd8>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	61d3      	str	r3, [r2, #28]
  }
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	44020c00 	.word	0x44020c00
 8001018:	fae2eae3 	.word	0xfae2eae3
 800101c:	01010280 	.word	0x01010280
 8001020:	40022000 	.word	0x40022000
 8001024:	08192a3b 	.word	0x08192a3b
 8001028:	4c5d6e7f 	.word	0x4c5d6e7f

0800102c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001030:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001032:	e003      	b.n	800103c <LoopCopyDataInit>

08001034 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001036:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001038:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800103a:	3104      	adds	r1, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <LoopForever+0xa>)
	ldr	r3, =_edata
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001040:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001042:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001044:	d3f6      	bcc.n	8001034 <CopyDataInit>
	ldr	r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001048:	e002      	b.n	8001050 <LoopFillZerobss>

0800104a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800104a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800104c:	f842 3b04 	str.w	r3, [r2], #4

08001050 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <LoopForever+0x16>)
	cmp	r2, r3
 8001052:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001054:	d3f9      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001056:	f7ff ff77 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f004 fca7 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105e:	f7ff faab 	bl	80005b8 <main>

08001062 <LoopForever>:

LoopForever:
    b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001064:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001068:	08005a5c 	.word	0x08005a5c
	ldr	r0, =_sdata
 800106c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001070:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001074:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001078:	2000042c 	.word	0x2000042c

0800107c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_IRQHandler>
	...

08001080 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f929 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800108a:	f001 f9c1 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800108e:	4602      	mov	r2, r0
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_Init+0x40>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	490a      	ldr	r1, [pc, #40]	; (80010c4 <HAL_Init+0x44>)
 800109a:	5ccb      	ldrb	r3, [r1, r3]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_Init+0x48>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a4:	200f      	movs	r0, #15
 80010a6:	f000 f811 	bl	80010cc <HAL_InitTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e002      	b.n	80010ba <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fe25 	bl	8000d02 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	44020c00 	.word	0x44020c00
 80010c4:	08005a0c 	.word	0x08005a0c
 80010c8:	2000000c 	.word	0x2000000c

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_InitTick+0x60>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e021      	b.n	8001124 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_InitTick+0x64>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f915 	bl	8001326 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f8ed 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x68>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000014 	.word	0x20000014
 8001130:	2000000c 	.word	0x2000000c
 8001134:	20000010 	.word	0x20000010

08001138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000014 	.word	0x20000014
 800115c:	20000428 	.word	0x20000428

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000428 	.word	0x20000428

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff5e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffb2 	bl	8001298 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800134e:	e136      	b.n	80015be <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8128 	beq.w	80015b8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x38>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b12      	cmp	r3, #18
 8001376:	d125      	bne.n	80013c4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f003 020f 	and.w	r2, r3, #15
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	6979      	ldr	r1, [r7, #20]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4013      	ands	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d00b      	beq.n	8001418 <HAL_GPIO_Init+0xd8>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140c:	2b11      	cmp	r3, #17
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4013      	ands	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	4013      	ands	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 0201 	and.w	r2, r3, #1
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d017      	beq.n	80014b2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4013      	ands	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d07c      	beq.n	80015b8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80014be:	4a47      	ldr	r2, [pc, #284]	; (80015dc <HAL_GPIO_Init+0x29c>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3318      	adds	r3, #24
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4013      	ands	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0a9a      	lsrs	r2, r3, #10
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <HAL_GPIO_Init+0x2a0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	00d2      	lsls	r2, r2, #3
 80014f2:	4093      	lsls	r3, r2
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80014fa:	4938      	ldr	r1, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x29c>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3318      	adds	r3, #24
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_GPIO_Init+0x29c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800152c:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <HAL_GPIO_Init+0x29c>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_GPIO_Init+0x29c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	4013      	ands	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <HAL_GPIO_Init+0x29c>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x29c>)
 800155e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001562:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4013      	ands	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_GPIO_Init+0x29c>)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_GPIO_Init+0x29c>)
 800158c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001590:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_GPIO_Init+0x29c>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	3301      	adds	r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f aec1 	bne.w	8001350 <HAL_GPIO_Init+0x10>
  }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	44022000 	.word	0x44022000
 80015e0:	002f7f7f 	.word	0x002f7f7f

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001600:	e002      	b.n	8001608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_ICACHE_Enable+0x1c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_ICACHE_Enable+0x1c>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40030400 	.word	0x40030400

08001634 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b08f      	sub	sp, #60	; 0x3c
 8001638:	af0a      	add	r7, sp, #40	; 0x28
 800163a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0cd      	b.n	80017e2 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fbe0 	bl	8000e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f004 f939 	bl	80058e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e03e      	b.n	80016f6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	333d      	adds	r3, #61	; 0x3d
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	333c      	adds	r3, #60	; 0x3c
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	333f      	adds	r3, #63	; 0x3f
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	334c      	adds	r3, #76	; 0x4c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	3350      	adds	r3, #80	; 0x50
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3354      	adds	r3, #84	; 0x54
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	3301      	adds	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3bb      	bcc.n	8001678 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e044      	b.n	8001790 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	3301      	adds	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d3b5      	bcc.n	8001706 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	687e      	ldr	r6, [r7, #4]
 80017a2:	466d      	mov	r5, sp
 80017a4:	f106 0410 	add.w	r4, r6, #16
 80017a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b8:	1d33      	adds	r3, r6, #4
 80017ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f004 f8c9 	bl	8005954 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f805 	bl	80017ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0202 	orr.w	r2, r3, #2
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	f000 bc28 	b.w	8002094 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001844:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f003 0318 	and.w	r3, r3, #24
 800184c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800184e:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05b      	beq.n	800191c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x46>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b18      	cmp	r3, #24
 800186e:	d114      	bne.n	800189a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d111      	bne.n	800189a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f000 bc08 	b.w	8002094 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001884:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	4981      	ldr	r1, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001894:	4313      	orrs	r3, r2
 8001896:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001898:	e040      	b.n	800191c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d023      	beq.n	80018ea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff fc57 	bl	8001160 <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80018b6:	f7ff fc53 	bl	8001160 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e3e5      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	496d      	ldr	r1, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	618b      	str	r3, [r1, #24]
 80018e8:	e018      	b.n	800191c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ea:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80018f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fc33 	bl	8001160 <HAL_GetTick>
 80018fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80018fe:	f7ff fc2f 	bl	8001160 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e3c1      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001910:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a0 	beq.w	8001a6a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x10c>
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b18      	cmp	r3, #24
 8001934:	d109      	bne.n	800194a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 8092 	bne.w	8001a6a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e3a4      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x132>
 8001954:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e058      	b.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d112      	bne.n	8001990 <HAL_RCC_OscConfig+0x160>
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 800197c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a44      	ldr	r2, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e041      	b.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001998:	d112      	bne.n	80019c0 <HAL_RCC_OscConfig+0x190>
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a3e      	ldr	r2, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e029      	b.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a2f      	ldr	r2, [pc, #188]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e011      	b.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a25      	ldr	r2, [pc, #148]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001a0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fba0 	bl	8001160 <HAL_GetTick>
 8001a20:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fb9c 	bl	8001160 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e32e      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x1f4>
 8001a42:	e012      	b.n	8001a6a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb8c 	bl	8001160 <HAL_GetTick>
 8001a48:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fb88 	bl	8001160 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e31a      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_RCC_OscConfig+0x268>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 809a 	beq.w	8001bac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x25a>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b18      	cmp	r3, #24
 8001a82:	d149      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d146      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e2fe      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
 8001a96:	bf00      	nop
 8001a98:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001aa2:	4b9a      	ldr	r3, [pc, #616]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0218 	and.w	r2, r3, #24
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d014      	beq.n	8001adc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001ab2:	4b96      	ldr	r3, [pc, #600]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0218 	bic.w	r2, r3, #24
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	4993      	ldr	r1, [pc, #588]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001ac4:	f000 fdd0 	bl	8002668 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ac8:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <HAL_RCC_OscConfig+0x4e0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fafd 	bl	80010cc <HAL_InitTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e2db      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb40 	bl	8001160 <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fb3c 	bl	8001160 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e2ce      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	497e      	ldr	r1, [pc, #504]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b16:	e049      	b.n	8001bac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d02c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b20:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 0218 	bic.w	r2, r3, #24
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	4977      	ldr	r1, [pc, #476]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb0f 	bl	8001160 <HAL_GetTick>
 8001b42:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fb0b 	bl	8001160 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e29d      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	4b6c      	ldr	r3, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	4966      	ldr	r1, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	610b      	str	r3, [r1, #16]
 8001b78:	e018      	b.n	8001bac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff faeb 	bl	8001160 <HAL_GetTick>
 8001b8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fae7 	bl	8001160 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e279      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d03c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc0:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc6:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fac6 	bl	8001160 <HAL_GetTick>
 8001bd4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fac2 	bl	8001160 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e254      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bea:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x3a8>
 8001bf8:	e01b      	b.n	8001c32 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001c02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff faa9 	bl	8001160 <HAL_GetTick>
 8001c0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c12:	f7ff faa5 	bl	8001160 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e237      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ef      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80d2 	beq.w	8001de4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_RCC_OscConfig+0x4e4>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d118      	bne.n	8001c7e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_RCC_OscConfig+0x4e4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <HAL_RCC_OscConfig+0x4e4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fa82 	bl	8001160 <HAL_GetTick>
 8001c5c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7ff fa7e 	bl	8001160 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e210      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCC_OscConfig+0x4e4>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x468>
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c96:	e074      	b.n	8001d82 <HAL_RCC_OscConfig+0x552>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d118      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4a2>
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb6:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cd0:	e057      	b.n	8001d82 <HAL_RCC_OscConfig+0x552>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d11e      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4e8>
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d00:	4a02      	ldr	r2, [pc, #8]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d0a:	e03a      	b.n	8001d82 <HAL_RCC_OscConfig+0x552>
 8001d0c:	44020c00 	.word	0x44020c00
 8001d10:	20000010 	.word	0x20000010
 8001d14:	44020800 	.word	0x44020800
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b85      	cmp	r3, #133	; 0x85
 8001d1e:	d118      	bne.n	8001d52 <HAL_RCC_OscConfig+0x522>
 8001d20:	4ba2      	ldr	r3, [pc, #648]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d26:	4aa1      	ldr	r2, [pc, #644]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d30:	4b9e      	ldr	r3, [pc, #632]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d36:	4a9d      	ldr	r2, [pc, #628]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d40:	4b9a      	ldr	r3, [pc, #616]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d46:	4a99      	ldr	r2, [pc, #612]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d50:	e017      	b.n	8001d82 <HAL_RCC_OscConfig+0x552>
 8001d52:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d58:	4a94      	ldr	r2, [pc, #592]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d62:	4b92      	ldr	r3, [pc, #584]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d68:	4a90      	ldr	r2, [pc, #576]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d72:	4b8e      	ldr	r3, [pc, #568]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d78:	4a8c      	ldr	r2, [pc, #560]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f9e9 	bl	8001160 <HAL_GetTick>
 8001d8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff f9e5 	bl	8001160 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e175      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da8:	4b80      	ldr	r3, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ed      	beq.n	8001d92 <HAL_RCC_OscConfig+0x562>
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f9d2 	bl	8001160 <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f9ce 	bl	8001160 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e15e      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd6:	4b75      	ldr	r3, [pc, #468]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ed      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d036      	beq.n	8001e5e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d019      	beq.n	8001e2c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001df8:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6b      	ldr	r2, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f9ac 	bl	8001160 <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001e0c:	f7ff f9a8 	bl	8001160 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e13a      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x5dc>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e2c:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5e      	ldr	r2, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff f992 	bl	8001160 <HAL_GetTick>
 8001e3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001e40:	f7ff f98e 	bl	8001160 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e120      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e52:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8115 	beq.w	8002092 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b18      	cmp	r3, #24
 8001e6c:	f000 80af 	beq.w	8001fce <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	f040 8086 	bne.w	8001f86 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a4b      	ldr	r2, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f96b 	bl	8001160 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f967 	bl	8001160 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0f9      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001eb4:	f023 0303 	bic.w	r3, r3, #3
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	4939      	ldr	r1, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	628b      	str	r3, [r1, #40]	; 0x28
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001efa:	492c      	ldr	r1, [pc, #176]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f06:	f023 0310 	bic.w	r3, r3, #16
 8001f0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f1c:	f043 0310 	orr.w	r3, r3, #16
 8001f20:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f023 020c 	bic.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	491f      	ldr	r1, [pc, #124]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f023 0220 	bic.w	r2, r3, #32
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	491a      	ldr	r1, [pc, #104]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	4a18      	ldr	r2, [pc, #96]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f8ff 	bl	8001160 <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f8fb 	bl	8001160 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e08d      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x736>
 8001f84:	e085      	b.n	8002092 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_RCC_OscConfig+0x77c>)
 8001f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff f8e5 	bl	8001160 <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff f8e1 	bl	8001160 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d903      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e073      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
 8001fac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	4a36      	ldr	r2, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8001fc2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	6293      	str	r3, [r2, #40]	; 0x28
 8001fcc:	e061      	b.n	8002092 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001fce:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fd4:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d031      	beq.n	8002046 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d12a      	bne.n	8002046 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d122      	bne.n	8002046 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d11a      	bne.n	8002046 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d111      	bne.n	8002046 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d108      	bne.n	8002046 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	0e1b      	lsrs	r3, r3, #24
 8002038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e024      	b.n	8002094 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002058:	429a      	cmp	r2, r3
 800205a:	d01a      	beq.n	8002092 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8002062:	f023 0310 	bic.w	r3, r3, #16
 8002066:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff f87a 	bl	8001160 <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800206e:	bf00      	nop
 8002070:	f7ff f876 	bl	8001160 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	4293      	cmp	r3, r2
 800207a:	d0f9      	beq.n	8002070 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_RCC_OscConfig+0x86c>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	44020c00 	.word	0x44020c00

080020a0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e19e      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <HAL_RCC_ClockConfig+0x224>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCC_ClockConfig+0x224>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 020f 	bic.w	r2, r3, #15
 80020ca:	497e      	ldr	r1, [pc, #504]	; (80022c4 <HAL_RCC_ClockConfig+0x224>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b7c      	ldr	r3, [pc, #496]	; (80022c4 <HAL_RCC_ClockConfig+0x224>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e186      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d012      	beq.n	8002116 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020fe:	429a      	cmp	r2, r3
 8002100:	d909      	bls.n	8002116 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002102:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	496d      	ldr	r1, [pc, #436]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002112:	4313      	orrs	r3, r2
 8002114:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002130:	429a      	cmp	r2, r3
 8002132:	d909      	bls.n	8002148 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002134:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4961      	ldr	r1, [pc, #388]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002144:	4313      	orrs	r3, r2
 8002146:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002160:	429a      	cmp	r2, r3
 8002162:	d908      	bls.n	8002176 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4955      	ldr	r1, [pc, #340]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002172:	4313      	orrs	r3, r2
 8002174:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	429a      	cmp	r2, r3
 8002190:	d908      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002192:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 020f 	bic.w	r2, r3, #15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	494a      	ldr	r1, [pc, #296]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8093 	beq.w	80022d8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d121      	bne.n	800220a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e113      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e107      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0fb      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0f3      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800220a:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	492c      	ldr	r1, [pc, #176]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002218:	4313      	orrs	r3, r2
 800221a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe ffa0 	bl	8001160 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d112      	bne.n	8002250 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7fe ff98 	bl	8001160 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0d7      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0318 	and.w	r3, r3, #24
 800224a:	2b18      	cmp	r3, #24
 800224c:	d1ee      	bne.n	800222c <HAL_RCC_ClockConfig+0x18c>
 800224e:	e043      	b.n	80022d8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d112      	bne.n	800227e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7fe ff81 	bl	8001160 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0c0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 0318 	and.w	r3, r3, #24
 8002278:	2b10      	cmp	r3, #16
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_ClockConfig+0x1ba>
 800227c:	e02c      	b.n	80022d8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d122      	bne.n	80022cc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7fe ff6a 	bl	8001160 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0a9      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x228>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 0318 	and.w	r3, r3, #24
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d1ee      	bne.n	8002288 <HAL_RCC_ClockConfig+0x1e8>
 80022aa:	e015      	b.n	80022d8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe ff58 	bl	8001160 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d906      	bls.n	80022cc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e097      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 0318 	and.w	r3, r3, #24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e9      	bne.n	80022ac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b44      	ldr	r3, [pc, #272]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d208      	bcs.n	8002306 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f023 020f 	bic.w	r2, r3, #15
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	493e      	ldr	r1, [pc, #248]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_RCC_ClockConfig+0x360>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d210      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <HAL_RCC_ClockConfig+0x360>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 020f 	bic.w	r2, r3, #15
 800231c:	4938      	ldr	r1, [pc, #224]	; (8002400 <HAL_RCC_ClockConfig+0x360>)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_ClockConfig+0x360>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e05d      	b.n	80023f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800234e:	429a      	cmp	r2, r3
 8002350:	d208      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4927      	ldr	r1, [pc, #156]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800237e:	429a      	cmp	r2, r3
 8002380:	d209      	bcs.n	8002396 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	491a      	ldr	r1, [pc, #104]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d012      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d209      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	490e      	ldr	r1, [pc, #56]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023c8:	f000 f822 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_ClockConfig+0x35c>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	490b      	ldr	r1, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x364>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x368>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_ClockConfig+0x36c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fe70 	bl	80010cc <HAL_InitTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80023f0:	7afb      	ldrb	r3, [r7, #11]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	44020c00 	.word	0x44020c00
 8002400:	40022000 	.word	0x40022000
 8002404:	08005a0c 	.word	0x08005a0c
 8002408:	2000000c 	.word	0x2000000c
 800240c:	20000010 	.word	0x20000010

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002416:	4b8c      	ldr	r3, [pc, #560]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0318 	and.w	r3, r3, #24
 800241e:	2b08      	cmp	r3, #8
 8002420:	d102      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002422:	4b8a      	ldr	r3, [pc, #552]	; (800264c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e107      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002428:	4b87      	ldr	r3, [pc, #540]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 0318 	and.w	r3, r3, #24
 8002430:	2b00      	cmp	r3, #0
 8002432:	d112      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002434:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002440:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	4a81      	ldr	r2, [pc, #516]	; (8002650 <HAL_RCC_GetSysClockFreq+0x240>)
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e0f1      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002454:	4b7e      	ldr	r3, [pc, #504]	; (8002650 <HAL_RCC_GetSysClockFreq+0x240>)
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	e0ee      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245a:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0318 	and.w	r3, r3, #24
 8002462:	2b10      	cmp	r3, #16
 8002464:	d102      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002466:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <HAL_RCC_GetSysClockFreq+0x244>)
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e0e5      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246c:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 0318 	and.w	r3, r3, #24
 8002474:	2b18      	cmp	r3, #24
 8002476:	f040 80dd 	bne.w	8002634 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002484:	4b70      	ldr	r3, [pc, #448]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002490:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80b7 	beq.w	800262e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0xbe>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d056      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x16a>
 80024cc:	e077      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80024ce:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02d      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	08db      	lsrs	r3, r3, #3
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	4a5a      	ldr	r2, [pc, #360]	; (8002650 <HAL_RCC_GetSysClockFreq+0x240>)
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002514:	ed97 6a02 	vldr	s12, [r7, #8]
 8002518:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002658 <HAL_RCC_GetSysClockFreq+0x248>
 800251c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002520:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002528:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002534:	e065      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	eddf 6a46 	vldr	s13, [pc, #280]	; 800265c <HAL_RCC_GetSysClockFreq+0x24c>
 8002544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002558:	ed97 6a02 	vldr	s12, [r7, #8]
 800255c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002658 <HAL_RCC_GetSysClockFreq+0x248>
 8002560:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002564:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002574:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002578:	e043      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002584:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002660 <HAL_RCC_GetSysClockFreq+0x250>
 8002588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800259c:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002658 <HAL_RCC_GetSysClockFreq+0x248>
 80025a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80025bc:	e021      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002664 <HAL_RCC_GetSysClockFreq+0x254>
 80025cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002658 <HAL_RCC_GetSysClockFreq+0x248>
 80025e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002600:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_GetSysClockFreq+0x238>)
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260c:	3301      	adds	r3, #1
 800260e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261a:	edd7 6a06 	vldr	s13, [r7, #24]
 800261e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002626:	ee17 3a90 	vmov	r3, s15
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	e004      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e001      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_GetSysClockFreq+0x240>)
 8002636:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002638:	69fb      	ldr	r3, [r7, #28]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	44020c00 	.word	0x44020c00
 800264c:	003d0900 	.word	0x003d0900
 8002650:	03d09000 	.word	0x03d09000
 8002654:	016e3600 	.word	0x016e3600
 8002658:	46000000 	.word	0x46000000
 800265c:	4c742400 	.word	0x4c742400
 8002660:	4bb71b00 	.word	0x4bb71b00
 8002664:	4a742400 	.word	0x4a742400

08002668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800266c:	f7ff fed0 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002676:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800267a:	4907      	ldr	r1, [pc, #28]	; (8002698 <HAL_RCC_GetHCLKFreq+0x30>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800267e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_RCC_GetHCLKFreq+0x34>)
 8002688:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_RCC_GetHCLKFreq+0x34>)
 800268c:	681b      	ldr	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	44020c00 	.word	0x44020c00
 8002698:	08005a0c 	.word	0x08005a0c
 800269c:	2000000c 	.word	0x2000000c

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80026a4:	f7ff ffe0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	44020c00 	.word	0x44020c00
 80026c8:	08005a1c 	.word	0x08005a1c

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80026d0:	f7ff ffca 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	44020c00 	.word	0x44020c00
 80026f4:	08005a1c 	.word	0x08005a1c

080026f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80026fc:	f7ff ffb4 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	0b1b      	lsrs	r3, r3, #12
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <HAL_RCC_GetPCLK3Freq+0x28>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	44020c00 	.word	0x44020c00
 8002720:	08005a1c 	.word	0x08005a1c

08002724 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b0aa      	sub	sp, #168	; 0xa8
 800272a:	af00      	add	r7, sp, #0
 800272c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002730:	2300      	movs	r3, #0
 8002732:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002736:	2300      	movs	r3, #0
 8002738:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800273c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002748:	2500      	movs	r5, #0
 800274a:	ea54 0305 	orrs.w	r3, r4, r5
 800274e:	d00b      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002750:	4bb8      	ldr	r3, [pc, #736]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002756:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800275a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4ab4      	ldr	r2, [pc, #720]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002762:	430b      	orrs	r3, r1
 8002764:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002768:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f002 0801 	and.w	r8, r2, #1
 8002774:	f04f 0900 	mov.w	r9, #0
 8002778:	ea58 0309 	orrs.w	r3, r8, r9
 800277c:	d038      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800277e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	2b05      	cmp	r3, #5
 8002786:	d819      	bhi.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027c5 	.word	0x080027c5
 8002794:	080027a9 	.word	0x080027a9
 8002798:	080027bd 	.word	0x080027bd
 800279c:	080027c5 	.word	0x080027c5
 80027a0:	080027c5 	.word	0x080027c5
 80027a4:	080027c5 	.word	0x080027c5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ac:	3308      	adds	r3, #8
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 ffee 	bl	8004790 <RCCEx_PLL2_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80027ba:	e004      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80027c2:	e000      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80027c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80027ce:	4b99      	ldr	r3, [pc, #612]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027d4:	f023 0107 	bic.w	r1, r3, #7
 80027d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	4a95      	ldr	r2, [pc, #596]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e0:	430b      	orrs	r3, r1
 80027e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027e6:	e003      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80027ec:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f002 0a02 	and.w	sl, r2, #2
 80027fc:	f04f 0b00 	mov.w	fp, #0
 8002800:	ea5a 030b 	orrs.w	r3, sl, fp
 8002804:	d03c      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	2b28      	cmp	r3, #40	; 0x28
 800280e:	d01b      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002810:	2b28      	cmp	r3, #40	; 0x28
 8002812:	d815      	bhi.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002814:	2b20      	cmp	r3, #32
 8002816:	d019      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002818:	2b20      	cmp	r3, #32
 800281a:	d811      	bhi.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800281c:	2b18      	cmp	r3, #24
 800281e:	d017      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002820:	2b18      	cmp	r3, #24
 8002822:	d80d      	bhi.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002828:	2b08      	cmp	r3, #8
 800282a:	d109      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800282c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002830:	3308      	adds	r3, #8
 8002832:	4618      	mov	r0, r3
 8002834:	f001 ffac 	bl	8004790 <RCCEx_PLL2_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800283e:	e00a      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002846:	e006      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002848:	bf00      	nop
 800284a:	e004      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800284c:	bf00      	nop
 800284e:	e002      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002856:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800285e:	4b75      	ldr	r3, [pc, #468]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002864:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002868:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	4a71      	ldr	r2, [pc, #452]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002870:	430b      	orrs	r3, r1
 8002872:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002876:	e003      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800287c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002880:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f002 0304 	and.w	r3, r2, #4
 800288c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002896:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800289a:	460b      	mov	r3, r1
 800289c:	4313      	orrs	r3, r2
 800289e:	d040      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80028a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028aa:	d01e      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80028ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028b0:	d817      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b6:	d01a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	d811      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80028be:	2bc0      	cmp	r3, #192	; 0xc0
 80028c0:	d017      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80028c2:	2bc0      	cmp	r3, #192	; 0xc0
 80028c4:	d80d      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d015      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d109      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028d2:	3308      	adds	r3, #8
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 ff5b 	bl	8004790 <RCCEx_PLL2_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80028e0:	e00a      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028ea:	bf00      	nop
 80028ec:	e004      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002906:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800290a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	4a48      	ldr	r2, [pc, #288]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002918:	e003      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800291e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002922:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800292e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002938:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800293c:	460b      	mov	r3, r1
 800293e:	4313      	orrs	r3, r2
 8002940:	d043      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800294c:	d021      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800294e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002952:	d81a      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002958:	d01d      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800295a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295e:	d814      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002964:	d019      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800296a:	d80e      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002974:	d109      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002976:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800297a:	3308      	adds	r3, #8
 800297c:	4618      	mov	r0, r3
 800297e:	f001 ff07 	bl	8004790 <RCCEx_PLL2_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002988:	e00a      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002990:	e006      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800299e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ae:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80029b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ba:	430b      	orrs	r3, r1
 80029bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c0:	e003      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80029c6:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80029d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80029d8:	2300      	movs	r3, #0
 80029da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80029e0:	460b      	mov	r3, r1
 80029e2:	4313      	orrs	r3, r2
 80029e4:	d03e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80029e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f0:	d01b      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x306>
 80029f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f6:	d814      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80029f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029fc:	d017      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80029fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a02:	d80e      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d017      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a12:	3308      	adds	r3, #8
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 febb 	bl	8004790 <RCCEx_PLL2_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002a20:	e00b      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002a28:	e007      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e005      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002a2e:	bf00      	nop
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002a32:	bf00      	nop
 8002a34:	44020c00 	.word	0x44020c00
        break;
 8002a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a3a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002a42:	4ba5      	ldr	r3, [pc, #660]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a48:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4aa1      	ldr	r2, [pc, #644]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a54:	430b      	orrs	r3, r1
 8002a56:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002a5a:	e003      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a60:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a70:	673b      	str	r3, [r7, #112]	; 0x70
 8002a72:	2300      	movs	r3, #0
 8002a74:	677b      	str	r3, [r7, #116]	; 0x74
 8002a76:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	d03b      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002a8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a90:	d814      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002a92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a96:	d017      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002a98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a9c:	d80e      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d014      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002aac:	3308      	adds	r3, #8
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fe6e 	bl	8004790 <RCCEx_PLL2_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002aba:	e008      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ace:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002ad6:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ad8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002adc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002aee:	e003      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002af4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b06:	2300      	movs	r3, #0
 8002b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4313      	orrs	r3, r2
 8002b12:	d033      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b24:	d80e      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b34:	3308      	adds	r3, #8
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fe2a 	bl	8004790 <RCCEx_PLL2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002b42:	e006      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b52:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b60:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b78:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002b7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	2100      	movs	r1, #0
 8002b86:	6639      	str	r1, [r7, #96]	; 0x60
 8002b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b8e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002b92:	460b      	mov	r3, r1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	d033      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba8:	d80e      	bhi.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bb8:	3308      	adds	r3, #8
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fde8 	bl	8004790 <RCCEx_PLL2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002bc6:	e006      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002be4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bee:	4a3a      	ldr	r2, [pc, #232]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002bf6:	e003      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002bfc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	2100      	movs	r1, #0
 8002c0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002c16:	460b      	mov	r3, r1
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c26:	61d3      	str	r3, [r2, #28]
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c34:	4a28      	ldr	r2, [pc, #160]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002c46:	653b      	str	r3, [r7, #80]	; 0x50
 8002c48:	2300      	movs	r3, #0
 8002c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c4c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002c50:	460b      	mov	r3, r1
 8002c52:	4313      	orrs	r3, r2
 8002c54:	d046      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c60:	d021      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002c62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c66:	d81a      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d01d      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d814      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c78:	d019      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7e:	d80e      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d016      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c88:	d109      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c8e:	3308      	adds	r3, #8
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fd7d 	bl	8004790 <RCCEx_PLL2_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002ca4:	e006      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002ca6:	bf00      	nop
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10f      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002cbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cc2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	4a02      	ldr	r2, [pc, #8]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cd4:	e006      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cd6:	bf00      	nop
 8002cd8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cdc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ce0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	d043      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002d0a:	d021      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002d0c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002d10:	d81a      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d16:	d01d      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1c:	d814      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d22:	d019      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8002d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d28:	d80e      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d109      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d38:	3308      	adds	r3, #8
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 fd28 	bl	8004790 <RCCEx_PLL2_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002d46:	e00a      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002d4e:	e006      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d50:	bf00      	nop
 8002d52:	e004      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d54:	bf00      	nop
 8002d56:	e002      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d58:	bf00      	nop
 8002d5a:	e000      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d5e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002d66:	4bb6      	ldr	r3, [pc, #728]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d6c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	4ab2      	ldr	r2, [pc, #712]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d7e:	e003      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d84:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
 8002d96:	2300      	movs	r3, #0
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4313      	orrs	r3, r2
 8002da2:	d030      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002da4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d80f      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d211      	bcs.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d911      	bls.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d109      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fce5 	bl	8004790 <RCCEx_PLL2_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dea:	f023 0107 	bic.w	r1, r3, #7
 8002dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df4:	4a92      	ldr	r2, [pc, #584]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002df6:	430b      	orrs	r3, r1
 8002df8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e02:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e3e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002e46:	4b7e      	ldr	r3, [pc, #504]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4c:	f023 0108 	bic.w	r1, r3, #8
 8002e50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e56:	4a7a      	ldr	r2, [pc, #488]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e5e:	e003      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e64:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f000 80b0 	beq.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002e86:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	4a6e      	ldr	r2, [pc, #440]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e92:	f7fe f965 	bl	8001160 <HAL_GetTick>
 8002e96:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fe f960 	bl	8001160 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d903      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002eb4:	4b63      	ldr	r3, [pc, #396]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ed      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8002ec0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 808a 	bne.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002ed8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d022      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d01b      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f02:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f12:	4a4b      	ldr	r2, [pc, #300]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f1c:	4a48      	ldr	r2, [pc, #288]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d019      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe f915 	bl	8001160 <HAL_GetTick>
 8002f36:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	e00d      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f910 	bl	8001160 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d903      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8002f56:	e006      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f58:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ea      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002f66:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d132      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	61d3      	str	r3, [r2, #28]
 8002f9c:	e005      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x886>
 8002f9e:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fa8:	61d3      	str	r3, [r2, #28]
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fbc:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8002fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fd8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fe2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4313      	orrs	r3, r2
 8003000:	d038      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003002:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d014      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800300c:	2b30      	cmp	r3, #48	; 0x30
 800300e:	d80e      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d012      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d80a      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d106      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302a:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800302c:	e00d      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003034:	e009      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003036:	bf00      	nop
 8003038:	e007      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800303a:	bf00      	nop
 800303c:	e005      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800303e:	bf00      	nop
 8003040:	44020c00 	.word	0x44020c00
 8003044:	44020800 	.word	0x44020800
        break;
 8003048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003052:	4bb5      	ldr	r3, [pc, #724]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003058:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800305c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	49b1      	ldr	r1, [pc, #708]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800306a:	e003      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003070:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003074:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800308a:	460b      	mov	r3, r1
 800308c:	4313      	orrs	r3, r2
 800308e:	d03c      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003090:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003096:	2b04      	cmp	r3, #4
 8003098:	d81d      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b5 	.word	0x080030b5
 80030a4:	080030c3 	.word	0x080030c3
 80030a8:	080030d7 	.word	0x080030d7
 80030ac:	080030df 	.word	0x080030df
 80030b0:	080030df 	.word	0x080030df
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b4:	4b9c      	ldr	r3, [pc, #624]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	4a9b      	ldr	r2, [pc, #620]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030be:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80030c0:	e00e      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030c6:	3308      	adds	r3, #8
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 fb61 	bl	8004790 <RCCEx_PLL2_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80030d4:	e004      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80030de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10c      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80030e8:	4b8f      	ldr	r3, [pc, #572]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f8:	498b      	ldr	r1, [pc, #556]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003106:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800310a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003120:	460b      	mov	r3, r1
 8003122:	4313      	orrs	r3, r2
 8003124:	d03c      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	2b20      	cmp	r3, #32
 800312e:	d01f      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003130:	2b20      	cmp	r3, #32
 8003132:	d819      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003134:	2b18      	cmp	r3, #24
 8003136:	d01d      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003138:	2b18      	cmp	r3, #24
 800313a:	d815      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003140:	2b08      	cmp	r3, #8
 8003142:	d007      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003144:	e010      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003146:	4b78      	ldr	r3, [pc, #480]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	4a77      	ldr	r2, [pc, #476]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800314c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003150:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003152:	e010      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003158:	3308      	adds	r3, #8
 800315a:	4618      	mov	r0, r3
 800315c:	f001 fb18 	bl	8004790 <RCCEx_PLL2_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003166:	e006      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800316e:	e002      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003176:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003184:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003188:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4966      	ldr	r1, [pc, #408]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800319c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80031a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031b6:	460b      	mov	r3, r1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	d03e      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80031bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	d020      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031cc:	d819      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80031ce:	2bc0      	cmp	r3, #192	; 0xc0
 80031d0:	d01d      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80031d2:	2bc0      	cmp	r3, #192	; 0xc0
 80031d4:	d815      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d007      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80031de:	e010      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e0:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	4a50      	ldr	r2, [pc, #320]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ea:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80031ec:	e010      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031f2:	3308      	adds	r3, #8
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 facb 	bl	8004790 <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10c      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003218:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003222:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	493f      	ldr	r1, [pc, #252]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003232:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003236:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800323a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	2100      	movs	r1, #0
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d038      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003260:	d00e      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003266:	d815      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d017      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800326c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003270:	d110      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800327e:	e00e      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003284:	3308      	adds	r3, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fa82 	bl	8004790 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003292:	e004      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 800329c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80032a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	491c      	ldr	r1, [pc, #112]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80032be:	e003      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80032c4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	2100      	movs	r1, #0
 80032d2:	6039      	str	r1, [r7, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032de:	460b      	mov	r3, r1
 80032e0:	4313      	orrs	r3, r2
 80032e2:	d039      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80032e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ea:	2b30      	cmp	r3, #48	; 0x30
 80032ec:	d01e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80032ee:	2b30      	cmp	r3, #48	; 0x30
 80032f0:	d815      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d002      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d007      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80032fa:	e010      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003308:	e011      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800330a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800330e:	3308      	adds	r3, #8
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fa3d 	bl	8004790 <RCCEx_PLL2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800331c:	e007      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003326:	bf00      	nop
 8003328:	44020c00 	.word	0x44020c00
        break;
 800332c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10c      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003338:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800333c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003340:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003354:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003358:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 800335c:	4618      	mov	r0, r3
 800335e:	37a8      	adds	r7, #168	; 0xa8
 8003360:	46bd      	mov	sp, r7
 8003362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003366:	bf00      	nop
 8003368:	44020c00 	.word	0x44020c00

0800336c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800336c:	b480      	push	{r7}
 800336e:	b08b      	sub	sp, #44	; 0x2c
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003374:	4bad      	ldr	r3, [pc, #692]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800337e:	4bab      	ldr	r3, [pc, #684]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003388:	4ba8      	ldr	r3, [pc, #672]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003392:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003394:	4ba5      	ldr	r3, [pc, #660]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800339e:	4ba3      	ldr	r3, [pc, #652]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	08db      	lsrs	r3, r3, #3
 80033a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8126 	beq.w	800360e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d053      	beq.n	8003470 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d86f      	bhi.n	80034ae <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d003      	beq.n	80033dc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d02b      	beq.n	8003432 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80033da:	e068      	b.n	80034ae <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80033dc:	4b93      	ldr	r3, [pc, #588]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	4a92      	ldr	r2, [pc, #584]	; (8003630 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003410:	ed97 6a04 	vldr	s12, [r7, #16]
 8003414:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003430:	e068      	b.n	8003504 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003638 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003452:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800346e:	e049      	b.n	8003504 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800363c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800347e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003490:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80034ac:	e02a      	b.n	8003504 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	08db      	lsrs	r3, r3, #3
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80034e6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003502:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003510:	d121      	bne.n	8003556 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003512:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800351e:	4b43      	ldr	r3, [pc, #268]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	0a5b      	lsrs	r3, r3, #9
 8003524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003534:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003538:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800353c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e006      	b.n	800355c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e002      	b.n	800355c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800355c:	4b33      	ldr	r3, [pc, #204]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003568:	d121      	bne.n	80035ae <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003576:	4b2d      	ldr	r3, [pc, #180]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800358c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003590:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800359c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	e006      	b.n	80035b4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035c0:	d121      	bne.n	8003606 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	0e1b      	lsrs	r3, r3, #24
 80035d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80035e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035e4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80035e8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80035ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80035fc:	e010      	b.n	8003620 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	e00c      	b.n	8003620 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	e008      	b.n	8003620 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	372c      	adds	r7, #44	; 0x2c
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	44020c00 	.word	0x44020c00
 8003630:	03d09000 	.word	0x03d09000
 8003634:	46000000 	.word	0x46000000
 8003638:	4a742400 	.word	0x4a742400
 800363c:	4bb71b00 	.word	0x4bb71b00

08003640 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003640:	b480      	push	{r7}
 8003642:	b08b      	sub	sp, #44	; 0x2c
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003648:	4bad      	ldr	r3, [pc, #692]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003652:	4bab      	ldr	r3, [pc, #684]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800365c:	4ba8      	ldr	r3, [pc, #672]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003666:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003668:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003672:	4ba3      	ldr	r3, [pc, #652]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8126 	beq.w	80038e2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d053      	beq.n	8003744 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d86f      	bhi.n	8003782 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d003      	beq.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d02b      	beq.n	8003706 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80036ae:	e068      	b.n	8003782 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036b0:	4b93      	ldr	r3, [pc, #588]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	4a92      	ldr	r2, [pc, #584]	; (8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80036e8:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80036ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003700:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003704:	e068      	b.n	80037d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003710:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800390c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a04 	vldr	s12, [r7, #16]
 8003726:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003742:	e049      	b.n	80037d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003760:	ed97 6a04 	vldr	s12, [r7, #16]
 8003764:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003780:	e02a      	b.n	80037d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	4a5d      	ldr	r2, [pc, #372]	; (8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	ee07 3a90 	vmov	s15, r3
 80037a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80037ba:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80037be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80037d6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80037d8:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e4:	d121      	bne.n	800382a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80037e6:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d017      	beq.n	8003822 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037f2:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	0a5b      	lsrs	r3, r3, #9
 80037f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003808:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800380c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003818:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003830:	4b33      	ldr	r3, [pc, #204]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383c:	d121      	bne.n	8003882 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800383e:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800384a:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800385c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003860:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003864:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003870:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	e002      	b.n	8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003894:	d121      	bne.n	80038da <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d017      	beq.n	80038d2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	0e1b      	lsrs	r3, r3, #24
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80038b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80038bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80038c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038d0:	e010      	b.n	80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	e00c      	b.n	80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	e008      	b.n	80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	372c      	adds	r7, #44	; 0x2c
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	44020c00 	.word	0x44020c00
 8003904:	03d09000 	.word	0x03d09000
 8003908:	46000000 	.word	0x46000000
 800390c:	4a742400 	.word	0x4a742400
 8003910:	4bb71b00 	.word	0x4bb71b00

08003914 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
 800391a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800391e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003922:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8003926:	430b      	orrs	r3, r1
 8003928:	d14b      	bne.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800392a:	4bc4      	ldr	r3, [pc, #784]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800392c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003936:	4bc1      	ldr	r3, [pc, #772]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b02      	cmp	r3, #2
 8003942:	d108      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d104      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800394c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	f000 bf14 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003956:	4bb9      	ldr	r3, [pc, #740]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003964:	d108      	bne.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396c:	d104      	bne.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800396e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003974:	f000 bf03 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003978:	4bb0      	ldr	r3, [pc, #704]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003984:	d119      	bne.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800398c:	d115      	bne.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800398e:	4bab      	ldr	r3, [pc, #684]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399a:	d30a      	bcc.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800399c:	4ba7      	ldr	r3, [pc, #668]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a6:	4aa6      	ldr	r2, [pc, #664]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80039ae:	f000 bee6 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80039b6:	f000 bee2 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039be:	f000 bede 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80039c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c6:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 80039ca:	ea52 0301 	orrs.w	r3, r2, r1
 80039ce:	f000 838e 	beq.w	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80039d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d6:	2a01      	cmp	r2, #1
 80039d8:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 80039dc:	f080 86cc 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e4:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 80039e8:	ea52 0301 	orrs.w	r3, r2, r1
 80039ec:	f000 82aa 	beq.w	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80039f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f4:	2a01      	cmp	r2, #1
 80039f6:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 80039fa:	f080 86bd 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a02:	f1a3 0110 	sub.w	r1, r3, #16
 8003a06:	ea52 0301 	orrs.w	r3, r2, r1
 8003a0a:	f000 8681 	beq.w	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8003a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a12:	2a01      	cmp	r2, #1
 8003a14:	f173 0310 	sbcs.w	r3, r3, #16
 8003a18:	f080 86ae 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a20:	1f19      	subs	r1, r3, #4
 8003a22:	ea52 0301 	orrs.w	r3, r2, r1
 8003a26:	f000 84b1 	beq.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8003a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a2e:	2a01      	cmp	r2, #1
 8003a30:	f173 0304 	sbcs.w	r3, r3, #4
 8003a34:	f080 86a0 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a3c:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8003a40:	430b      	orrs	r3, r1
 8003a42:	f000 85aa 	beq.w	800459a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8003a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a4a:	497e      	ldr	r1, [pc, #504]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003a4c:	428a      	cmp	r2, r1
 8003a4e:	f173 0300 	sbcs.w	r3, r3, #0
 8003a52:	f080 8691 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a5a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	f000 8532 	beq.w	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8003a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a68:	4977      	ldr	r1, [pc, #476]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003a6a:	428a      	cmp	r2, r1
 8003a6c:	f173 0300 	sbcs.w	r3, r3, #0
 8003a70:	f080 8682 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a78:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	f000 84bc 	beq.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8003a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a86:	4971      	ldr	r1, [pc, #452]	; (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8003a88:	428a      	cmp	r2, r1
 8003a8a:	f173 0300 	sbcs.w	r3, r3, #0
 8003a8e:	f080 8673 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a96:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	f000 85f2 	beq.w	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8003aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa4:	496a      	ldr	r1, [pc, #424]	; (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8003aa6:	428a      	cmp	r2, r1
 8003aa8:	f173 0300 	sbcs.w	r3, r3, #0
 8003aac:	f080 8664 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	f000 81e5 	beq.w	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac2:	4964      	ldr	r1, [pc, #400]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003ac4:	428a      	cmp	r2, r1
 8003ac6:	f173 0300 	sbcs.w	r3, r3, #0
 8003aca:	f080 8655 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	f000 83cc 	beq.w	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae0:	495d      	ldr	r1, [pc, #372]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003ae2:	428a      	cmp	r2, r1
 8003ae4:	f173 0300 	sbcs.w	r3, r3, #0
 8003ae8:	f080 8646 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af0:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8003af4:	430b      	orrs	r3, r1
 8003af6:	f000 8331 	beq.w	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8003afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003afe:	4957      	ldr	r1, [pc, #348]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003b00:	428a      	cmp	r2, r1
 8003b02:	f173 0300 	sbcs.w	r3, r3, #0
 8003b06:	f080 8637 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b0e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f000 82bb 	beq.w	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8003b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b1c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8003b20:	f173 0300 	sbcs.w	r3, r3, #0
 8003b24:	f080 8628 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b2c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003b30:	430b      	orrs	r3, r1
 8003b32:	f000 826d 	beq.w	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8003b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b3a:	f244 0101 	movw	r1, #16385	; 0x4001
 8003b3e:	428a      	cmp	r2, r1
 8003b40:	f173 0300 	sbcs.w	r3, r3, #0
 8003b44:	f080 8618 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003b50:	430b      	orrs	r3, r1
 8003b52:	f000 821e 	beq.w	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b5a:	f242 0101 	movw	r1, #8193	; 0x2001
 8003b5e:	428a      	cmp	r2, r1
 8003b60:	f173 0300 	sbcs.w	r3, r3, #0
 8003b64:	f080 8608 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8003b70:	430b      	orrs	r3, r1
 8003b72:	f000 8137 	beq.w	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b7a:	f241 0101 	movw	r1, #4097	; 0x1001
 8003b7e:	428a      	cmp	r2, r1
 8003b80:	f173 0300 	sbcs.w	r3, r3, #0
 8003b84:	f080 85f8 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b8c:	1f11      	subs	r1, r2, #4
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	f000 80d2 	beq.w	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b98:	2a05      	cmp	r2, #5
 8003b9a:	f173 0300 	sbcs.w	r3, r3, #0
 8003b9e:	f080 85eb 	bcs.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba6:	1e51      	subs	r1, r2, #1
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	d006      	beq.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb0:	1e91      	subs	r1, r2, #2
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	d06c      	beq.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003bb6:	f000 bddf 	b.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003bcc:	f7fe fd7e 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003bd2:	f000 bdd4 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003bd6:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be2:	d10a      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bea:	f107 030c 	add.w	r3, r7, #12
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fd26 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf8:	e048      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d109      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	e035      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d11c      	bne.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d119      	bne.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c38:	e028      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003c3a:	bf00      	nop
 8003c3c:	44020c00 	.word	0x44020c00
 8003c40:	016e3600 	.word	0x016e3600
 8003c44:	20000001 	.word	0x20000001
 8003c48:	10000001 	.word	0x10000001
 8003c4c:	08000001 	.word	0x08000001
 8003c50:	04000001 	.word	0x04000001
 8003c54:	00200001 	.word	0x00200001
 8003c58:	00040001 	.word	0x00040001
 8003c5c:	00020001 	.word	0x00020001
 8003c60:	03d09000 	.word	0x03d09000
 8003c64:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003c68:	4b9f      	ldr	r3, [pc, #636]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d106      	bne.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d103      	bne.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8003c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c88:	f000 bd79 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003c8c:	f000 bd77 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003c90:	4b95      	ldr	r3, [pc, #596]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ca2:	f7fe fcfd 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003ca6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ca8:	f000 bd69 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003cac:	4b8e      	ldr	r3, [pc, #568]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fcbb 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	e031      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003cd0:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2b18      	cmp	r3, #24
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ce2:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	08db      	lsrs	r3, r3, #3
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	4a7f      	ldr	r2, [pc, #508]	; (8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf4:	e01e      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003cf6:	4b7c      	ldr	r3, [pc, #496]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d02:	d105      	bne.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d102      	bne.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8003d0a:	4b79      	ldr	r3, [pc, #484]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0e:	e011      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003d10:	4b75      	ldr	r3, [pc, #468]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	2b28      	cmp	r3, #40	; 0x28
 8003d22:	d103      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8003d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d30:	f000 bd25 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d34:	f000 bd23 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003d38:	4b6b      	ldr	r3, [pc, #428]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d4a:	f7fe fca9 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003d4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d50:	f000 bd15 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003d54:	4b64      	ldr	r3, [pc, #400]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d60:	d10a      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d107      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fc67 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	e033      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003d78:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2bc0      	cmp	r3, #192	; 0xc0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d8a:	4b57      	ldr	r3, [pc, #348]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	08db      	lsrs	r3, r3, #3
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	4a55      	ldr	r2, [pc, #340]	; (8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	e020      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003d9e:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003daa:	d106      	bne.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db2:	d102      	bne.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003db4:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db8:	e012      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003dce:	d103      	bne.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ddc:	f000 bccf 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003de0:	f000 bccd 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003de4:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003df6:	f7fe fc7f 	bl	80026f8 <HAL_RCC_GetPCLK3Freq>
 8003dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003dfc:	f000 bcbf 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e06:	d108      	bne.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fc17 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e16:	f000 bcb2 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d10d      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	e020      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003e42:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e56:	d102      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5c:	e012      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003e72:	d103      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e80:	f000 bc7d 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e84:	f000 bc7b 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003e9a:	f7fe fbe5 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8003e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003ea0:	f000 bc6d 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d104      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fab1 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003eae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8003eb0:	f000 bc65 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d108      	bne.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003eba:	f107 030c 	add.w	r3, r7, #12
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fbbe 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ec8:	f000 bc59 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee4:	e02c      	b.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003ee6:	bf00      	nop
 8003ee8:	44020c00 	.word	0x44020c00
 8003eec:	03d09000 	.word	0x03d09000
 8003ef0:	003d0900 	.word	0x003d0900
 8003ef4:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003ef8:	4b95      	ldr	r3, [pc, #596]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d109      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f0a:	4b91      	ldr	r3, [pc, #580]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	4a8f      	ldr	r2, [pc, #572]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1c:	e010      	b.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003f1e:	4b8c      	ldr	r3, [pc, #560]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d102      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8003f32:	4b89      	ldr	r3, [pc, #548]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f3c:	f000 bc1f 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003f40:	f000 bc1d 	b.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003f44:	4b82      	ldr	r3, [pc, #520]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003f50:	4b7f      	ldr	r3, [pc, #508]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6a:	e011      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003f6c:	4b78      	ldr	r3, [pc, #480]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d103      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003f82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8003f8e:	e3f6      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003f90:	e3f5      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003f92:	4b6f      	ldr	r3, [pc, #444]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d103      	bne.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe fb7c 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003faa:	e3e8      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fb41 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fc2:	e3dc      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003fc4:	4b62      	ldr	r3, [pc, #392]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d10d      	bne.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fd8:	4b5d      	ldr	r3, [pc, #372]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	4a5c      	ldr	r2, [pc, #368]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fea:	e010      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003fec:	4b58      	ldr	r3, [pc, #352]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d106      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004000:	d102      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004002:	4b55      	ldr	r3, [pc, #340]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004006:	e002      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800400c:	e3b7      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800400e:	e3b6      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004016:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004022:	f7fe fb3d 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8004026:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004028:	e3a9      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004030:	d107      	bne.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004032:	f107 030c 	add.w	r3, r7, #12
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fb02 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004040:	e39d      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004042:	4b43      	ldr	r3, [pc, #268]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d10d      	bne.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004054:	d109      	bne.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004056:	4b3e      	ldr	r3, [pc, #248]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	4a3c      	ldr	r2, [pc, #240]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004068:	e010      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800406a:	4b39      	ldr	r3, [pc, #228]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004076:	d106      	bne.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800407e:	d102      	bne.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004084:	e002      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800408a:	e378      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800408c:	e377      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800408e:	4b30      	ldr	r3, [pc, #192]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004094:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe fafe 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80040a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80040a6:	e36a      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ae:	d107      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fac3 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040be:	e35e      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80040c0:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d10d      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040d2:	d109      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040d4:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040e6:	e34a      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040ec:	e347      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040f4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004100:	f7fe fafa 	bl	80026f8 <HAL_RCC_GetPCLK3Freq>
 8004104:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004106:	e33a      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800410e:	d107      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fa93 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800411e:	e32e      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d10d      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004132:	d109      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	4a05      	ldr	r2, [pc, #20]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004146:	e31a      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800414c:	e317      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800414e:	bf00      	nop
 8004150:	44020c00 	.word	0x44020c00
 8004154:	03d09000 	.word	0x03d09000
 8004158:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800415c:	4b9b      	ldr	r3, [pc, #620]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800415e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004162:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800416e:	d044      	beq.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004176:	d879      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417e:	d02d      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004186:	d871      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800418e:	d017      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004196:	d869      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a4:	d004      	beq.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80041a6:	e061      	b.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80041a8:	f7fe faa6 	bl	80026f8 <HAL_RCC_GetPCLK3Freq>
 80041ac:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 80041ae:	e060      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041b0:	f107 030c 	add.w	r3, r7, #12
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fa43 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80041be:	e058      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041c0:	4b82      	ldr	r3, [pc, #520]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d103      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80041ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80041d4:	e04d      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80041da:	e04a      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80041dc:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ea:	d103      	bne.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80041ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80041f2:	e03e      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80041f8:	e03b      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80041fa:	4b74      	ldr	r3, [pc, #464]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004200:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004204:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004206:	4b71      	ldr	r3, [pc, #452]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004218:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	4a6b      	ldr	r2, [pc, #428]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422a:	e01e      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800422c:	4b67      	ldr	r3, [pc, #412]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d106      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d102      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004246:	e010      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004248:	4b60      	ldr	r3, [pc, #384]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004254:	d106      	bne.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425c:	d102      	bne.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800425e:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004262:	e002      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 800426a:	e002      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004270:	bf00      	nop
          }
        }
        break;
 8004272:	e284      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004274:	4b55      	ldr	r3, [pc, #340]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004276:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800427a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004286:	d044      	beq.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800428e:	d879      	bhi.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004296:	d02d      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429e:	d871      	bhi.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042a6:	d017      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042ae:	d869      	bhi.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80042be:	e061      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7fe f9ee 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80042c4:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 80042c6:	e060      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f9b7 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80042d6:	e058      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042d8:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d103      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80042ec:	e04d      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80042f2:	e04a      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004302:	d103      	bne.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004304:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800430a:	e03e      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004310:	e03b      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004312:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004318:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800431c:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800431e:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	08db      	lsrs	r3, r3, #3
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	e01e      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004344:	4b21      	ldr	r3, [pc, #132]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d106      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d102      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435e:	e010      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800436c:	d106      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004374:	d102      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004380:	e003      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004382:	e002      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004388:	bf00      	nop
          }
        }
        break;
 800438a:	e1f8      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800438e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80043b0:	e1e5      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b8:	d110      	bne.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe ffd4 	bl	800336c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043c8:	e1d9      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80043ca:	bf00      	nop
 80043cc:	44020c00 	.word	0x44020c00
 80043d0:	03d09000 	.word	0x03d09000
 80043d4:	003d0900 	.word	0x003d0900
 80043d8:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e2:	d107      	bne.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043e4:	f107 030c 	add.w	r3, r7, #12
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f929 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f2:	e1c4      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f8:	e1c1      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80043fa:	4b9d      	ldr	r3, [pc, #628]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80043fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	2b04      	cmp	r3, #4
 800440a:	d859      	bhi.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004429 	.word	0x08004429
 8004418:	08004439 	.word	0x08004439
 800441c:	080044c1 	.word	0x080044c1
 8004420:	08004449 	.word	0x08004449
 8004424:	0800444f 	.word	0x0800444f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004428:	f107 0318 	add.w	r3, r7, #24
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe ff9d 	bl	800336c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004436:	e046      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff f8ff 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004446:	e03e      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004448:	4b8a      	ldr	r3, [pc, #552]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800444c:	e03b      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800444e:	4b88      	ldr	r3, [pc, #544]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004454:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004458:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800445a:	4b85      	ldr	r3, [pc, #532]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800446c:	4b80      	ldr	r3, [pc, #512]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447e:	e01e      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004480:	4b7b      	ldr	r3, [pc, #492]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448c:	d106      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d102      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004496:	4b79      	ldr	r3, [pc, #484]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	e010      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800449c:	4b74      	ldr	r3, [pc, #464]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b0:	d102      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80044b2:	4b73      	ldr	r3, [pc, #460]	; (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b6:	e002      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80044be:	e002      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80044c4:	bf00      	nop
          }
        }
        break;
 80044c6:	e15a      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80044c8:	4b69      	ldr	r3, [pc, #420]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d022      	beq.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d858      	bhi.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	2b18      	cmp	r3, #24
 80044e4:	d019      	beq.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	2b18      	cmp	r3, #24
 80044ea:	d852      	bhi.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d008      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80044f8:	e04b      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044fa:	f107 0318 	add.w	r3, r7, #24
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe ff34 	bl	800336c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004508:	e046      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800450a:	f107 030c 	add.w	r3, r7, #12
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f896 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004518:	e03e      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800451a:	4b56      	ldr	r3, [pc, #344]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800451e:	e03b      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004526:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800452a:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d10c      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800453e:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	08db      	lsrs	r3, r3, #3
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	4a4b      	ldr	r2, [pc, #300]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	e01e      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455e:	d106      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d102      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004568:	4b44      	ldr	r3, [pc, #272]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456c:	e010      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800456e:	4b40      	ldr	r3, [pc, #256]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800457a:	d106      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004582:	d102      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004584:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004596:	bf00      	nop
          }
        }
        break;
 8004598:	e0f1      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800459a:	4b35      	ldr	r3, [pc, #212]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800459c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045a0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ac:	d023      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b4:	d858      	bhi.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	2bc0      	cmp	r3, #192	; 0xc0
 80045ba:	d019      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2bc0      	cmp	r3, #192	; 0xc0
 80045c0:	d852      	bhi.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d008      	beq.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80045ce:	e04b      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045d0:	f107 0318 	add.w	r3, r7, #24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fec9 	bl	800336c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80045de:	e046      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff f82b 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80045ee:	e03e      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80045f0:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80045f4:	e03b      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80045f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004600:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004626:	e01e      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004634:	d106      	bne.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d102      	bne.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004642:	e010      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004650:	d106      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004658:	d102      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465e:	e002      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004664:	e003      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004666:	e002      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800466c:	bf00      	nop
          }
        }
        break;
 800466e:	e086      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004670:	44020c00 	.word	0x44020c00
 8004674:	00bb8000 	.word	0x00bb8000
 8004678:	03d09000 	.word	0x03d09000
 800467c:	003d0900 	.word	0x003d0900
 8004680:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004684:	4b40      	ldr	r3, [pc, #256]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004690:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469c:	d105      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80046a4:	4b39      	ldr	r3, [pc, #228]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a8:	e031      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046b6:	d10a      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d107      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046be:	f107 0318 	add.w	r3, r7, #24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fe52 	bl	800336c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046cc:	e01f      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80046ce:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d106      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d103      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	e011      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f8:	d106      	bne.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d103      	bne.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004700:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004706:	e002      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 800470c:	e037      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800470e:	e036      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004716:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	2b10      	cmp	r3, #16
 8004720:	d107      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004722:	f107 0318 	add.w	r3, r7, #24
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fe20 	bl	800336c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8004730:	e025      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473e:	d10a      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2b20      	cmp	r3, #32
 8004744:	d107      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004746:	f107 030c 	add.w	r3, r7, #12
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe ff78 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	e00f      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	d105      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	2b30      	cmp	r3, #48	; 0x30
 8004768:	d102      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476e:	e002      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 8004774:	e003      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004776:	e002      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800477c:	bf00      	nop
    }
  }

  return (frequency);
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004780:	4618      	mov	r0, r3
 8004782:	3730      	adds	r7, #48	; 0x30
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	44020c00 	.word	0x44020c00
 800478c:	02dc6c00 	.word	0x02dc6c00

08004790 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004798:	4b48      	ldr	r3, [pc, #288]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a47      	ldr	r2, [pc, #284]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800479e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047a4:	f7fc fcdc 	bl	8001160 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047aa:	e008      	b.n	80047be <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047ac:	f7fc fcd8 	bl	8001160 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e07a      	b.n	80048b4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047be:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80047ca:	4b3c      	ldr	r3, [pc, #240]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6811      	ldr	r1, [r2, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6852      	ldr	r2, [r2, #4]
 80047de:	0212      	lsls	r2, r2, #8
 80047e0:	430a      	orrs	r2, r1
 80047e2:	4936      	ldr	r1, [pc, #216]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	3b01      	subs	r3, #1
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004818:	4928      	ldr	r1, [pc, #160]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f023 020c 	bic.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	4924      	ldr	r1, [pc, #144]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	f023 0220 	bic.w	r2, r3, #32
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	491f      	ldr	r1, [pc, #124]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	491c      	ldr	r1, [pc, #112]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004864:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6a12      	ldr	r2, [r2, #32]
 800486c:	00d2      	lsls	r2, r2, #3
 800486e:	4913      	ldr	r1, [pc, #76]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004874:	4b11      	ldr	r3, [pc, #68]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	4a10      	ldr	r2, [pc, #64]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 800487a:	f043 0310 	orr.w	r3, r3, #16
 800487e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004880:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 8004886:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800488a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800488c:	f7fc fc68 	bl	8001160 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004892:	e008      	b.n	80048a6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004894:	f7fc fc64 	bl	8001160 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <RCCEx_PLL2_Config+0x12c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0

}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	44020c00 	.word	0x44020c00

080048c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e049      	b.n	8004966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fa12 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 f9a8 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e03b      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <HAL_TIM_Base_Start_IT+0x9c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x4e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d004      	beq.n	80049be <HAL_TIM_Base_Start_IT+0x4e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <HAL_TIM_Base_Start_IT+0xa0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d115      	bne.n	80049ea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_TIM_Base_Start_IT+0xa4>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d015      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0x8c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d011      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	e008      	b.n	80049fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e000      	b.n	80049fe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40000400 	.word	0x40000400
 8004a14:	00010007 	.word	0x00010007

08004a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIM_ConfigClockSource+0x1c>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0fe      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x21a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a70:	f000 80c9 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a78:	f200 80ce 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004a7c:	4a6f      	ldr	r2, [pc, #444]	; (8004c3c <HAL_TIM_ConfigClockSource+0x224>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	f000 80c1 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004a84:	4a6d      	ldr	r2, [pc, #436]	; (8004c3c <HAL_TIM_ConfigClockSource+0x224>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	f200 80c6 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004a8c:	4a6c      	ldr	r2, [pc, #432]	; (8004c40 <HAL_TIM_ConfigClockSource+0x228>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	f000 80b9 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004a94:	4a6a      	ldr	r2, [pc, #424]	; (8004c40 <HAL_TIM_ConfigClockSource+0x228>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	f200 80be 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004a9c:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_TIM_ConfigClockSource+0x22c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	f000 80b1 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004aa4:	4a67      	ldr	r2, [pc, #412]	; (8004c44 <HAL_TIM_ConfigClockSource+0x22c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	f200 80b6 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004aac:	4a66      	ldr	r2, [pc, #408]	; (8004c48 <HAL_TIM_ConfigClockSource+0x230>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	f000 80a9 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004ab4:	4a64      	ldr	r2, [pc, #400]	; (8004c48 <HAL_TIM_ConfigClockSource+0x230>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	f200 80ae 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004abc:	4a63      	ldr	r2, [pc, #396]	; (8004c4c <HAL_TIM_ConfigClockSource+0x234>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	f000 80a1 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004ac4:	4a61      	ldr	r2, [pc, #388]	; (8004c4c <HAL_TIM_ConfigClockSource+0x234>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f200 80a6 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004acc:	4a60      	ldr	r2, [pc, #384]	; (8004c50 <HAL_TIM_ConfigClockSource+0x238>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	f000 8099 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	; (8004c50 <HAL_TIM_ConfigClockSource+0x238>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	f200 809e 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004adc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ae0:	f000 8091 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004ae4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ae8:	f200 8096 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af0:	f000 8089 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af8:	f200 808e 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d03e      	beq.n	8004b80 <HAL_TIM_ConfigClockSource+0x168>
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b06:	f200 8087 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	f000 8086 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x206>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b16:	d87f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b18:	2b70      	cmp	r3, #112	; 0x70
 8004b1a:	d01a      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x13a>
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d87b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b20:	2b60      	cmp	r3, #96	; 0x60
 8004b22:	d050      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b24:	2b60      	cmp	r3, #96	; 0x60
 8004b26:	d877      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b28:	2b50      	cmp	r3, #80	; 0x50
 8004b2a:	d03c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x18e>
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d873      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d058      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d86f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d064      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d86b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d060      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d867      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d05a      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x1ee>
 8004b50:	e062      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b62:	f000 f94d 	bl	8004e00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	609a      	str	r2, [r3, #8]
      break;
 8004b7e:	e04f      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b90:	f000 f936 	bl	8004e00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba2:	609a      	str	r2, [r3, #8]
      break;
 8004ba4:	e03c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 f8a8 	bl	8004d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2150      	movs	r1, #80	; 0x50
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f901 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e02c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f8c7 	bl	8004d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2160      	movs	r1, #96	; 0x60
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f8f1 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004be4:	e01c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f888 	bl	8004d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f8e1 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004c04:	e00c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 f8d8 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004c16:	e003      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	e000      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8004c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	00100070 	.word	0x00100070
 8004c40:	00100060 	.word	0x00100060
 8004c44:	00100050 	.word	0x00100050
 8004c48:	00100040 	.word	0x00100040
 8004c4c:	00100030 	.word	0x00100030
 8004c50:	00100020 	.word	0x00100020

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <TIM_Base_SetConfig+0xac>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x28>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x28>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <TIM_Base_SetConfig+0xb0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <TIM_Base_SetConfig+0xac>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <TIM_Base_SetConfig+0x52>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d003      	beq.n	8004ca6 <TIM_Base_SetConfig+0x52>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <TIM_Base_SetConfig+0xb0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d108      	bne.n	8004cb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <TIM_Base_SetConfig+0xac>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40000400 	.word	0x40000400

08004d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f023 0201 	bic.w	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 030a 	bic.w	r3, r3, #10
 8004d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b087      	sub	sp, #28
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f023 0210 	bic.w	r2, r3, #16
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004da2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	621a      	str	r2, [r3, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f043 0307 	orr.w	r3, r3, #7
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	609a      	str	r2, [r3, #8]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e051      	b.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10c      	bne.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400

08004f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e042      	b.n	8004fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fb ff0b 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2224      	movs	r2, #36	; 0x24
 8004f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f9a6 	bl	80052ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f825 	bl	8004fb0 <UART_SetConfig>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e01b      	b.n	8004fa8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fa25 	bl	80053f0 <UART_CheckIdleState>
 8004fa6:	4603      	mov	r3, r0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb4:	b094      	sub	sp, #80	; 0x50
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	498a      	ldr	r1, [pc, #552]	; (8005208 <UART_SetConfig+0x258>)
 8004fe0:	4019      	ands	r1, r3
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	68d9      	ldr	r1, [r3, #12]
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	ea40 0301 	orr.w	r3, r0, r1
 8005002:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b7f      	ldr	r3, [pc, #508]	; (800520c <UART_SetConfig+0x25c>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d004      	beq.n	800501e <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	4313      	orrs	r3, r2
 800501c:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005028:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005032:	430b      	orrs	r3, r1
 8005034:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	f023 000f 	bic.w	r0, r3, #15
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	ea40 0301 	orr.w	r3, r0, r1
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <UART_SetConfig+0x260>)
 8005054:	429a      	cmp	r2, r3
 8005056:	d102      	bne.n	800505e <UART_SetConfig+0xae>
 8005058:	2301      	movs	r3, #1
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
 800505c:	e01a      	b.n	8005094 <UART_SetConfig+0xe4>
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <UART_SetConfig+0x264>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d102      	bne.n	800506e <UART_SetConfig+0xbe>
 8005068:	2302      	movs	r3, #2
 800506a:	64bb      	str	r3, [r7, #72]	; 0x48
 800506c:	e012      	b.n	8005094 <UART_SetConfig+0xe4>
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b69      	ldr	r3, [pc, #420]	; (8005218 <UART_SetConfig+0x268>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d102      	bne.n	800507e <UART_SetConfig+0xce>
 8005078:	2304      	movs	r3, #4
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
 800507c:	e00a      	b.n	8005094 <UART_SetConfig+0xe4>
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b62      	ldr	r3, [pc, #392]	; (800520c <UART_SetConfig+0x25c>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d103      	bne.n	8005090 <UART_SetConfig+0xe0>
 8005088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
 800508e:	e001      	b.n	8005094 <UART_SetConfig+0xe4>
 8005090:	2300      	movs	r3, #0
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b5c      	ldr	r3, [pc, #368]	; (800520c <UART_SetConfig+0x25c>)
 800509a:	429a      	cmp	r2, r3
 800509c:	d171      	bne.n	8005182 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	2200      	movs	r2, #0
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	627a      	str	r2, [r7, #36]	; 0x24
 80050a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050aa:	f7fe fc33 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 80050ae:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80050b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80e2 	beq.w	800527c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	4a57      	ldr	r2, [pc, #348]	; (800521c <UART_SetConfig+0x26c>)
 80050be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c2:	461a      	mov	r2, r3
 80050c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d8:	429a      	cmp	r2, r3
 80050da:	d305      	bcc.n	80050e8 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d903      	bls.n	80050f0 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80050ee:	e0c5      	b.n	800527c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	2200      	movs	r2, #0
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	4a47      	ldr	r2, [pc, #284]	; (800521c <UART_SetConfig+0x26c>)
 80050fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005102:	b29b      	uxth	r3, r3
 8005104:	2200      	movs	r2, #0
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	617a      	str	r2, [r7, #20]
 800510a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800510e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005112:	f7fb f8c1 	bl	8000298 <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	020b      	lsls	r3, r1, #8
 8005128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800512c:	0202      	lsls	r2, r0, #8
 800512e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005130:	6849      	ldr	r1, [r1, #4]
 8005132:	0849      	lsrs	r1, r1, #1
 8005134:	2000      	movs	r0, #0
 8005136:	460c      	mov	r4, r1
 8005138:	4605      	mov	r5, r0
 800513a:	eb12 0804 	adds.w	r8, r2, r4
 800513e:	eb43 0905 	adc.w	r9, r3, r5
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb f8a0 	bl	8000298 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005166:	d308      	bcc.n	800517a <UART_SetConfig+0x1ca>
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d204      	bcs.n	800517a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e080      	b.n	800527c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005180:	e07c      	b.n	800527c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d149      	bne.n	8005220 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	2200      	movs	r2, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005198:	f7fe fbbc 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 800519c:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d06b      	beq.n	800527c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	4a1c      	ldr	r2, [pc, #112]	; (800521c <UART_SetConfig+0x26c>)
 80051aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b6:	005a      	lsls	r2, r3, #1
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	441a      	add	r2, r3
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d916      	bls.n	80051fe <UART_SetConfig+0x24e>
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d6:	d212      	bcs.n	80051fe <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f023 030f 	bic.w	r3, r3, #15
 80051e0:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051f0:	4313      	orrs	r3, r2
 80051f2:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	e03e      	b.n	800527c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005204:	e03a      	b.n	800527c <UART_SetConfig+0x2cc>
 8005206:	bf00      	nop
 8005208:	cfff69f3 	.word	0xcfff69f3
 800520c:	44002400 	.word	0x44002400
 8005210:	40013800 	.word	0x40013800
 8005214:	40004400 	.word	0x40004400
 8005218:	40004800 	.word	0x40004800
 800521c:	08005a24 	.word	0x08005a24
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005222:	2200      	movs	r2, #0
 8005224:	469a      	mov	sl, r3
 8005226:	4693      	mov	fp, r2
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	f7fe fb72 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 8005230:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d021      	beq.n	800527c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <UART_SetConfig+0x2f8>)
 800523e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005242:	461a      	mov	r2, r3
 8005244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005246:	fbb3 f2f2 	udiv	r2, r3, r2
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	441a      	add	r2, r3
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525e:	2b0f      	cmp	r3, #15
 8005260:	d909      	bls.n	8005276 <UART_SetConfig+0x2c6>
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d205      	bcs.n	8005276 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800526a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526c:	b29a      	uxth	r2, r3
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e002      	b.n	800527c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	2201      	movs	r2, #1
 8005280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2200      	movs	r2, #0
 8005290:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	2200      	movs	r2, #0
 8005296:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005298:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800529c:	4618      	mov	r0, r3
 800529e:	3750      	adds	r7, #80	; 0x50
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	08005a24 	.word	0x08005a24

080052ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053aa:	d10a      	bne.n	80053c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b098      	sub	sp, #96	; 0x60
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005400:	f7fb feae 	bl	8001160 <HAL_GetTick>
 8005404:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d12f      	bne.n	8005474 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f88e 	bl	8005544 <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d022      	beq.n	8005474 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
 800544e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e063      	b.n	800553c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d149      	bne.n	8005516 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005482:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f857 	bl	8005544 <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d03c      	beq.n	8005516 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	623b      	str	r3, [r7, #32]
   return(result);
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
 80054bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ee:	61fa      	str	r2, [r7, #28]
 80054f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	617b      	str	r3, [r7, #20]
   return(result);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e012      	b.n	800553c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3758      	adds	r7, #88	; 0x58
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005554:	e049      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d045      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fb fdff 	bl	8001160 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <UART_WaitOnFlagUntilTimeout+0x30>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e048      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d031      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b08      	cmp	r3, #8
 8005592:	d110      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2208      	movs	r2, #8
 800559a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f838 	bl	8005612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2208      	movs	r2, #8
 80055a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e029      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c4:	d111      	bne.n	80055ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f81e 	bl	8005612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e00f      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	429a      	cmp	r2, r3
 8005606:	d0a6      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005612:	b480      	push	{r7}
 8005614:	b095      	sub	sp, #84	; 0x54
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	643b      	str	r3, [r7, #64]	; 0x40
 800563a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	61fb      	str	r3, [r7, #28]
   return(result);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	64bb      	str	r3, [r7, #72]	; 0x48
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e3      	bne.n	800564c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d118      	bne.n	80056be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60bb      	str	r3, [r7, #8]
   return(result);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	613b      	str	r3, [r7, #16]
   return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056d2:	bf00      	nop
 80056d4:	3754      	adds	r7, #84	; 0x54
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e027      	b.n	8005744 <HAL_UARTEx_DisableFifoMode+0x66>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	; 0x24
 8005700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005722:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005764:	2302      	movs	r3, #2
 8005766:	e02d      	b.n	80057c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	; 0x24
 8005774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f84f 	bl	8005848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e02d      	b.n	8005840 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	; 0x24
 80057f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f811 	bl	8005848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005868:	e031      	b.n	80058ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800586a:	2308      	movs	r3, #8
 800586c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800586e:	2308      	movs	r3, #8
 8005870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	0e5b      	lsrs	r3, r3, #25
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	0f5b      	lsrs	r3, r3, #29
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	7b3a      	ldrb	r2, [r7, #12]
 8005896:	4911      	ldr	r1, [pc, #68]	; (80058dc <UARTEx_SetNbDataToProcess+0x94>)
 8005898:	5c8a      	ldrb	r2, [r1, r2]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800589e:	7b3a      	ldrb	r2, [r7, #12]
 80058a0:	490f      	ldr	r1, [pc, #60]	; (80058e0 <UARTEx_SetNbDataToProcess+0x98>)
 80058a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	7b7a      	ldrb	r2, [r7, #13]
 80058b4:	4909      	ldr	r1, [pc, #36]	; (80058dc <UARTEx_SetNbDataToProcess+0x94>)
 80058b6:	5c8a      	ldrb	r2, [r1, r2]
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058bc:	7b7a      	ldrb	r2, [r7, #13]
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <UARTEx_SetNbDataToProcess+0x98>)
 80058c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	08005a3c 	.word	0x08005a3c
 80058e0:	08005a44 	.word	0x08005a44

080058e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	401a      	ands	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
 800592c:	e00b      	b.n	8005946 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
 8005940:	e001      	b.n	8005946 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 001c 	add.w	r0, r7, #28
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f023 0201 	bic.w	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005978:	2100      	movs	r1, #0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ffc7 	bl	800590e <USB_SetCurrentMode>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005996:	b004      	add	sp, #16
 8005998:	4770      	bx	lr

0800599a <memset>:
 800599a:	4402      	add	r2, r0
 800599c:	4603      	mov	r3, r0
 800599e:	4293      	cmp	r3, r2
 80059a0:	d100      	bne.n	80059a4 <memset+0xa>
 80059a2:	4770      	bx	lr
 80059a4:	f803 1b01 	strb.w	r1, [r3], #1
 80059a8:	e7f9      	b.n	800599e <memset+0x4>
	...

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4d0d      	ldr	r5, [pc, #52]	; (80059e4 <__libc_init_array+0x38>)
 80059b0:	2600      	movs	r6, #0
 80059b2:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b4:	1b64      	subs	r4, r4, r5
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	4d0b      	ldr	r5, [pc, #44]	; (80059ec <__libc_init_array+0x40>)
 80059be:	2600      	movs	r6, #0
 80059c0:	4c0b      	ldr	r4, [pc, #44]	; (80059f0 <__libc_init_array+0x44>)
 80059c2:	f000 f817 	bl	80059f4 <_init>
 80059c6:	1b64      	subs	r4, r4, r5
 80059c8:	10a4      	asrs	r4, r4, #2
 80059ca:	42a6      	cmp	r6, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d4:	3601      	adds	r6, #1
 80059d6:	4798      	blx	r3
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	3601      	adds	r6, #1
 80059e0:	4798      	blx	r3
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	08005a54 	.word	0x08005a54
 80059e8:	08005a54 	.word	0x08005a54
 80059ec:	08005a54 	.word	0x08005a54
 80059f0:	08005a58 	.word	0x08005a58

080059f4 <_init>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	bf00      	nop
 80059f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fa:	bc08      	pop	{r3}
 80059fc:	469e      	mov	lr, r3
 80059fe:	4770      	bx	lr

08005a00 <_fini>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr
