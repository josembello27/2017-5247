
Micro tarea 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057bc  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a54  08005a54  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a5c  08005a5c  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005a64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000018  08005a7c  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08005a7c  0000742c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166b7  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297b  00000000  00000000  0001d705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00020080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebf  00000000  00000000  00021368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cf9  00000000  00000000  00022227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ea9  00000000  00000000  00043f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6811  00000000  00000000  0005adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001315da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005190  00000000  00000000  00131620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001367b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000018 	.word	0x20000018
 8000274:	00000000 	.word	0x00000000
 8000278:	080059fc 	.word	0x080059fc

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000001c 	.word	0x2000001c
 8000294:	080059fc 	.word	0x080059fc

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd68 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f852 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f992 	bl	80008e4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005c0:	f000 f8b8 	bl	8000734 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 f910 	bl	80007e8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005c8:	f000 f95a 	bl	8000880 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80005cc:	f000 f8be 	bl	800074c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005d0:	4821      	ldr	r0, [pc, #132]	@ (8000658 <main+0xa8>)
 80005d2:	f004 f9d1 	bl	8004978 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	     if(ESTADO_SIGUIENTE == ESTADO_INIT)
 80005d6:	4b21      	ldr	r3, [pc, #132]	@ (800065c <main+0xac>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b06      	cmp	r3, #6
 80005dc:	d104      	bne.n	80005e8 <main+0x38>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_INIT();
 80005de:	f000 fb1d 	bl	8000c1c <Func_ESTADO_INIT>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1d      	ldr	r2, [pc, #116]	@ (800065c <main+0xac>)
 80005e6:	6013      	str	r3, [r2, #0]
	      }

	      if(ESTADO_SIGUIENTE == ESTADO_ABIERTO)
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <main+0xac>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d104      	bne.n	80005fa <main+0x4a>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_ABIERTO();
 80005f0:	f000 fa44 	bl	8000a7c <Func_ESTADO_ABIERTO>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a19      	ldr	r2, [pc, #100]	@ (800065c <main+0xac>)
 80005f8:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_CERRADO)
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <main+0xac>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d104      	bne.n	800060c <main+0x5c>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_CERRADO();
 8000602:	f000 fa63 	bl	8000acc <Func_ESTADO_CERRADO>
 8000606:	4603      	mov	r3, r0
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <main+0xac>)
 800060a:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_ABRIENDO)
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <main+0xac>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d104      	bne.n	800061e <main+0x6e>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_ABRIENDO();
 8000614:	f000 fa82 	bl	8000b1c <Func_ESTADO_ABRIENDO>
 8000618:	4603      	mov	r3, r0
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <main+0xac>)
 800061c:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_CERRANDO)
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <main+0xac>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b04      	cmp	r3, #4
 8000624:	d104      	bne.n	8000630 <main+0x80>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_CERRANDO();
 8000626:	f000 faa1 	bl	8000b6c <Func_ESTADO_CERRANDO>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <main+0xac>)
 800062e:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_INTERMEDIO)
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <main+0xac>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b05      	cmp	r3, #5
 8000636:	d104      	bne.n	8000642 <main+0x92>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_INTERMEDIO();
 8000638:	f000 fac0 	bl	8000bbc <Func_ESTADO_INTERMEDIO>
 800063c:	4603      	mov	r3, r0
 800063e:	4a07      	ldr	r2, [pc, #28]	@ (800065c <main+0xac>)
 8000640:	6013      	str	r3, [r2, #0]
	      }
	      if(ESTADO_SIGUIENTE == ESTADO_ERROR)
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <main+0xac>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1c5      	bne.n	80005d6 <main+0x26>
	      {
	          ESTADO_SIGUIENTE = Func_ESTADO_ERROR();
 800064a:	f000 fa0d 	bl	8000a68 <Func_ESTADO_ERROR>
 800064e:	4603      	mov	r3, r0
 8000650:	4a02      	ldr	r2, [pc, #8]	@ (800065c <main+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	     if(ESTADO_SIGUIENTE == ESTADO_INIT)
 8000654:	e7bf      	b.n	80005d6 <main+0x26>
 8000656:	bf00      	nop
 8000658:	20000034 	.word	0x20000034
 800065c:	20000008 	.word	0x20000008

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	@ 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2250      	movs	r2, #80	@ 0x50
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 f997 	bl	80059a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <SystemClock_Config+0xd0>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	4a29      	ldr	r2, [pc, #164]	@ (8000730 <SystemClock_Config+0xd0>)
 800068c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000690:	6113      	str	r3, [r2, #16]
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xd0>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069e:	bf00      	nop
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <SystemClock_Config+0xd0>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d1f9      	bne.n	80006a0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ac:	2321      	movs	r3, #33	@ 0x21
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006c0:	2303      	movs	r3, #3
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006c4:	230c      	movs	r3, #12
 80006c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006c8:	23fa      	movs	r3, #250	@ 0xfa
 80006ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006d8:	2304      	movs	r3, #4
 80006da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006dc:	2300      	movs	r3, #0
 80006de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f8a5 	bl	8001838 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f4:	f000 fafc 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	231f      	movs	r3, #31
 80006fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fcc6 	bl	80020a8 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000722:	f000 fae5 	bl	8000cf0 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3770      	adds	r7, #112	@ 0x70
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	44020800 	.word	0x44020800

08000734 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000738:	f000 ff70 	bl	800161c <HAL_ICACHE_Enable>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000742:	f000 fad5 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <MX_TIM2_Init+0x98>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_TIM2_Init+0x98>)
 8000774:	2250      	movs	r2, #80	@ 0x50
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_TIM2_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_TIM2_Init+0x98>)
 8000780:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_TIM2_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_TIM2_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000792:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <MX_TIM2_Init+0x98>)
 8000794:	f004 f898 	bl	80048c8 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800079e:	f000 faa7 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_TIM2_Init+0x98>)
 80007b0:	f004 f936 	bl	8004a20 <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007ba:	f000 fa99 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	@ (80007e4 <MX_TIM2_Init+0x98>)
 80007cc:	f004 fb3c 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007d6:	f000 fa8b 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000034 	.word	0x20000034

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <MX_USART1_UART_Init+0x94>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000832:	f004 fb71 	bl	8004f18 <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 fa58 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000844:	f004 ff88 	bl	8005758 <HAL_UARTEx_SetTxFifoThreshold>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800084e:	f000 fa4f 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000856:	f004 ffbd 	bl	80057d4 <HAL_UARTEx_SetRxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 fa46 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_USART1_UART_Init+0x90>)
 8000866:	f004 ff3e 	bl	80056e6 <HAL_UARTEx_DisableFifoMode>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 fa3e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000080 	.word	0x20000080
 800087c:	40013800 	.word	0x40013800

08000880 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 8000886:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <MX_USB_PCD_Init+0x60>)
 8000888:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 800088c:	2208      	movs	r2, #8
 800088e:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 8000892:	2202      	movs	r2, #2
 8000894:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 8000898:	2202      	movs	r2, #2
 800089a:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USB_PCD_Init+0x5c>)
 80008c8:	f000 feb8 	bl	800163c <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80008d2:	f000 fa0d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000114 	.word	0x20000114
 80008e0:	40016000 	.word	0x40016000

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b56      	ldr	r3, [pc, #344]	@ (8000a54 <MX_GPIO_Init+0x170>)
 80008fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000900:	4a54      	ldr	r2, [pc, #336]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090a:	4b52      	ldr	r3, [pc, #328]	@ (8000a54 <MX_GPIO_Init+0x170>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000918:	4b4e      	ldr	r3, [pc, #312]	@ (8000a54 <MX_GPIO_Init+0x170>)
 800091a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091e:	4a4d      	ldr	r2, [pc, #308]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000924:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000928:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <MX_GPIO_Init+0x170>)
 800092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093c:	4a45      	ldr	r2, [pc, #276]	@ (8000a54 <MX_GPIO_Init+0x170>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b3f      	ldr	r3, [pc, #252]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a54 <MX_GPIO_Init+0x170>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000964:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000978:	4a36      	ldr	r2, [pc, #216]	@ (8000a54 <MX_GPIO_Init+0x170>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000982:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <MX_GPIO_Init+0x170>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|Ma_Pin|Mc_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	21e0      	movs	r1, #224	@ 0xe0
 8000994:	4830      	ldr	r0, [pc, #192]	@ (8000a58 <MX_GPIO_Init+0x174>)
 8000996:	f000 fe29 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a0:	482e      	ldr	r0, [pc, #184]	@ (8000a5c <MX_GPIO_Init+0x178>)
 80009a2:	f000 fe23 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 80009a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0x17c>)
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4828      	ldr	r0, [pc, #160]	@ (8000a5c <MX_GPIO_Init+0x178>)
 80009bc:	f000 fcc4 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sa_Pin Sc_Pin Bc_Pin Ba_Pin */
  GPIO_InitStruct.Pin = Sa_Pin|Sc_Pin|Bc_Pin|Ba_Pin;
 80009c0:	f240 3311 	movw	r3, #785	@ 0x311
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4820      	ldr	r0, [pc, #128]	@ (8000a58 <MX_GPIO_Init+0x174>)
 80009d6:	f000 fcb7 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_VCP_RX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin;
 80009da:	2308      	movs	r3, #8
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 80009ea:	230d      	movs	r3, #13
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <MX_GPIO_Init+0x174>)
 80009f6:	f000 fca7 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin Ma_Pin Mc_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|Ma_Pin|Mc_Pin;
 80009fa:	23e0      	movs	r3, #224	@ 0xe0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_GPIO_Init+0x174>)
 8000a12:	f000 fc99 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <MX_GPIO_Init+0x178>)
 8000a30:	f000 fc8a 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a34:	2304      	movs	r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_GPIO_Init+0x17c>)
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <MX_GPIO_Init+0x180>)
 8000a48:	f000 fc7e 	bl	8001348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	44020c00 	.word	0x44020c00
 8000a58:	42020000 	.word	0x42020000
 8000a5c:	42020800 	.word	0x42020800
 8000a60:	10110000 	.word	0x10110000
 8000a64:	42020c00 	.word	0x42020c00

08000a68 <Func_ESTADO_ERROR>:

/* USER CODE BEGIN 4 */
int Func_ESTADO_ERROR(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
    for(;;)
    {
        inout.Led = TRUE;
 8000a6c:	4a02      	ldr	r2, [pc, #8]	@ (8000a78 <Func_ESTADO_ERROR+0x10>)
 8000a6e:	7813      	ldrb	r3, [r2, #0]
 8000a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a74:	7013      	strb	r3, [r2, #0]
 8000a76:	e7f9      	b.n	8000a6c <Func_ESTADO_ERROR+0x4>
 8000a78:	2000041c 	.word	0x2000041c

08000a7c <Func_ESTADO_ABIERTO>:
    }
}
int Func_ESTADO_ABIERTO(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <Func_ESTADO_ABIERTO+0x44>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <Func_ESTADO_ABIERTO+0x48>)
 8000a86:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABIERTO;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <Func_ESTADO_ABIERTO+0x44>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <Func_ESTADO_ABIERTO+0x4c>)
 8000a90:	7813      	ldrb	r3, [r2, #0]
 8000a92:	f36f 03c3 	bfc	r3, #3, #1
 8000a96:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000a98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <Func_ESTADO_ABIERTO+0x4c>)
 8000a9a:	7813      	ldrb	r3, [r2, #0]
 8000a9c:	f36f 0382 	bfc	r3, #2, #1
 8000aa0:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_ON, INTER_RAPIDO);
 8000aa2:	2119      	movs	r1, #25
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 f909 	bl	8000cbc <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Bc == TRUE)
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <Func_ESTADO_ABIERTO+0x4c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1f8      	bne.n	8000aaa <Func_ESTADO_ABIERTO+0x2e>
        {
            return ESTADO_CERRANDO;
 8000ab8:	2304      	movs	r3, #4
        }
    }
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	2000041c 	.word	0x2000041c

08000acc <Func_ESTADO_CERRADO>:
int Func_ESTADO_CERRADO(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <Func_ESTADO_CERRADO+0x44>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <Func_ESTADO_CERRADO+0x48>)
 8000ad6:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRADO;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <Func_ESTADO_CERRADO+0x44>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <Func_ESTADO_CERRADO+0x4c>)
 8000ae0:	7813      	ldrb	r3, [r2, #0]
 8000ae2:	f36f 0382 	bfc	r3, #2, #1
 8000ae6:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <Func_ESTADO_CERRADO+0x4c>)
 8000aea:	7813      	ldrb	r3, [r2, #0]
 8000aec:	f36f 03c3 	bfc	r3, #3, #1
 8000af0:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_OFF, INTER_OFF);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f8e1 	bl	8000cbc <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Ba == TRUE)
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <Func_ESTADO_CERRADO+0x4c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d1f8      	bne.n	8000afa <Func_ESTADO_CERRADO+0x2e>
        {
            return ESTADO_ABRIENDO;
 8000b08:	2303      	movs	r3, #3
        }
    }

}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000004 	.word	0x20000004
 8000b14:	20000000 	.word	0x20000000
 8000b18:	2000041c 	.word	0x2000041c

08000b1c <Func_ESTADO_ABRIENDO>:
int Func_ESTADO_ABRIENDO(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <Func_ESTADO_ABRIENDO+0x44>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <Func_ESTADO_ABRIENDO+0x48>)
 8000b26:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABRIENDO;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <Func_ESTADO_ABRIENDO+0x44>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <Func_ESTADO_ABRIENDO+0x4c>)
 8000b30:	7813      	ldrb	r3, [r2, #0]
 8000b32:	f36f 0382 	bfc	r3, #2, #1
 8000b36:	7013      	strb	r3, [r2, #0]
    inout.Ma = TRUE;
 8000b38:	4a0b      	ldr	r2, [pc, #44]	@ (8000b68 <Func_ESTADO_ABRIENDO+0x4c>)
 8000b3a:	7813      	ldrb	r3, [r2, #0]
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_ON, INTER_LENTO);
 8000b42:	2132      	movs	r1, #50	@ 0x32
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 f8b9 	bl	8000cbc <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Sa == TRUE)
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <Func_ESTADO_ABRIENDO+0x4c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d1f8      	bne.n	8000b4a <Func_ESTADO_ABRIENDO+0x2e>
        {
            return ESTADO_ABIERTO;
 8000b58:	2301      	movs	r3, #1
        }
    }
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000004 	.word	0x20000004
 8000b64:	20000000 	.word	0x20000000
 8000b68:	2000041c 	.word	0x2000041c

08000b6c <Func_ESTADO_CERRANDO>:
int Func_ESTADO_CERRANDO(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <Func_ESTADO_CERRANDO+0x44>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb4 <Func_ESTADO_CERRANDO+0x48>)
 8000b76:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRANDO;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <Func_ESTADO_CERRANDO+0x44>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	601a      	str	r2, [r3, #0]
    inout.Mc = TRUE;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <Func_ESTADO_CERRANDO+0x4c>)
 8000b80:	7813      	ldrb	r3, [r2, #0]
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 8000b88:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb8 <Func_ESTADO_CERRANDO+0x4c>)
 8000b8a:	7813      	ldrb	r3, [r2, #0]
 8000b8c:	f36f 03c3 	bfc	r3, #3, #1
 8000b90:	7013      	strb	r3, [r2, #0]
    Func_ESTADO_SETTINGLED(LED_ON, INTER_LENTO);
 8000b92:	2132      	movs	r1, #50	@ 0x32
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 f891 	bl	8000cbc <Func_ESTADO_SETTINGLED>
    for(;;)
    {
        if(inout.Sc == TRUE)
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <Func_ESTADO_CERRANDO+0x4c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d1f8      	bne.n	8000b9a <Func_ESTADO_CERRANDO+0x2e>
        {
            return ESTADO_CERRADO;
 8000ba8:	2302      	movs	r3, #2
        }
    }
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	2000041c 	.word	0x2000041c

08000bbc <Func_ESTADO_INTERMEDIO>:
int Func_ESTADO_INTERMEDIO(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <Func_ESTADO_INTERMEDIO+0x54>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a13      	ldr	r2, [pc, #76]	@ (8000c14 <Func_ESTADO_INTERMEDIO+0x58>)
 8000bc6:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INTERMEDIO;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <Func_ESTADO_INTERMEDIO+0x54>)
 8000bca:	2205      	movs	r2, #5
 8000bcc:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000bd0:	7813      	ldrb	r3, [r2, #0]
 8000bd2:	f36f 03c3 	bfc	r3, #3, #1
 8000bd6:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000bda:	7813      	ldrb	r3, [r2, #0]
 8000bdc:	f36f 0382 	bfc	r3, #2, #1
 8000be0:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
        if(inout.Ba == TRUE)
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <Func_ESTADO_INTERMEDIO+0x38>
        {
            return ESTADO_ABRIENDO;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e007      	b.n	8000c04 <Func_ESTADO_INTERMEDIO+0x48>
        }
        if(inout.Bc == TRUE)
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d1ef      	bne.n	8000be2 <Func_ESTADO_INTERMEDIO+0x26>
        {
            return ESTADO_CERRANDO;
 8000c02:	2304      	movs	r3, #4
        }
    }
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000004 	.word	0x20000004
 8000c14:	20000000 	.word	0x20000000
 8000c18:	2000041c 	.word	0x2000041c

08000c1c <Func_ESTADO_INIT>:
int Func_ESTADO_INIT(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <Func_ESTADO_INIT+0x94>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <Func_ESTADO_INIT+0x98>)
 8000c26:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INIT;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <Func_ESTADO_INIT+0x94>)
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 8000c2e:	4a22      	ldr	r2, [pc, #136]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c30:	7813      	ldrb	r3, [r2, #0]
 8000c32:	f36f 03c3 	bfc	r3, #3, #1
 8000c36:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000c38:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c3a:	7813      	ldrb	r3, [r2, #0]
 8000c3c:	f36f 0382 	bfc	r3, #2, #1
 8000c40:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
        if((inout.Sa == TRUE) && (inout.Sc == TRUE))
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d108      	bne.n	8000c62 <Func_ESTADO_INIT+0x46>
 8000c50:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <Func_ESTADO_INIT+0x46>
        {
            return ESTADO_ERROR;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e020      	b.n	8000ca4 <Func_ESTADO_INIT+0x88>
        }

        if(inout.Sa == TRUE)
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <Func_ESTADO_INIT+0x58>
        {
            return ESTADO_ABIERTO;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e017      	b.n	8000ca4 <Func_ESTADO_INIT+0x88>
        }

        if(inout.Sc == TRUE)
 8000c74:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d101      	bne.n	8000c86 <Func_ESTADO_INIT+0x6a>
        {
            return ESTADO_CERRADO;
 8000c82:	2302      	movs	r3, #2
 8000c84:	e00e      	b.n	8000ca4 <Func_ESTADO_INIT+0x88>
        }

        if((inout.Sa == FALSE) && (inout.Sc == FALSE))
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1d6      	bne.n	8000c42 <Func_ESTADO_INIT+0x26>
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <Func_ESTADO_INIT+0x9c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1cf      	bne.n	8000c42 <Func_ESTADO_INIT+0x26>
        {
            return ESTADO_INTERMEDIO;
 8000ca2:	2305      	movs	r3, #5
        }
    }
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	2000041c 	.word	0x2000041c

08000cbc <Func_ESTADO_SETTINGLED>:

int Func_ESTADO_SETTINGLED(int St, int Inter)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	LedStatus.StatusLED = St;       //Estado del Led
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	b2d9      	uxtb	r1, r3
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <Func_ESTADO_SETTINGLED+0x30>)
 8000cd0:	7813      	ldrb	r3, [r2, #0]
 8000cd2:	f361 0300 	bfi	r3, r1, #0, #1
 8000cd6:	7013      	strb	r3, [r2, #0]
	LedStatus.InterLED = Inter;     //Velocidad de Intermitencia
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <Func_ESTADO_SETTINGLED+0x30>)
 8000cdc:	6053      	str	r3, [r2, #4]
	return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20000420 	.word	0x20000420

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d1c:	d10e      	bne.n	8000d3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_TIM_Base_MspInit+0x3c>)
 8000d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d24:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_TIM_Base_MspInit+0x3c>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	44020c00 	.word	0x44020c00

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2288      	movs	r2, #136	@ 0x88
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fe18 	bl	80059a2 <memset>
  if(huart->Instance==USART1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a26      	ldr	r2, [pc, #152]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d145      	bne.n	8000e08 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d7c:	f04f 0201 	mov.w	r2, #1
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fccb 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d9c:	f7ff ffa8 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000da6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dc4:	4a13      	ldr	r2, [pc, #76]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000ddc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <HAL_UART_MspInit+0xcc>)
 8000e04:	f000 faa0 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	37b0      	adds	r7, #176	@ 0xb0
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	44020c00 	.word	0x44020c00
 8000e18:	42020400 	.word	0x42020400

08000e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2288      	movs	r2, #136	@ 0x88
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fdb0 	bl	80059a2 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a27      	ldr	r2, [pc, #156]	@ (8000ee4 <HAL_PCD_MspInit+0xc8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d146      	bne.n	8000eda <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	f04f 0310 	mov.w	r3, #16
 8000e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e58:	2330      	movs	r3, #48	@ 0x30
 8000e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fc62 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000e6e:	f7ff ff3f 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <HAL_PCD_MspInit+0xcc>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <HAL_PCD_MspInit+0xcc>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_PCD_MspInit+0xcc>)
 8000e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_DN_Pin|USB_FS_DP_Pin;
 8000e90:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <HAL_PCD_MspInit+0xd0>)
 8000eb8:	f000 fa46 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_PCD_MspInit+0xcc>)
 8000ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ec2:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <HAL_PCD_MspInit+0xcc>)
 8000ec4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_PCD_MspInit+0xcc>)
 8000ece:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	37b0      	adds	r7, #176	@ 0xb0
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40016000 	.word	0x40016000
 8000ee8:	44020c00 	.word	0x44020c00
 8000eec:	42020000 	.word	0x42020000

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f8fb 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f56:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <SystemInit+0xc8>)
 8000f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001018 <SystemInit+0xc8>)
 8000f5e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <SystemInit+0xcc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <SystemInit+0xcc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <SystemInit+0xcc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000f78:	4b28      	ldr	r3, [pc, #160]	@ (800101c <SystemInit+0xcc>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4927      	ldr	r1, [pc, #156]	@ (800101c <SystemInit+0xcc>)
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <SystemInit+0xd0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <SystemInit+0xcc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000f8a:	4b24      	ldr	r3, [pc, #144]	@ (800101c <SystemInit+0xcc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <SystemInit+0xcc>)
 8000f92:	4a24      	ldr	r2, [pc, #144]	@ (8001024 <SystemInit+0xd4>)
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <SystemInit+0xcc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <SystemInit+0xcc>)
 8000f9e:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <SystemInit+0xd4>)
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <SystemInit+0xcc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <SystemInit+0xcc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <SystemInit+0xcc>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <SystemInit+0xcc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <SystemInit+0xc8>)
 8000fbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fc0:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <SystemInit+0xd8>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000fca:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000fd2:	d003      	beq.n	8000fdc <SystemInit+0x8c>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000fda:	d117      	bne.n	800100c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <SystemInit+0xd8>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <SystemInit+0xd8>)
 8000fea:	4a10      	ldr	r2, [pc, #64]	@ (800102c <SystemInit+0xdc>)
 8000fec:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <SystemInit+0xd8>)
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <SystemInit+0xe0>)
 8000ff2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <SystemInit+0xd8>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <SystemInit+0xd8>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <SystemInit+0xd8>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <SystemInit+0xd8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	61d3      	str	r3, [r2, #28]
  }
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	44020c00 	.word	0x44020c00
 8001020:	fae2eae3 	.word	0xfae2eae3
 8001024:	01010280 	.word	0x01010280
 8001028:	40022000 	.word	0x40022000
 800102c:	08192a3b 	.word	0x08192a3b
 8001030:	4c5d6e7f 	.word	0x4c5d6e7f

08001034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800106c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001038:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800103a:	e003      	b.n	8001044 <LoopCopyDataInit>

0800103c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800103e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001040:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001042:	3104      	adds	r1, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001048:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800104a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800104c:	d3f6      	bcc.n	800103c <CopyDataInit>
	ldr	r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001050:	e002      	b.n	8001058 <LoopFillZerobss>

08001052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001052:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001054:	f842 3b04 	str.w	r3, [r2], #4

08001058 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <LoopForever+0x16>)
	cmp	r2, r3
 800105a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800105c:	d3f9      	bcc.n	8001052 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800105e:	f7ff ff77 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f004 fca7 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001066:	f7ff faa3 	bl	80005b0 <main>

0800106a <LoopForever>:

LoopForever:
    b LoopForever
 800106a:	e7fe      	b.n	800106a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800106c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001070:	08005a64 	.word	0x08005a64
	ldr	r0, =_sdata
 8001074:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001078:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 800107c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001080:	2000042c 	.word	0x2000042c

08001084 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_IRQHandler>
	...

08001088 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f929 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001092:	f001 f9c1 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_Init+0x40>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	490a      	ldr	r1, [pc, #40]	@ (80010cc <HAL_Init+0x44>)
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <HAL_Init+0x48>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	200f      	movs	r0, #15
 80010ae:	f000 f811 	bl	80010d4 <HAL_InitTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e002      	b.n	80010c2 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fe1e 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	44020c00 	.word	0x44020c00
 80010cc:	08005a14 	.word	0x08005a14
 80010d0:	2000000c 	.word	0x2000000c

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e021      	b.n	800112c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_InitTick+0x64>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_InitTick+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f915 	bl	800132e <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f8ed 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x68>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000014 	.word	0x20000014
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000010 	.word	0x20000010

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000014 	.word	0x20000014
 8001164:	20000428 	.word	0x20000428

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000428 	.word	0x20000428

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff5e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb2 	bl	80012a0 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001356:	e136      	b.n	80015c6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8128 	beq.w	80015c0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x38>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b12      	cmp	r3, #18
 800137e:	d125      	bne.n	80013cc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4013      	ands	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	f003 020f 	and.w	r2, r3, #15
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	6979      	ldr	r1, [r7, #20]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d00b      	beq.n	8001420 <HAL_GPIO_Init+0xd8>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001414:	2b11      	cmp	r3, #17
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b12      	cmp	r3, #18
 800141e:	d130      	bne.n	8001482 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001456:	2201      	movs	r2, #1
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4013      	ands	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f003 0201 	and.w	r2, r3, #1
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d017      	beq.n	80014ba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4013      	ands	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d07c      	beq.n	80015c0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80014c6:	4a47      	ldr	r2, [pc, #284]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3318      	adds	r3, #24
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4013      	ands	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0a9a      	lsrs	r2, r3, #10
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	f002 0203 	and.w	r2, r2, #3
 80014f8:	00d2      	lsls	r2, r2, #3
 80014fa:	4093      	lsls	r3, r2
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4313      	orrs	r3, r2
 8001500:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001502:	4938      	ldr	r1, [pc, #224]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3318      	adds	r3, #24
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001510:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001534:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4013      	ands	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800155e:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 8001566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800156a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4013      	ands	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800158a:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 8001594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001598:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80015b8:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_GPIO_Init+0x29c>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f aec1 	bne.w	8001358 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	44022000 	.word	0x44022000
 80015e8:	002f7f7f 	.word	0x002f7f7f

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001608:	e002      	b.n	8001610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_ICACHE_Enable+0x1c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <HAL_ICACHE_Enable+0x1c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40030400 	.word	0x40030400

0800163c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b08f      	sub	sp, #60	@ 0x3c
 8001640:	af0a      	add	r7, sp, #40	@ 0x28
 8001642:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0cd      	b.n	80017ea <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32bd 	ldrb.w	r3, [r3, #701]	@ 0x2bd
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 22bc 	strb.w	r2, [r3, #700]	@ 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fbda 	bl	8000e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	f883 22bd 	strb.w	r2, [r3, #701]	@ 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f939 	bl	80058ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e03e      	b.n	80016fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	333d      	adds	r3, #61	@ 0x3d
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	333c      	adds	r3, #60	@ 0x3c
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	333f      	adds	r3, #63	@ 0x3f
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	334c      	adds	r3, #76	@ 0x4c
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3350      	adds	r3, #80	@ 0x50
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3354      	adds	r3, #84	@ 0x54
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	d3bb      	bcc.n	8001680 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e044      	b.n	8001798 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	f203 137d 	addw	r3, r3, #381	@ 0x17d
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	f203 137f 	addw	r3, r3, #383	@ 0x17f
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3301      	adds	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3b5      	bcc.n	800170e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	687e      	ldr	r6, [r7, #4]
 80017aa:	466d      	mov	r5, sp
 80017ac:	f106 0410 	add.w	r4, r6, #16
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c0:	1d33      	adds	r3, r6, #4
 80017c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f004 f8c9 	bl	800595c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 22bd 	strb.w	r2, [r3, #701]	@ 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f805 	bl	80017f2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
  hpcd->LPM_State = LPM_L0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 22f4 	strb.w	r2, [r3, #756]	@ 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f000 bc28 	b.w	800209c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184c:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	f003 0318 	and.w	r3, r3, #24
 8001854:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001856:	4b92      	ldr	r3, [pc, #584]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x46>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	2b18      	cmp	r3, #24
 8001876:	d114      	bne.n	80018a2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d111      	bne.n	80018a2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f000 bc08 	b.w	800209c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800188c:	4b84      	ldr	r3, [pc, #528]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	4981      	ldr	r1, [pc, #516]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 800189c:	4313      	orrs	r3, r2
 800189e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80018a0:	e040      	b.n	8001924 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d023      	beq.n	80018f2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018aa:	4b7d      	ldr	r3, [pc, #500]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7c      	ldr	r2, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fc57 	bl	8001168 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80018be:	f7ff fc53 	bl	8001168 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e3e5      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018d0:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80018dc:	4b70      	ldr	r3, [pc, #448]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	496d      	ldr	r1, [pc, #436]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	618b      	str	r3, [r1, #24]
 80018f0:	e018      	b.n	8001924 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018f2:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80018f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff fc33 	bl	8001168 <HAL_GetTick>
 8001902:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001906:	f7ff fc2f 	bl	8001168 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e3c1      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001918:	4b61      	ldr	r3, [pc, #388]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a0 	beq.w	8001a72 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b10      	cmp	r3, #16
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x10c>
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b18      	cmp	r3, #24
 800193c:	d109      	bne.n	8001952 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 8092 	bne.w	8001a72 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e3a4      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x132>
 800195c:	4b50      	ldr	r3, [pc, #320]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e058      	b.n	8001a1c <HAL_RCC_OscConfig+0x1e4>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d112      	bne.n	8001998 <HAL_RCC_OscConfig+0x160>
 8001972:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b48      	ldr	r3, [pc, #288]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a47      	ldr	r2, [pc, #284]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001984:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b45      	ldr	r3, [pc, #276]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a44      	ldr	r2, [pc, #272]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001990:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e041      	b.n	8001a1c <HAL_RCC_OscConfig+0x1e4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x190>
 80019a2:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a38      	ldr	r2, [pc, #224]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e029      	b.n	8001a1c <HAL_RCC_OscConfig+0x1e4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80019d0:	d112      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1c0>
 80019d2:	4b33      	ldr	r3, [pc, #204]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a32      	ldr	r2, [pc, #200]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e011      	b.n	8001a1c <HAL_RCC_OscConfig+0x1e4>
 80019f8:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a25      	ldr	r2, [pc, #148]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001a16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fba0 	bl	8001168 <HAL_GetTick>
 8001a28:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fb9c 	bl	8001168 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e32e      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x1f4>
 8001a4a:	e012      	b.n	8001a72 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb8c 	bl	8001168 <HAL_GetTick>
 8001a50:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fb88 	bl	8001168 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e31a      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_RCC_OscConfig+0x268>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 809a 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x25a>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	2b18      	cmp	r3, #24
 8001a8a:	d149      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d146      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e2fe      	b.n	800209c <HAL_RCC_OscConfig+0x864>
 8001a9e:	bf00      	nop
 8001aa0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001aaa:	4b9a      	ldr	r3, [pc, #616]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0218 	and.w	r2, r3, #24
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d014      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001aba:	4b96      	ldr	r3, [pc, #600]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0218 	bic.w	r2, r3, #24
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	4993      	ldr	r1, [pc, #588]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001acc:	f000 fdd0 	bl	8002670 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ad0:	4b91      	ldr	r3, [pc, #580]	@ (8001d18 <HAL_RCC_OscConfig+0x4e0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fafd 	bl	80010d4 <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e2db      	b.n	800209c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb40 	bl	8001168 <HAL_GetTick>
 8001ae8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb3c 	bl	8001168 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e2ce      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afe:	4b85      	ldr	r3, [pc, #532]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b0a:	4b82      	ldr	r3, [pc, #520]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	497e      	ldr	r1, [pc, #504]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b1e:	e049      	b.n	8001bb4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b28:	4b7a      	ldr	r3, [pc, #488]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0218 	bic.w	r2, r3, #24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4977      	ldr	r1, [pc, #476]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001b3a:	4b76      	ldr	r3, [pc, #472]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb0f 	bl	8001168 <HAL_GetTick>
 8001b4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fb0b 	bl	8001168 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e29d      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b60:	4b6c      	ldr	r3, [pc, #432]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b6c:	4b69      	ldr	r3, [pc, #420]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	4966      	ldr	r1, [pc, #408]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	610b      	str	r3, [r1, #16]
 8001b80:	e018      	b.n	8001bb4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b64      	ldr	r3, [pc, #400]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff faeb 	bl	8001168 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b96:	f7ff fae7 	bl	8001168 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e279      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d03c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc8:	4b52      	ldr	r3, [pc, #328]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bce:	4a51      	ldr	r2, [pc, #324]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001bd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fac6 	bl	8001168 <HAL_GetTick>
 8001bdc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fac2 	bl	8001168 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e254      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bf2:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ef      	beq.n	8001be0 <HAL_RCC_OscConfig+0x3a8>
 8001c00:	e01b      	b.n	8001c3a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c02:	4b44      	ldr	r3, [pc, #272]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c08:	4a42      	ldr	r2, [pc, #264]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff faa9 	bl	8001168 <HAL_GetTick>
 8001c16:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff faa5 	bl	8001168 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e237      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c2c:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80d2 	beq.w	8001dec <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c48:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <HAL_RCC_OscConfig+0x4e4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d118      	bne.n	8001c86 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001c54:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_RCC_OscConfig+0x4e4>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c58:	4a30      	ldr	r2, [pc, #192]	@ (8001d1c <HAL_RCC_OscConfig+0x4e4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fa82 	bl	8001168 <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c68:	f7ff fa7e 	bl	8001168 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e210      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c7a:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <HAL_RCC_OscConfig+0x4e4>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x468>
 8001c8e:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c9e:	e074      	b.n	8001d8a <HAL_RCC_OscConfig+0x552>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d118      	bne.n	8001cda <HAL_RCC_OscConfig+0x4a2>
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cae:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cce:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cd8:	e057      	b.n	8001d8a <HAL_RCC_OscConfig+0x552>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d11e      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4e8>
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf8:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d08:	4a02      	ldr	r2, [pc, #8]	@ (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d12:	e03a      	b.n	8001d8a <HAL_RCC_OscConfig+0x552>
 8001d14:	44020c00 	.word	0x44020c00
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	44020800 	.word	0x44020800
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b85      	cmp	r3, #133	@ 0x85
 8001d26:	d118      	bne.n	8001d5a <HAL_RCC_OscConfig+0x522>
 8001d28:	4ba2      	ldr	r3, [pc, #648]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2e:	4aa1      	ldr	r2, [pc, #644]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d38:	4b9e      	ldr	r3, [pc, #632]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d3e:	4a9d      	ldr	r2, [pc, #628]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d48:	4b9a      	ldr	r3, [pc, #616]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d4e:	4a99      	ldr	r2, [pc, #612]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d58:	e017      	b.n	8001d8a <HAL_RCC_OscConfig+0x552>
 8001d5a:	4b96      	ldr	r3, [pc, #600]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d60:	4a94      	ldr	r2, [pc, #592]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d6a:	4b92      	ldr	r3, [pc, #584]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d70:	4a90      	ldr	r2, [pc, #576]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d7a:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d80:	4a8c      	ldr	r2, [pc, #560]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff f9e9 	bl	8001168 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff f9e5 	bl	8001168 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e175      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db0:	4b80      	ldr	r3, [pc, #512]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ed      	beq.n	8001d9a <HAL_RCC_OscConfig+0x562>
 8001dbe:	e015      	b.n	8001dec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f9d2 	bl	8001168 <HAL_GetTick>
 8001dc4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f9ce 	bl	8001168 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e15e      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dde:	4b75      	ldr	r3, [pc, #468]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ed      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d036      	beq.n	8001e66 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e00:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6b      	ldr	r2, [pc, #428]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f9ac 	bl	8001168 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001e14:	f7ff f9a8 	bl	8001168 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e13a      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e26:	4b63      	ldr	r3, [pc, #396]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x5dc>
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e34:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff f992 	bl	8001168 <HAL_GetTick>
 8001e44:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001e48:	f7ff f98e 	bl	8001168 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e120      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e5a:	4b56      	ldr	r3, [pc, #344]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8115 	beq.w	800209a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b18      	cmp	r3, #24
 8001e74:	f000 80af 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 8086 	bne.w	8001f8e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e82:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f96b 	bl	8001168 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e96:	f7ff f967 	bl	8001168 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0f9      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ea8:	4b42      	ldr	r3, [pc, #264]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ebc:	f023 0303 	bic.w	r3, r3, #3
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ec8:	0212      	lsls	r2, r2, #8
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	4939      	ldr	r1, [pc, #228]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	3b01      	subs	r3, #1
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f02:	492c      	ldr	r1, [pc, #176]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f08:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0c:	4a29      	ldr	r2, [pc, #164]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f0e:	f023 0310 	bic.w	r3, r3, #16
 8001f12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001f1e:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f22:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001f2a:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	f023 020c 	bic.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	491f      	ldr	r1, [pc, #124]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f023 0220 	bic.w	r2, r3, #32
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f48:	491a      	ldr	r1, [pc, #104]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff f8ff 	bl	8001168 <HAL_GetTick>
 8001f6a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff f8fb 	bl	8001168 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e08d      	b.n	800209c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x736>
 8001f8c:	e085      	b.n	800209a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f8e5 	bl	8001168 <HAL_GetTick>
 8001f9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f8e1 	bl	8001168 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d903      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e073      	b.n	800209c <HAL_RCC_OscConfig+0x864>
 8001fb4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001fc4:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	4a36      	ldr	r2, [pc, #216]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8001fca:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	6293      	str	r3, [r2, #40]	@ 0x28
 8001fd4:	e061      	b.n	800209a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001fd6:	4b33      	ldr	r3, [pc, #204]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8001fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d031      	beq.n	800204e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d12a      	bne.n	800204e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d122      	bne.n	800204e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002012:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d11a      	bne.n	800204e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	0a5b      	lsrs	r3, r3, #9
 800201c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d111      	bne.n	800204e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d108      	bne.n	800204e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	0e1b      	lsrs	r3, r3, #24
 8002040:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e024      	b.n	800209c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002052:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8002054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002060:	429a      	cmp	r2, r3
 8002062:	d01a      	beq.n	800209a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	4a0e      	ldr	r2, [pc, #56]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 800206a:	f023 0310 	bic.w	r3, r3, #16
 800206e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f87a 	bl	8001168 <HAL_GetTick>
 8002074:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002076:	bf00      	nop
 8002078:	f7ff f876 	bl	8001168 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4293      	cmp	r3, r2
 8002082:	d0f9      	beq.n	8002078 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002088:	4a06      	ldr	r2, [pc, #24]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <HAL_RCC_OscConfig+0x86c>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	44020c00 	.word	0x44020c00

080020a8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e19e      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b83      	ldr	r3, [pc, #524]	@ (80022cc <HAL_RCC_ClockConfig+0x224>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b80      	ldr	r3, [pc, #512]	@ (80022cc <HAL_RCC_ClockConfig+0x224>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	497e      	ldr	r1, [pc, #504]	@ (80022cc <HAL_RCC_ClockConfig+0x224>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b7c      	ldr	r3, [pc, #496]	@ (80022cc <HAL_RCC_ClockConfig+0x224>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e186      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	4b74      	ldr	r3, [pc, #464]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002106:	429a      	cmp	r2, r3
 8002108:	d909      	bls.n	800211e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800210a:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	496d      	ldr	r1, [pc, #436]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800211a:	4313      	orrs	r3, r2
 800211c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002138:	429a      	cmp	r2, r3
 800213a:	d909      	bls.n	8002150 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800213c:	4b64      	ldr	r3, [pc, #400]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4961      	ldr	r1, [pc, #388]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800214c:	4313      	orrs	r3, r2
 800214e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b5b      	ldr	r3, [pc, #364]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800216c:	4b58      	ldr	r3, [pc, #352]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4955      	ldr	r1, [pc, #340]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800217a:	4313      	orrs	r3, r2
 800217c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	429a      	cmp	r2, r3
 8002198:	d908      	bls.n	80021ac <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800219a:	4b4d      	ldr	r3, [pc, #308]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f023 020f 	bic.w	r2, r3, #15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	494a      	ldr	r1, [pc, #296]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8093 	beq.w	80022e0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021c2:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d121      	bne.n	8002212 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e113      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e107      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021f2:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0fb      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0f3      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002212:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	492c      	ldr	r1, [pc, #176]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 8002220:	4313      	orrs	r3, r2
 8002222:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002224:	f7fe ffa0 	bl	8001168 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d112      	bne.n	8002258 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe ff98 	bl	8001168 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0d7      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224a:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0318 	and.w	r3, r3, #24
 8002252:	2b18      	cmp	r3, #24
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_ClockConfig+0x18c>
 8002256:	e043      	b.n	80022e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d112      	bne.n	8002286 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002262:	f7fe ff81 	bl	8001168 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0c0      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 0318 	and.w	r3, r3, #24
 8002280:	2b10      	cmp	r3, #16
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
 8002284:	e02c      	b.n	80022e0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d122      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7fe ff6a 	bl	8001168 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0a9      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_RCC_ClockConfig+0x228>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0318 	and.w	r3, r3, #24
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d1ee      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
 80022b2:	e015      	b.n	80022e0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe ff58 	bl	8001168 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d906      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e097      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f003 0318 	and.w	r3, r3, #24
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e9      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b44      	ldr	r3, [pc, #272]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d208      	bcs.n	800230e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80022fc:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 020f 	bic.w	r2, r3, #15
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	493e      	ldr	r1, [pc, #248]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230e:	4b3e      	ldr	r3, [pc, #248]	@ (8002408 <HAL_RCC_ClockConfig+0x360>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d210      	bcs.n	800233e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231c:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_RCC_ClockConfig+0x360>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 020f 	bic.w	r2, r3, #15
 8002324:	4938      	ldr	r1, [pc, #224]	@ (8002408 <HAL_RCC_ClockConfig+0x360>)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232c:	4b36      	ldr	r3, [pc, #216]	@ (8002408 <HAL_RCC_ClockConfig+0x360>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e05d      	b.n	80023fa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002356:	429a      	cmp	r2, r3
 8002358:	d208      	bcs.n	800236c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800235a:	4b2a      	ldr	r3, [pc, #168]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4927      	ldr	r1, [pc, #156]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002386:	429a      	cmp	r2, r3
 8002388:	d209      	bcs.n	800239e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	491a      	ldr	r1, [pc, #104]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d209      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	490e      	ldr	r1, [pc, #56]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023d0:	f000 f822 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCC_ClockConfig+0x35c>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490b      	ldr	r1, [pc, #44]	@ (800240c <HAL_RCC_ClockConfig+0x364>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <HAL_RCC_ClockConfig+0x368>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_RCC_ClockConfig+0x36c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fe70 	bl	80010d4 <HAL_InitTick>
 80023f4:	4603      	mov	r3, r0
 80023f6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	44020c00 	.word	0x44020c00
 8002408:	40022000 	.word	0x40022000
 800240c:	08005a14 	.word	0x08005a14
 8002410:	2000000c 	.word	0x2000000c
 8002414:	20000010 	.word	0x20000010

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800241e:	4b8c      	ldr	r3, [pc, #560]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0318 	and.w	r3, r3, #24
 8002426:	2b08      	cmp	r3, #8
 8002428:	d102      	bne.n	8002430 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800242a:	4b8a      	ldr	r3, [pc, #552]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x23c>)
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e107      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002430:	4b87      	ldr	r3, [pc, #540]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f003 0318 	and.w	r3, r3, #24
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800243c:	4b84      	ldr	r3, [pc, #528]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002448:	4b81      	ldr	r3, [pc, #516]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	4a81      	ldr	r2, [pc, #516]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x240>)
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e0f1      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800245c:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x240>)
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	e0ee      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002462:	4b7b      	ldr	r3, [pc, #492]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0318 	and.w	r3, r3, #24
 800246a:	2b10      	cmp	r3, #16
 800246c:	d102      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800246e:	4b7b      	ldr	r3, [pc, #492]	@ (800265c <HAL_RCC_GetSysClockFreq+0x244>)
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e0e5      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f003 0318 	and.w	r3, r3, #24
 800247c:	2b18      	cmp	r3, #24
 800247e:	f040 80dd 	bne.w	800263c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002482:	4b73      	ldr	r3, [pc, #460]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800248c:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002496:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002498:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80024a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024bc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80b7 	beq.w	8002636 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0xbe>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d056      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x16a>
 80024d4:	e077      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80024d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d02d      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x240>)
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250c:	4b50      	ldr	r3, [pc, #320]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 800250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800251c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002520:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002660 <HAL_RCC_GetSysClockFreq+0x248>
 8002524:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002528:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800252c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002530:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800253c:	e065      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002548:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002664 <HAL_RCC_GetSysClockFreq+0x24c>
 800254c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002550:	4b3f      	ldr	r3, [pc, #252]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002560:	ed97 6a02 	vldr	s12, [r7, #8]
 8002564:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002660 <HAL_RCC_GetSysClockFreq+0x248>
 8002568:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800256c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002574:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002580:	e043      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002668 <HAL_RCC_GetSysClockFreq+0x250>
 8002590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002594:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002660 <HAL_RCC_GetSysClockFreq+0x248>
 80025ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80025c4:	e021      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800266c <HAL_RCC_GetSysClockFreq+0x254>
 80025d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ec:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002660 <HAL_RCC_GetSysClockFreq+0x248>
 80025f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002608:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x238>)
 800260c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260e:	0a5b      	lsrs	r3, r3, #9
 8002610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002614:	3301      	adds	r3, #1
 8002616:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002622:	edd7 6a06 	vldr	s13, [r7, #24]
 8002626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262e:	ee17 3a90 	vmov	r3, s15
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e004      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e001      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x240>)
 800263e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002640:	69fb      	ldr	r3, [r7, #28]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	@ 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	44020c00 	.word	0x44020c00
 8002654:	003d0900 	.word	0x003d0900
 8002658:	03d09000 	.word	0x03d09000
 800265c:	016e3600 	.word	0x016e3600
 8002660:	46000000 	.word	0x46000000
 8002664:	4c742400 	.word	0x4c742400
 8002668:	4bb71b00 	.word	0x4bb71b00
 800266c:	4a742400 	.word	0x4a742400

08002670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002674:	f7ff fed0 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_RCC_GetHCLKFreq+0x2c>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800267e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002682:	4907      	ldr	r1, [pc, #28]	@ (80026a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002686:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x34>)
 8002690:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x34>)
 8002694:	681b      	ldr	r3, [r3, #0]
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	44020c00 	.word	0x44020c00
 80026a0:	08005a14 	.word	0x08005a14
 80026a4:	2000000c 	.word	0x2000000c

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80026ac:	f7ff ffe0 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	44020c00 	.word	0x44020c00
 80026d0:	08005a24 	.word	0x08005a24

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80026d8:	f7ff ffca 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4904      	ldr	r1, [pc, #16]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	44020c00 	.word	0x44020c00
 80026fc:	08005a24 	.word	0x08005a24

08002700 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002704:	f7ff ffb4 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_RCC_GetPCLK3Freq+0x24>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	0b1b      	lsrs	r3, r3, #12
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4904      	ldr	r1, [pc, #16]	@ (8002728 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	44020c00 	.word	0x44020c00
 8002728:	08005a24 	.word	0x08005a24

0800272c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b0aa      	sub	sp, #168	@ 0xa8
 8002732:	af00      	add	r7, sp, #0
 8002734:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002738:	2300      	movs	r3, #0
 800273a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800273e:	2300      	movs	r3, #0
 8002740:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002744:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002750:	2500      	movs	r5, #0
 8002752:	ea54 0305 	orrs.w	r3, r4, r5
 8002756:	d00b      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002758:	4bb8      	ldr	r3, [pc, #736]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800275a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800275e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002762:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	4ab4      	ldr	r2, [pc, #720]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800276a:	430b      	orrs	r3, r1
 800276c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f002 0801 	and.w	r8, r2, #1
 800277c:	f04f 0900 	mov.w	r9, #0
 8002780:	ea58 0309 	orrs.w	r3, r8, r9
 8002784:	d038      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800278a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278c:	2b05      	cmp	r3, #5
 800278e:	d819      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002790:	a201      	add	r2, pc, #4	@ (adr r2, 8002798 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027cd 	.word	0x080027cd
 800279c:	080027b1 	.word	0x080027b1
 80027a0:	080027c5 	.word	0x080027c5
 80027a4:	080027cd 	.word	0x080027cd
 80027a8:	080027cd 	.word	0x080027cd
 80027ac:	080027cd 	.word	0x080027cd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027b4:	3308      	adds	r3, #8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 ffee 	bl	8004798 <RCCEx_PLL2_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80027c2:	e004      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80027cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80027d6:	4b99      	ldr	r3, [pc, #612]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027dc:	f023 0107 	bic.w	r1, r3, #7
 80027e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e6:	4a95      	ldr	r2, [pc, #596]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e8:	430b      	orrs	r3, r1
 80027ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027ee:	e003      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80027f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f002 0a02 	and.w	sl, r2, #2
 8002804:	f04f 0b00 	mov.w	fp, #0
 8002808:	ea5a 030b 	orrs.w	r3, sl, fp
 800280c:	d03c      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800280e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	2b28      	cmp	r3, #40	@ 0x28
 8002816:	d01b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002818:	2b28      	cmp	r3, #40	@ 0x28
 800281a:	d815      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d019      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d811      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002824:	2b18      	cmp	r3, #24
 8002826:	d017      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002828:	2b18      	cmp	r3, #24
 800282a:	d80d      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002830:	2b08      	cmp	r3, #8
 8002832:	d109      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002834:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002838:	3308      	adds	r3, #8
 800283a:	4618      	mov	r0, r3
 800283c:	f001 ffac 	bl	8004798 <RCCEx_PLL2_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002846:	e00a      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800284e:	e006      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002850:	bf00      	nop
 8002852:	e004      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002854:	bf00      	nop
 8002856:	e002      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800285c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800285e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10c      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002866:	4b75      	ldr	r3, [pc, #468]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800286c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002870:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	4a71      	ldr	r2, [pc, #452]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002878:	430b      	orrs	r3, r1
 800287a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800287e:	e003      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002880:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002884:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f002 0304 	and.w	r3, r2, #4
 8002894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800289e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80028a2:	460b      	mov	r3, r1
 80028a4:	4313      	orrs	r3, r2
 80028a6:	d040      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80028a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028b2:	d01e      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80028b4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028b8:	d817      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028be:	d01a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80028c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c4:	d811      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80028c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80028c8:	d017      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80028ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80028cc:	d80d      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d015      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d109      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028da:	3308      	adds	r3, #8
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 ff5b 	bl	8004798 <RCCEx_PLL2_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80028e8:	e00a      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80028f0:	e006      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028f2:	bf00      	nop
 80028f4:	e004      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80028fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002900:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10c      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002908:	4b4c      	ldr	r3, [pc, #304]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800290a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800290e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002912:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	4a48      	ldr	r2, [pc, #288]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800291a:	430b      	orrs	r3, r1
 800291c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002920:	e003      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002922:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002926:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800292a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002936:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002940:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002944:	460b      	mov	r3, r1
 8002946:	4313      	orrs	r3, r2
 8002948:	d043      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800294a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002954:	d021      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002956:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800295a:	d81a      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800295c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002960:	d01d      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002962:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002966:	d814      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002968:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800296c:	d019      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800296e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002972:	d80e      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d016      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d109      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800297e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002982:	3308      	adds	r3, #8
 8002984:	4618      	mov	r0, r3
 8002986:	f001 ff07 	bl	8004798 <RCCEx_PLL2_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002990:	e00a      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800299a:	bf00      	nop
 800299c:	e004      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80029a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10c      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80029ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029c2:	430b      	orrs	r3, r1
 80029c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80029ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80029de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029e0:	2300      	movs	r3, #0
 80029e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80029e8:	460b      	mov	r3, r1
 80029ea:	4313      	orrs	r3, r2
 80029ec:	d03e      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80029ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029f8:	d01b      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80029fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029fe:	d814      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a04:	d017      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002a06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a0a:	d80e      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a14:	d109      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 febb 	bl	8004798 <RCCEx_PLL2_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002a28:	e00b      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002a30:	e007      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002a32:	bf00      	nop
 8002a34:	e005      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002a36:	bf00      	nop
 8002a38:	e003      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002a3a:	bf00      	nop
 8002a3c:	44020c00 	.word	0x44020c00
        break;
 8002a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002a4a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a50:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	4aa1      	ldr	r2, [pc, #644]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002a62:	e003      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002a68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a7e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002a82:	460b      	mov	r3, r1
 8002a84:	4313      	orrs	r3, r2
 8002a86:	d03b      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a92:	d01b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002a94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a98:	d814      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002a9a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a9e:	d017      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002aa0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002aa4:	d80e      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002aaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 fe6e 	bl	8004798 <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002aca:	e004      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002acc:	bf00      	nop
 8002ace:	e002      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002ade:	4b80      	ldr	r3, [pc, #512]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ae4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aee:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002af6:	e003      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002afc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0e:	2300      	movs	r3, #0
 8002b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002b16:	460b      	mov	r3, r1
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	d033      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b26:	d015      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b2c:	d80e      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002b32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b36:	d109      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fe2a 	bl	8004798 <RCCEx_PLL2_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002b4a:	e006      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002b54:	bf00      	nop
 8002b56:	e000      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002b62:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b68:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b72:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002b74:	430b      	orrs	r3, r1
 8002b76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b80:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	6639      	str	r1, [r7, #96]	@ 0x60
 8002b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b94:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b96:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	d033      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb0:	d80e      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d012      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002bb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bba:	d109      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fde8 	bl	8004798 <RCCEx_PLL2_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002bce:	e006      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bde:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002be6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002be8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002bfe:	e003      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c04:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	2100      	movs	r1, #0
 8002c12:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002c24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c2e:	61d3      	str	r3, [r2, #28]
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c32:	69d9      	ldr	r1, [r3, #28]
 8002c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c3c:	4a28      	ldr	r2, [pc, #160]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c50:	2300      	movs	r3, #0
 8002c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c54:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	d046      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c64:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002c68:	d021      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002c6a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002c6e:	d81a      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c74:	d01d      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d814      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c80:	d019      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c86:	d80e      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d016      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c96:	3308      	adds	r3, #8
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f001 fd7d 	bl	8004798 <RCCEx_PLL2_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002cac:	e006      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002cae:	bf00      	nop
 8002cb0:	e004      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002cb2:	bf00      	nop
 8002cb4:	e002      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8002cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cbc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002cc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002cca:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	4a02      	ldr	r2, [pc, #8]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cde:	bf00      	nop
 8002ce0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ce8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002cec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cfe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002d02:	460b      	mov	r3, r1
 8002d04:	4313      	orrs	r3, r2
 8002d06:	d043      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002d12:	d021      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002d14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002d18:	d81a      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1e:	d01d      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002d20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d24:	d814      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d2a:	d019      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8002d2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d30:	d80e      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d40:	3308      	adds	r3, #8
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fd28 	bl	8004798 <RCCEx_PLL2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002d56:	e006      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d58:	bf00      	nop
 8002d5a:	e004      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d5c:	bf00      	nop
 8002d5e:	e002      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002d6e:	4bb6      	ldr	r3, [pc, #728]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002d74:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	4ab2      	ldr	r2, [pc, #712]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d80:	430b      	orrs	r3, r1
 8002d82:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002d86:	e003      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002d90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8002d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d9e:	2300      	movs	r3, #0
 8002da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002da2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d030      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d80f      	bhi.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d211      	bcs.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d911      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fce5 	bl	8004798 <RCCEx_PLL2_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002dec:	4b96      	ldr	r3, [pc, #600]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002df2:	f023 0107 	bic.w	r1, r3, #7
 8002df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dfc:	4a92      	ldr	r2, [pc, #584]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e04:	e003      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e0a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002e0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	2100      	movs	r1, #0
 8002e18:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e20:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002e24:	460b      	mov	r3, r1
 8002e26:	4313      	orrs	r3, r2
 8002e28:	d022      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d005      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e54:	f023 0108 	bic.w	r1, r3, #8
 8002e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e5e:	4a7a      	ldr	r2, [pc, #488]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002e60:	430b      	orrs	r3, r1
 8002e62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e66:	e003      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e6c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002e86:	460b      	mov	r3, r1
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f000 80b0 	beq.w	8002fee <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	4a6e      	ldr	r2, [pc, #440]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe f965 	bl	8001168 <HAL_GetTick>
 8002e9e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea4:	f7fe f960 	bl	8001168 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d903      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ebc:	4b63      	ldr	r3, [pc, #396]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ed      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8002ec8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 808a 	bne.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002edc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d022      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d01b      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ef6:	4b54      	ldr	r3, [pc, #336]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f0a:	4a4f      	ldr	r2, [pc, #316]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f14:	4b4c      	ldr	r3, [pc, #304]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f1a:	4a4b      	ldr	r2, [pc, #300]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f24:	4a48      	ldr	r2, [pc, #288]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d019      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe f915 	bl	8001168 <HAL_GetTick>
 8002f3e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	e00d      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe f910 	bl	8001168 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d903      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8002f5e:	e006      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ea      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002f6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d132      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f84:	d10f      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002f86:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f9a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	61d3      	str	r3, [r2, #28]
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8002fa6:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4a27      	ldr	r2, [pc, #156]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fb0:	61d3      	str	r3, [r2, #28]
 8002fb2:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb8:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fc2:	4b21      	ldr	r3, [pc, #132]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fc4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8002fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fda:	e008      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fdc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fe0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8002fe4:	e003      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fea:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003000:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003004:	460b      	mov	r3, r1
 8003006:	4313      	orrs	r3, r2
 8003008:	d038      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800300a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	2b30      	cmp	r3, #48	@ 0x30
 8003012:	d014      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003014:	2b30      	cmp	r3, #48	@ 0x30
 8003016:	d80e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003018:	2b20      	cmp	r3, #32
 800301a:	d012      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800301c:	2b20      	cmp	r3, #32
 800301e:	d80a      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003024:	2b10      	cmp	r3, #16
 8003026:	d106      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003028:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	4a06      	ldr	r2, [pc, #24]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003032:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003034:	e00d      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800303c:	e009      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800303e:	bf00      	nop
 8003040:	e007      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003042:	bf00      	nop
 8003044:	e005      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003046:	bf00      	nop
 8003048:	44020c00 	.word	0x44020c00
 800304c:	44020800 	.word	0x44020800
        break;
 8003050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003052:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800305a:	4bb5      	ldr	r3, [pc, #724]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800305c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003060:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003064:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306a:	49b1      	ldr	r1, [pc, #708]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003072:	e003      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003078:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800307c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
 800308e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003092:	460b      	mov	r3, r1
 8003094:	4313      	orrs	r3, r2
 8003096:	d03c      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003098:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800309c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d81d      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80030a2:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030bd 	.word	0x080030bd
 80030ac:	080030cb 	.word	0x080030cb
 80030b0:	080030df 	.word	0x080030df
 80030b4:	080030e7 	.word	0x080030e7
 80030b8:	080030e7 	.word	0x080030e7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030bc:	4b9c      	ldr	r3, [pc, #624]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	4a9b      	ldr	r2, [pc, #620]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80030c8:	e00e      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030ce:	3308      	adds	r3, #8
 80030d0:	4618      	mov	r0, r3
 80030d2:	f001 fb61 	bl	8004798 <RCCEx_PLL2_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80030dc:	e004      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80030e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80030f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003100:	498b      	ldr	r1, [pc, #556]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003108:	e003      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800310e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003112:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d03c      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800312e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	2b20      	cmp	r3, #32
 8003136:	d01f      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d819      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800313c:	2b18      	cmp	r3, #24
 800313e:	d01d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003140:	2b18      	cmp	r3, #24
 8003142:	d815      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003148:	2b08      	cmp	r3, #8
 800314a:	d007      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800314c:	e010      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314e:	4b78      	ldr	r3, [pc, #480]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	4a77      	ldr	r2, [pc, #476]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003158:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800315a:	e010      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800315c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003160:	3308      	adds	r3, #8
 8003162:	4618      	mov	r0, r3
 8003164:	f001 fb18 	bl	8004798 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800316e:	e006      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003176:	e002      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003178:	bf00      	nop
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800317c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003186:	4b6a      	ldr	r3, [pc, #424]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003190:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	4966      	ldr	r1, [pc, #408]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80031a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	d03e      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80031c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ce:	d020      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d4:	d819      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xade>
 80031d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031d8:	d01d      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80031da:	2bc0      	cmp	r3, #192	@ 0xc0
 80031dc:	d815      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xade>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80031e2:	2b40      	cmp	r3, #64	@ 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80031e6:	e010      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b51      	ldr	r3, [pc, #324]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	4a50      	ldr	r2, [pc, #320]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80031f4:	e010      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031fa:	3308      	adds	r3, #8
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 facb 	bl	8004798 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003218:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10c      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003220:	4b43      	ldr	r3, [pc, #268]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003226:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800322a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800322e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003230:	493f      	ldr	r1, [pc, #252]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800323e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	2100      	movs	r1, #0
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d038      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800325e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003268:	d00e      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800326a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800326e:	d815      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d017      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003278:	d110      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327a:	4b2d      	ldr	r3, [pc, #180]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	4a2c      	ldr	r2, [pc, #176]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003284:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003286:	e00e      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003288:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800328c:	3308      	adds	r3, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fa82 	bl	8004798 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80032b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	491c      	ldr	r1, [pc, #112]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80032c6:	e003      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	2100      	movs	r1, #0
 80032da:	6039      	str	r1, [r7, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d039      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80032ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032f2:	2b30      	cmp	r3, #48	@ 0x30
 80032f4:	d01e      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80032f6:	2b30      	cmp	r3, #48	@ 0x30
 80032f8:	d815      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d002      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d007      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003302:	e010      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003304:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800330a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003310:	e011      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003312:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003316:	3308      	adds	r3, #8
 8003318:	4618      	mov	r0, r3
 800331a:	f001 fa3d 	bl	8004798 <RCCEx_PLL2_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003324:	e007      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800332e:	bf00      	nop
 8003330:	44020c00 	.word	0x44020c00
        break;
 8003334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003336:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003344:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800334e:	4908      	ldr	r1, [pc, #32]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800335c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003360:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003364:	4618      	mov	r0, r3
 8003366:	37a8      	adds	r7, #168	@ 0xa8
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	44020c00 	.word	0x44020c00

08003374 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	@ 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800337c:	4bad      	ldr	r3, [pc, #692]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800337e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003386:	4bab      	ldr	r3, [pc, #684]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003390:	4ba8      	ldr	r3, [pc, #672]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800339a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800339c:	4ba5      	ldr	r3, [pc, #660]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80033a6:	4ba3      	ldr	r3, [pc, #652]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033aa:	08db      	lsrs	r3, r3, #3
 80033ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8126 	beq.w	8003616 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d053      	beq.n	8003478 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d86f      	bhi.n	80034b6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d003      	beq.n	80033e4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d02b      	beq.n	800343a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80033e2:	e068      	b.n	80034b6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80033e4:	4b93      	ldr	r3, [pc, #588]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	08db      	lsrs	r3, r3, #3
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	4a92      	ldr	r2, [pc, #584]	@ (8003638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003418:	ed97 6a04 	vldr	s12, [r7, #16]
 800341c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800363c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003434:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003438:	e068      	b.n	800350c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003444:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003640 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003456:	ed97 6a04 	vldr	s12, [r7, #16]
 800345a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800363c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003476:	e049      	b.n	800350c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003644 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003494:	ed97 6a04 	vldr	s12, [r7, #16]
 8003498:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800363c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800349c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80034b4:	e02a      	b.n	800350c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80034ee:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800363c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800350a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800350c:	4b49      	ldr	r3, [pc, #292]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003518:	d121      	bne.n	800355e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800351a:	4b46      	ldr	r3, [pc, #280]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003526:	4b43      	ldr	r3, [pc, #268]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	0a5b      	lsrs	r3, r3, #9
 800352c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800353c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003540:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003564:	4b33      	ldr	r3, [pc, #204]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003570:	d121      	bne.n	80035b6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003572:	4b30      	ldr	r3, [pc, #192]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d017      	beq.n	80035ae <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800357e:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003594:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003598:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800359c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	e002      	b.n	80035bc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80035bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035c8:	d121      	bne.n	800360e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80035ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d017      	beq.n	8003606 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80035d6:	4b17      	ldr	r3, [pc, #92]	@ (8003634 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	0e1b      	lsrs	r3, r3, #24
 80035dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80035e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80035f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003604:	e010      	b.n	8003628 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	e00c      	b.n	8003628 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	372c      	adds	r7, #44	@ 0x2c
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	44020c00 	.word	0x44020c00
 8003638:	03d09000 	.word	0x03d09000
 800363c:	46000000 	.word	0x46000000
 8003640:	4a742400 	.word	0x4a742400
 8003644:	4bb71b00 	.word	0x4bb71b00

08003648 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	@ 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003650:	4bad      	ldr	r3, [pc, #692]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800365a:	4bab      	ldr	r3, [pc, #684]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003664:	4ba8      	ldr	r3, [pc, #672]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800366e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003670:	4ba5      	ldr	r3, [pc, #660]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800367a:	4ba3      	ldr	r3, [pc, #652]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8126 	beq.w	80038ea <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d053      	beq.n	800374c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d86f      	bhi.n	800378a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d02b      	beq.n	800370e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80036b6:	e068      	b.n	800378a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036b8:	4b93      	ldr	r3, [pc, #588]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	08db      	lsrs	r3, r3, #3
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	4a92      	ldr	r2, [pc, #584]	@ (800390c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80036f0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80036f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003708:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800370c:	e068      	b.n	80037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003718:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003914 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800371c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a04 	vldr	s12, [r7, #16]
 800372e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800374a:	e049      	b.n	80037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003768:	ed97 6a04 	vldr	s12, [r7, #16]
 800376c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800377c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003784:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003788:	e02a      	b.n	80037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800378a:	4b5f      	ldr	r3, [pc, #380]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	4a5d      	ldr	r2, [pc, #372]	@ (800390c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a04 	vldr	s12, [r7, #16]
 80037c2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80037de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80037e0:	4b49      	ldr	r3, [pc, #292]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ec:	d121      	bne.n	8003832 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80037ee:	4b46      	ldr	r3, [pc, #280]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d017      	beq.n	800382a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037fa:	4b43      	ldr	r3, [pc, #268]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	0a5b      	lsrs	r3, r3, #9
 8003800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800380c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003810:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003814:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003820:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003838:	4b33      	ldr	r3, [pc, #204]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003844:	d121      	bne.n	800388a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003846:	4b30      	ldr	r3, [pc, #192]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d017      	beq.n	8003882 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003852:	4b2d      	ldr	r3, [pc, #180]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003868:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800386c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003890:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800389c:	d121      	bne.n	80038e2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	0e1b      	lsrs	r3, r3, #24
 80038b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80038bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80038c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038d8:	e010      	b.n	80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	e00c      	b.n	80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	e008      	b.n	80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	372c      	adds	r7, #44	@ 0x2c
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	44020c00 	.word	0x44020c00
 800390c:	03d09000 	.word	0x03d09000
 8003910:	46000000 	.word	0x46000000
 8003914:	4a742400 	.word	0x4a742400
 8003918:	4bb71b00 	.word	0x4bb71b00

0800391c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	@ 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800392a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800392e:	430b      	orrs	r3, r1
 8003930:	d14b      	bne.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003932:	4bc4      	ldr	r3, [pc, #784]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800393e:	4bc1      	ldr	r3, [pc, #772]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	d108      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003952:	d104      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395a:	f000 bf14 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800395e:	4bb9      	ldr	r3, [pc, #740]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800396c:	d108      	bne.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003974:	d104      	bne.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8003976:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800397a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397c:	f000 bf03 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003980:	4bb0      	ldr	r3, [pc, #704]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800398c:	d119      	bne.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003994:	d115      	bne.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003996:	4bab      	ldr	r3, [pc, #684]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800399e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a2:	d30a      	bcc.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80039a4:	4ba7      	ldr	r3, [pc, #668]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ae:	4aa6      	ldr	r2, [pc, #664]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80039b6:	f000 bee6 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80039be:	f000 bee2 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039c6:	f000 bede 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80039ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ce:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80039d2:	ea52 0301 	orrs.w	r3, r2, r1
 80039d6:	f000 838e 	beq.w	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80039da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039de:	2a01      	cmp	r2, #1
 80039e0:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80039e4:	f080 86cc 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80039e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ec:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80039f0:	ea52 0301 	orrs.w	r3, r2, r1
 80039f4:	f000 82aa 	beq.w	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80039f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039fc:	2a01      	cmp	r2, #1
 80039fe:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8003a02:	f080 86bd 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a0a:	f1a3 0110 	sub.w	r1, r3, #16
 8003a0e:	ea52 0301 	orrs.w	r3, r2, r1
 8003a12:	f000 8681 	beq.w	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8003a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a1a:	2a01      	cmp	r2, #1
 8003a1c:	f173 0310 	sbcs.w	r3, r3, #16
 8003a20:	f080 86ae 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a28:	1f19      	subs	r1, r3, #4
 8003a2a:	ea52 0301 	orrs.w	r3, r2, r1
 8003a2e:	f000 84b1 	beq.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8003a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a36:	2a01      	cmp	r2, #1
 8003a38:	f173 0304 	sbcs.w	r3, r3, #4
 8003a3c:	f080 86a0 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a44:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	f000 85aa 	beq.w	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8003a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a52:	497e      	ldr	r1, [pc, #504]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003a54:	428a      	cmp	r2, r1
 8003a56:	f173 0300 	sbcs.w	r3, r3, #0
 8003a5a:	f080 8691 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a62:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8003a66:	430b      	orrs	r3, r1
 8003a68:	f000 8532 	beq.w	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8003a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a70:	4977      	ldr	r1, [pc, #476]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003a72:	428a      	cmp	r2, r1
 8003a74:	f173 0300 	sbcs.w	r3, r3, #0
 8003a78:	f080 8682 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a80:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8003a84:	430b      	orrs	r3, r1
 8003a86:	f000 84bc 	beq.w	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8003a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8e:	4971      	ldr	r1, [pc, #452]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8003a90:	428a      	cmp	r2, r1
 8003a92:	f173 0300 	sbcs.w	r3, r3, #0
 8003a96:	f080 8673 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	f000 85f2 	beq.w	800468c <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8003aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aac:	496a      	ldr	r1, [pc, #424]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8003aae:	428a      	cmp	r2, r1
 8003ab0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ab4:	f080 8664 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003abc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	f000 81e5 	beq.w	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aca:	4964      	ldr	r1, [pc, #400]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003acc:	428a      	cmp	r2, r1
 8003ace:	f173 0300 	sbcs.w	r3, r3, #0
 8003ad2:	f080 8655 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ada:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	f000 83cc 	beq.w	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae8:	495d      	ldr	r1, [pc, #372]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003aea:	428a      	cmp	r2, r1
 8003aec:	f173 0300 	sbcs.w	r3, r3, #0
 8003af0:	f080 8646 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af8:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8003afc:	430b      	orrs	r3, r1
 8003afe:	f000 8331 	beq.w	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8003b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b06:	4957      	ldr	r1, [pc, #348]	@ (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	f173 0300 	sbcs.w	r3, r3, #0
 8003b0e:	f080 8637 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b16:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	f000 82bb 	beq.w	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8003b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b24:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8003b28:	f173 0300 	sbcs.w	r3, r3, #0
 8003b2c:	f080 8628 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b34:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	f000 826d 	beq.w	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8003b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b42:	f244 0101 	movw	r1, #16385	@ 0x4001
 8003b46:	428a      	cmp	r2, r1
 8003b48:	f173 0300 	sbcs.w	r3, r3, #0
 8003b4c:	f080 8618 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b54:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	f000 821e 	beq.w	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b62:	f242 0101 	movw	r1, #8193	@ 0x2001
 8003b66:	428a      	cmp	r2, r1
 8003b68:	f173 0300 	sbcs.w	r3, r3, #0
 8003b6c:	f080 8608 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b74:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	f000 8137 	beq.w	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b82:	f241 0101 	movw	r1, #4097	@ 0x1001
 8003b86:	428a      	cmp	r2, r1
 8003b88:	f173 0300 	sbcs.w	r3, r3, #0
 8003b8c:	f080 85f8 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b94:	1f11      	subs	r1, r2, #4
 8003b96:	430b      	orrs	r3, r1
 8003b98:	f000 80d2 	beq.w	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba0:	2a05      	cmp	r2, #5
 8003ba2:	f173 0300 	sbcs.w	r3, r3, #0
 8003ba6:	f080 85eb 	bcs.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bae:	1e51      	subs	r1, r2, #1
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	d006      	beq.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb8:	1e91      	subs	r1, r2, #2
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	d06c      	beq.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003bbe:	f000 bddf 	b.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003bc2:	4b20      	ldr	r3, [pc, #128]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003bc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d104      	bne.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7fe fd7e 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003bd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003bda:	f000 bdd4 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003bde:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bea:	d10a      	bne.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fd26 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c00:	e048      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d109      	bne.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c26:	e035      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c34:	d11c      	bne.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d119      	bne.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c40:	e028      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003c42:	bf00      	nop
 8003c44:	44020c00 	.word	0x44020c00
 8003c48:	016e3600 	.word	0x016e3600
 8003c4c:	20000001 	.word	0x20000001
 8003c50:	10000001 	.word	0x10000001
 8003c54:	08000001 	.word	0x08000001
 8003c58:	04000001 	.word	0x04000001
 8003c5c:	00200001 	.word	0x00200001
 8003c60:	00040001 	.word	0x00040001
 8003c64:	00020001 	.word	0x00020001
 8003c68:	03d09000 	.word	0x03d09000
 8003c6c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003c70:	4b9f      	ldr	r3, [pc, #636]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d103      	bne.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8003c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8a:	e003      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c90:	f000 bd79 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003c94:	f000 bd77 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003c98:	4b95      	ldr	r3, [pc, #596]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003caa:	f7fe fcfd 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003cae:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003cb0:	f000 bd69 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fcbb 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd6:	e031      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003cd8:	4b85      	ldr	r3, [pc, #532]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	2b18      	cmp	r3, #24
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cea:	4b81      	ldr	r3, [pc, #516]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cfc:	e01e      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d102      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8003d12:	4b79      	ldr	r3, [pc, #484]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d16:	e011      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003d18:	4b75      	ldr	r3, [pc, #468]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d106      	bne.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	2b28      	cmp	r3, #40	@ 0x28
 8003d2a:	d103      	bne.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8003d2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d38:	f000 bd25 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d3c:	f000 bd23 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003d40:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d46:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d52:	f7fe fca9 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003d56:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d58:	f000 bd15 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003d5c:	4b64      	ldr	r3, [pc, #400]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d68:	d10a      	bne.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	2b40      	cmp	r3, #64	@ 0x40
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d70:	f107 030c 	add.w	r3, r7, #12
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fc67 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7e:	e033      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003d80:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d92:	4b57      	ldr	r3, [pc, #348]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	4a55      	ldr	r2, [pc, #340]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da4:	e020      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003da6:	4b52      	ldr	r3, [pc, #328]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dc0:	e012      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d107      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003dd6:	d103      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de4:	f000 bccf 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003de8:	f000 bccd 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003dec:	4b40      	ldr	r3, [pc, #256]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003df2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003dfe:	f7fe fc7f 	bl	8002700 <HAL_RCC_GetPCLK3Freq>
 8003e02:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e04:	f000 bcbf 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e0e:	d108      	bne.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fc17 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e1e:	f000 bcb2 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003e22:	4b33      	ldr	r3, [pc, #204]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d10d      	bne.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e34:	d109      	bne.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	08db      	lsrs	r3, r3, #3
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e48:	e020      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003e4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e56:	d106      	bne.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003e60:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e64:	e012      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003e66:	4b22      	ldr	r3, [pc, #136]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d107      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003e7a:	d103      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e82:	e003      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e88:	f000 bc7d 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e8c:	f000 bc7b 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003e90:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003ea2:	f7fe fbe5 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8003ea6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003ea8:	f000 bc6d 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d104      	bne.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fab1 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8003eb6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8003eb8:	f000 bc65 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d108      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fbbe 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ed0:	f000 bc59 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003ed4:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ee0:	d10e      	bne.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eec:	e02c      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003eee:	bf00      	nop
 8003ef0:	44020c00 	.word	0x44020c00
 8003ef4:	03d09000 	.word	0x03d09000
 8003ef8:	003d0900 	.word	0x003d0900
 8003efc:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003f00:	4b95      	ldr	r3, [pc, #596]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d109      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f12:	4b91      	ldr	r3, [pc, #580]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	4a8f      	ldr	r2, [pc, #572]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f24:	e010      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003f26:	4b8c      	ldr	r3, [pc, #560]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d102      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8003f3a:	4b89      	ldr	r3, [pc, #548]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f3e:	e003      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f44:	f000 bc1f 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003f48:	f000 bc1d 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003f4c:	4b82      	ldr	r3, [pc, #520]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003f58:	4b7f      	ldr	r3, [pc, #508]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d106      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d103      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003f6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f72:	e011      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003f74:	4b78      	ldr	r3, [pc, #480]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f82:	d106      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d103      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003f8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8003f96:	e3f6      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003f98:	e3f5      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe fb7c 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fb2:	e3e8      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fba:	d107      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fb41 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fca:	e3dc      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003fcc:	4b62      	ldr	r3, [pc, #392]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fde:	d109      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	08db      	lsrs	r3, r3, #3
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	4a5c      	ldr	r2, [pc, #368]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff2:	e010      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003ff4:	4b58      	ldr	r3, [pc, #352]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004008:	d102      	bne.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800400a:	4b55      	ldr	r3, [pc, #340]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400e:	e002      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004014:	e3b7      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004016:	e3b6      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004018:	4b4f      	ldr	r3, [pc, #316]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800401a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800401e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800402a:	f7fe fb3d 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 800402e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004030:	e3a9      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004038:	d107      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fb02 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004048:	e39d      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800404a:	4b43      	ldr	r3, [pc, #268]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d10d      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800405c:	d109      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800405e:	4b3e      	ldr	r3, [pc, #248]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	4a3c      	ldr	r2, [pc, #240]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800406a:	fa22 f303 	lsr.w	r3, r2, r3
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004070:	e010      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004072:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800407e:	d106      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004086:	d102      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004088:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004092:	e378      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004094:	e377      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004096:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004098:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800409c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80040a8:	f7fe fafe 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80040ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80040ae:	e36a      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040b6:	d107      	bne.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fac3 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80040c6:	e35e      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80040c8:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d10d      	bne.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040da:	d109      	bne.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	08db      	lsrs	r3, r3, #3
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80040ee:	e34a      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80040f4:	e347      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80040f6:	4b18      	ldr	r3, [pc, #96]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040fc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004108:	f7fe fafa 	bl	8002700 <HAL_RCC_GetPCLK3Freq>
 800410c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800410e:	e33a      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004116:	d107      	bne.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fa93 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004126:	e32e      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d10d      	bne.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413a:	d109      	bne.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	08db      	lsrs	r3, r3, #3
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	4a05      	ldr	r2, [pc, #20]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800414e:	e31a      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004154:	e317      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004156:	bf00      	nop
 8004158:	44020c00 	.word	0x44020c00
 800415c:	03d09000 	.word	0x03d09000
 8004160:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004164:	4b9b      	ldr	r3, [pc, #620]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004166:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800416a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800416e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004176:	d044      	beq.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800417e:	d879      	bhi.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004186:	d02d      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418e:	d871      	bhi.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004196:	d017      	beq.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800419e:	d869      	bhi.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ac:	d004      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80041ae:	e061      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80041b0:	f7fe faa6 	bl	8002700 <HAL_RCC_GetPCLK3Freq>
 80041b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80041b6:	e060      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041b8:	f107 030c 	add.w	r3, r7, #12
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fa43 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80041c6:	e058      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041c8:	4b82      	ldr	r3, [pc, #520]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d103      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80041d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80041dc:	e04d      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80041e2:	e04a      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80041e4:	4b7b      	ldr	r3, [pc, #492]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80041e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041f2:	d103      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80041f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80041fa:	e03e      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004200:	e03b      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004202:	4b74      	ldr	r3, [pc, #464]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004208:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800420e:	4b71      	ldr	r3, [pc, #452]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004220:	4b6c      	ldr	r3, [pc, #432]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	08db      	lsrs	r3, r3, #3
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	4a6b      	ldr	r2, [pc, #428]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
 8004230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004232:	e01e      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004234:	4b67      	ldr	r3, [pc, #412]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800423c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004240:	d106      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004248:	d102      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800424a:	4b64      	ldr	r3, [pc, #400]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424e:	e010      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004250:	4b60      	ldr	r3, [pc, #384]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800425c:	d106      	bne.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004264:	d102      	bne.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004266:	4b5e      	ldr	r3, [pc, #376]	@ (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426a:	e002      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004270:	e003      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004272:	e002      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004278:	bf00      	nop
          }
        }
        break;
 800427a:	e284      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800427c:	4b55      	ldr	r3, [pc, #340]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800427e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004282:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800428e:	d044      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004296:	d879      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800429e:	d02d      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80042a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042a6:	d871      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042ae:	d017      	beq.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042b6:	d869      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	d004      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80042c6:	e061      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe f9ee 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80042cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80042ce:	e060      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f9b7 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80042de:	e058      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042e0:	4b3c      	ldr	r3, [pc, #240]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d103      	bne.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80042f4:	e04d      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80042fa:	e04a      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80042fc:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80042fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800430a:	d103      	bne.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 800430c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004312:	e03e      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004318:	e03b      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800431a:	4b2e      	ldr	r3, [pc, #184]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800431c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004320:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004326:	4b2b      	ldr	r3, [pc, #172]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004338:	4b26      	ldr	r3, [pc, #152]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	4a25      	ldr	r2, [pc, #148]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434a:	e01e      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800434c:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004358:	d106      	bne.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004360:	d102      	bne.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004366:	e010      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004368:	4b1a      	ldr	r3, [pc, #104]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004374:	d106      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800437c:	d102      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800437e:	4b18      	ldr	r3, [pc, #96]	@ (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004382:	e002      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800438a:	e002      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004390:	bf00      	nop
          }
        }
        break;
 8004392:	e1f8      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004394:	4b0f      	ldr	r3, [pc, #60]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800439a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800439e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ac:	d105      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80043b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80043b8:	e1e5      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c0:	d110      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043c2:	f107 0318 	add.w	r3, r7, #24
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe ffd4 	bl	8003374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043d0:	e1d9      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80043d2:	bf00      	nop
 80043d4:	44020c00 	.word	0x44020c00
 80043d8:	03d09000 	.word	0x03d09000
 80043dc:	003d0900 	.word	0x003d0900
 80043e0:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ea:	d107      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff f929 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043fa:	e1c4      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004400:	e1c1      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004402:	4b9d      	ldr	r3, [pc, #628]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	2b04      	cmp	r3, #4
 8004412:	d859      	bhi.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004414:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004431 	.word	0x08004431
 8004420:	08004441 	.word	0x08004441
 8004424:	080044c9 	.word	0x080044c9
 8004428:	08004451 	.word	0x08004451
 800442c:	08004457 	.word	0x08004457
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004430:	f107 0318 	add.w	r3, r7, #24
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe ff9d 	bl	8003374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800443e:	e046      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f8ff 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800444e:	e03e      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004450:	4b8a      	ldr	r3, [pc, #552]	@ (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004454:	e03b      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004456:	4b88      	ldr	r3, [pc, #544]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800445c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004462:	4b85      	ldr	r3, [pc, #532]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004474:	4b80      	ldr	r3, [pc, #512]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	08db      	lsrs	r3, r3, #3
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	4a80      	ldr	r2, [pc, #512]	@ (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004486:	e01e      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004488:	4b7b      	ldr	r3, [pc, #492]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004494:	d106      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449c:	d102      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800449e:	4b79      	ldr	r3, [pc, #484]	@ (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044a2:	e010      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80044a4:	4b74      	ldr	r3, [pc, #464]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b0:	d106      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044b8:	d102      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80044ba:	4b73      	ldr	r3, [pc, #460]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80044bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044be:	e002      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80044cc:	bf00      	nop
          }
        }
        break;
 80044ce:	e15a      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80044d0:	4b69      	ldr	r3, [pc, #420]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80044d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d022      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d858      	bhi.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	2b18      	cmp	r3, #24
 80044ec:	d019      	beq.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	2b18      	cmp	r3, #24
 80044f2:	d852      	bhi.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d008      	beq.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004500:	e04b      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004502:	f107 0318 	add.w	r3, r7, #24
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe ff34 	bl	8003374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004510:	e046      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004512:	f107 030c 	add.w	r3, r7, #12
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f896 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004520:	e03e      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004522:	4b56      	ldr	r3, [pc, #344]	@ (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004526:	e03b      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004528:	4b53      	ldr	r3, [pc, #332]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800452a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800452e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004534:	4b50      	ldr	r3, [pc, #320]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b02      	cmp	r3, #2
 800453e:	d10c      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004546:	4b4c      	ldr	r3, [pc, #304]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	08db      	lsrs	r3, r3, #3
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	4a4b      	ldr	r2, [pc, #300]	@ (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004558:	e01e      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800455a:	4b47      	ldr	r3, [pc, #284]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004566:	d106      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456e:	d102      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004570:	4b44      	ldr	r3, [pc, #272]	@ (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004574:	e010      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004576:	4b40      	ldr	r3, [pc, #256]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004582:	d106      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800458a:	d102      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800458c:	4b3e      	ldr	r3, [pc, #248]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800458e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800459e:	bf00      	nop
          }
        }
        break;
 80045a0:	e0f1      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80045a2:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80045a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80045ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b4:	d023      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045bc:	d858      	bhi.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c2:	d019      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c8:	d852      	bhi.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2b40      	cmp	r3, #64	@ 0x40
 80045d4:	d008      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80045d6:	e04b      	b.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045d8:	f107 0318 	add.w	r3, r7, #24
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fec9 	bl	8003374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80045e6:	e046      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff f82b 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80045f6:	e03e      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80045f8:	4b20      	ldr	r3, [pc, #128]	@ (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80045fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80045fc:	e03b      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80045fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004604:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800460a:	4b1b      	ldr	r3, [pc, #108]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d10c      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800461c:	4b16      	ldr	r3, [pc, #88]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462e:	e01e      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004630:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463c:	d106      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d102      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004646:	4b0f      	ldr	r3, [pc, #60]	@ (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800464a:	e010      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004658:	d106      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004660:	d102      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004662:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004666:	e002      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800466e:	e002      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004674:	bf00      	nop
          }
        }
        break;
 8004676:	e086      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004678:	44020c00 	.word	0x44020c00
 800467c:	00bb8000 	.word	0x00bb8000
 8004680:	03d09000 	.word	0x03d09000
 8004684:	003d0900 	.word	0x003d0900
 8004688:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800468c:	4b40      	ldr	r3, [pc, #256]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800468e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004692:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004698:	4b3d      	ldr	r3, [pc, #244]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a4:	d105      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80046ac:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b0:	e031      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80046b2:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046be:	d10a      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80046c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d107      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046c6:	f107 0318 	add.w	r3, r7, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fe52 	bl	8003374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d4:	e01f      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80046d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d103      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 80046ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f0:	e011      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80046f2:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80046f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004700:	d106      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	2b30      	cmp	r3, #48	@ 0x30
 8004706:	d103      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004708:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470e:	e002      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004714:	e037      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004716:	e036      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800471a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800471e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004722:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	2b10      	cmp	r3, #16
 8004728:	d107      	bne.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800472a:	f107 0318 	add.w	r3, r7, #24
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fe20 	bl	8003374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8004738:	e025      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800473a:	4b15      	ldr	r3, [pc, #84]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004746:	d10a      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	2b20      	cmp	r3, #32
 800474c:	d107      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe ff78 	bl	8003648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800475c:	e00f      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476a:	d105      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	2b30      	cmp	r3, #48	@ 0x30
 8004770:	d102      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004772:	4b08      	ldr	r3, [pc, #32]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004776:	e002      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800477e:	e002      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004784:	bf00      	nop
    }
  }

  return (frequency);
 8004786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004788:	4618      	mov	r0, r3
 800478a:	3730      	adds	r7, #48	@ 0x30
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	44020c00 	.word	0x44020c00
 8004794:	02dc6c00 	.word	0x02dc6c00

08004798 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80047a0:	4b48      	ldr	r3, [pc, #288]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a47      	ldr	r2, [pc, #284]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 80047a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047ac:	f7fc fcdc 	bl	8001168 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b2:	e008      	b.n	80047c6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047b4:	f7fc fcd8 	bl	8001168 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e07a      	b.n	80048bc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047c6:	4b3f      	ldr	r3, [pc, #252]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80047d2:	4b3c      	ldr	r3, [pc, #240]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6811      	ldr	r1, [r2, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6852      	ldr	r2, [r2, #4]
 80047e6:	0212      	lsls	r2, r2, #8
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4936      	ldr	r1, [pc, #216]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	3b01      	subs	r3, #1
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	b29b      	uxth	r3, r3
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	3b01      	subs	r3, #1
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	3b01      	subs	r3, #1
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004820:	4928      	ldr	r1, [pc, #160]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004822:	4313      	orrs	r3, r2
 8004824:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004826:	4b27      	ldr	r3, [pc, #156]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	f023 020c 	bic.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	4924      	ldr	r1, [pc, #144]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004834:	4313      	orrs	r3, r2
 8004836:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004838:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	f023 0220 	bic.w	r2, r3, #32
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	491f      	ldr	r1, [pc, #124]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800484a:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800484c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	491c      	ldr	r1, [pc, #112]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004858:	4b1a      	ldr	r3, [pc, #104]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800485e:	f023 0310 	bic.w	r3, r3, #16
 8004862:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004864:	4b17      	ldr	r3, [pc, #92]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800486c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6a12      	ldr	r2, [r2, #32]
 8004874:	00d2      	lsls	r2, r2, #3
 8004876:	4913      	ldr	r1, [pc, #76]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	4a10      	ldr	r2, [pc, #64]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 8004882:	f043 0310 	orr.w	r3, r3, #16
 8004886:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004888:	4b0e      	ldr	r3, [pc, #56]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 800488e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004892:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004894:	f7fc fc68 	bl	8001168 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800489a:	e008      	b.n	80048ae <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800489c:	f7fc fc64 	bl	8001168 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e006      	b.n	80048bc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048ae:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <RCCEx_PLL2_Config+0x12c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0

}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	44020c00 	.word	0x44020c00

080048c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e049      	b.n	800496e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fa0c 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f000 f9a8 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d001      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e03b      	b.n	8004a08 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <HAL_TIM_Base_Start_IT+0x9c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_TIM_Base_Start_IT+0x4e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ba:	d004      	beq.n	80049c6 <HAL_TIM_Base_Start_IT+0x4e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <HAL_TIM_Base_Start_IT+0xa0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d115      	bne.n	80049f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <HAL_TIM_Base_Start_IT+0xa4>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d015      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x8c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049de:	d011      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f0:	e008      	b.n	8004a04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e000      	b.n	8004a06 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	00010007 	.word	0x00010007

08004a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_ConfigClockSource+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0fe      	b.n	8004c3a <HAL_TIM_ConfigClockSource+0x21a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004a5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a78:	f000 80c9 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004a7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a80:	f200 80ce 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004a84:	4a6f      	ldr	r2, [pc, #444]	@ (8004c44 <HAL_TIM_ConfigClockSource+0x224>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	f000 80c1 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004a8c:	4a6d      	ldr	r2, [pc, #436]	@ (8004c44 <HAL_TIM_ConfigClockSource+0x224>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	f200 80c6 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004a94:	4a6c      	ldr	r2, [pc, #432]	@ (8004c48 <HAL_TIM_ConfigClockSource+0x228>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	f000 80b9 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c48 <HAL_TIM_ConfigClockSource+0x228>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	f200 80be 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004aa4:	4a69      	ldr	r2, [pc, #420]	@ (8004c4c <HAL_TIM_ConfigClockSource+0x22c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	f000 80b1 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004aac:	4a67      	ldr	r2, [pc, #412]	@ (8004c4c <HAL_TIM_ConfigClockSource+0x22c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	f200 80b6 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004ab4:	4a66      	ldr	r2, [pc, #408]	@ (8004c50 <HAL_TIM_ConfigClockSource+0x230>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	f000 80a9 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004abc:	4a64      	ldr	r2, [pc, #400]	@ (8004c50 <HAL_TIM_ConfigClockSource+0x230>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	f200 80ae 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004ac4:	4a63      	ldr	r2, [pc, #396]	@ (8004c54 <HAL_TIM_ConfigClockSource+0x234>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f000 80a1 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004acc:	4a61      	ldr	r2, [pc, #388]	@ (8004c54 <HAL_TIM_ConfigClockSource+0x234>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	f200 80a6 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004ad4:	4a60      	ldr	r2, [pc, #384]	@ (8004c58 <HAL_TIM_ConfigClockSource+0x238>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	f000 8099 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004adc:	4a5e      	ldr	r2, [pc, #376]	@ (8004c58 <HAL_TIM_ConfigClockSource+0x238>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	f200 809e 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004ae4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ae8:	f000 8091 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004aec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004af0:	f200 8096 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af8:	f000 8089 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b00:	f200 808e 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b08:	d03e      	beq.n	8004b88 <HAL_TIM_ConfigClockSource+0x168>
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0e:	f200 8087 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b16:	f000 8086 	beq.w	8004c26 <HAL_TIM_ConfigClockSource+0x206>
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d87f      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b20:	2b70      	cmp	r3, #112	@ 0x70
 8004b22:	d01a      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0x13a>
 8004b24:	2b70      	cmp	r3, #112	@ 0x70
 8004b26:	d87b      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b28:	2b60      	cmp	r3, #96	@ 0x60
 8004b2a:	d050      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x1ae>
 8004b2c:	2b60      	cmp	r3, #96	@ 0x60
 8004b2e:	d877      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b30:	2b50      	cmp	r3, #80	@ 0x50
 8004b32:	d03c      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x18e>
 8004b34:	2b50      	cmp	r3, #80	@ 0x50
 8004b36:	d873      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d058      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x1ce>
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d86f      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b40:	2b30      	cmp	r3, #48	@ 0x30
 8004b42:	d064      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004b44:	2b30      	cmp	r3, #48	@ 0x30
 8004b46:	d86b      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d060      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d867      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05c      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d05a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x1ee>
 8004b58:	e062      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	f000 f94d 	bl	8004e08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	609a      	str	r2, [r3, #8]
      break;
 8004b86:	e04f      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	f000 f936 	bl	8004e08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004baa:	609a      	str	r2, [r3, #8]
      break;
 8004bac:	e03c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 f8a8 	bl	8004d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2150      	movs	r1, #80	@ 0x50
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f901 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e02c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 f8c7 	bl	8004d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2160      	movs	r1, #96	@ 0x60
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f8f1 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004bec:	e01c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f000 f888 	bl	8004d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2140      	movs	r1, #64	@ 0x40
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f8e1 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004c0c:	e00c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f000 f8d8 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004c1e:	e003      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e000      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8004c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	00100070 	.word	0x00100070
 8004c48:	00100060 	.word	0x00100060
 8004c4c:	00100050 	.word	0x00100050
 8004c50:	00100040 	.word	0x00100040
 8004c54:	00100030 	.word	0x00100030
 8004c58:	00100020 	.word	0x00100020

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	@ (8004d08 <TIM_Base_SetConfig+0xac>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_Base_SetConfig+0x28>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d003      	beq.n	8004c84 <TIM_Base_SetConfig+0x28>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a23      	ldr	r2, [pc, #140]	@ (8004d0c <TIM_Base_SetConfig+0xb0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d108      	bne.n	8004c96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <TIM_Base_SetConfig+0xac>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0x52>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0x52>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	@ (8004d0c <TIM_Base_SetConfig+0xb0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <TIM_Base_SetConfig+0xac>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d103      	bne.n	8004cf4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	615a      	str	r2, [r3, #20]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400

08004d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 030a 	bic.w	r3, r3, #10
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f023 0210 	bic.w	r2, r3, #16
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f043 0307 	orr.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e051      	b.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ecc:	d004      	beq.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a10      	ldr	r2, [pc, #64]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400

08004f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e042      	b.n	8004fb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fb ff05 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2224      	movs	r2, #36	@ 0x24
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9a6 	bl	80052b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f825 	bl	8004fb8 <UART_SetConfig>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e01b      	b.n	8004fb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fa25 	bl	80053f8 <UART_CheckIdleState>
 8004fae:	4603      	mov	r3, r0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fbc:	b094      	sub	sp, #80	@ 0x50
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	498a      	ldr	r1, [pc, #552]	@ (8005210 <UART_SetConfig+0x258>)
 8004fe8:	4019      	ands	r1, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005000:	68d9      	ldr	r1, [r3, #12]
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	ea40 0301 	orr.w	r3, r0, r1
 800500a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b7f      	ldr	r3, [pc, #508]	@ (8005214 <UART_SetConfig+0x25c>)
 8005018:	429a      	cmp	r2, r3
 800501a:	d004      	beq.n	8005026 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800501c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005022:	4313      	orrs	r3, r2
 8005024:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005030:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503a:	430b      	orrs	r3, r1
 800503c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800503e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	f023 000f 	bic.w	r0, r3, #15
 8005048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	ea40 0301 	orr.w	r3, r0, r1
 8005054:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b6f      	ldr	r3, [pc, #444]	@ (8005218 <UART_SetConfig+0x260>)
 800505c:	429a      	cmp	r2, r3
 800505e:	d102      	bne.n	8005066 <UART_SetConfig+0xae>
 8005060:	2301      	movs	r3, #1
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005064:	e01a      	b.n	800509c <UART_SetConfig+0xe4>
 8005066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b6c      	ldr	r3, [pc, #432]	@ (800521c <UART_SetConfig+0x264>)
 800506c:	429a      	cmp	r2, r3
 800506e:	d102      	bne.n	8005076 <UART_SetConfig+0xbe>
 8005070:	2302      	movs	r3, #2
 8005072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005074:	e012      	b.n	800509c <UART_SetConfig+0xe4>
 8005076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b69      	ldr	r3, [pc, #420]	@ (8005220 <UART_SetConfig+0x268>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d102      	bne.n	8005086 <UART_SetConfig+0xce>
 8005080:	2304      	movs	r3, #4
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005084:	e00a      	b.n	800509c <UART_SetConfig+0xe4>
 8005086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b62      	ldr	r3, [pc, #392]	@ (8005214 <UART_SetConfig+0x25c>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d103      	bne.n	8005098 <UART_SetConfig+0xe0>
 8005090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005096:	e001      	b.n	800509c <UART_SetConfig+0xe4>
 8005098:	2300      	movs	r3, #0
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005214 <UART_SetConfig+0x25c>)
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d171      	bne.n	800518a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80050a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a8:	2200      	movs	r2, #0
 80050aa:	623b      	str	r3, [r7, #32]
 80050ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80050ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050b2:	f7fe fc33 	bl	800391c <HAL_RCCEx_GetPeriphCLKFreq>
 80050b6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80050b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80e2 	beq.w	8005284 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	4a57      	ldr	r2, [pc, #348]	@ (8005224 <UART_SetConfig+0x26c>)
 80050c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d305      	bcc.n	80050f0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d903      	bls.n	80050f8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80050f6:	e0c5      	b.n	8005284 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fa:	2200      	movs	r2, #0
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	61fa      	str	r2, [r7, #28]
 8005100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	4a47      	ldr	r2, [pc, #284]	@ (8005224 <UART_SetConfig+0x26c>)
 8005106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510a:	b29b      	uxth	r3, r3
 800510c:	2200      	movs	r2, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	617a      	str	r2, [r7, #20]
 8005112:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005116:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800511a:	f7fb f8bd 	bl	8000298 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	020b      	lsls	r3, r1, #8
 8005130:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005134:	0202      	lsls	r2, r0, #8
 8005136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005138:	6849      	ldr	r1, [r1, #4]
 800513a:	0849      	lsrs	r1, r1, #1
 800513c:	2000      	movs	r0, #0
 800513e:	460c      	mov	r4, r1
 8005140:	4605      	mov	r5, r0
 8005142:	eb12 0804 	adds.w	r8, r2, r4
 8005146:	eb43 0905 	adc.w	r9, r3, r5
 800514a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	60fa      	str	r2, [r7, #12]
 8005154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005158:	4640      	mov	r0, r8
 800515a:	4649      	mov	r1, r9
 800515c:	f7fb f89c 	bl	8000298 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800516a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516e:	d308      	bcc.n	8005182 <UART_SetConfig+0x1ca>
 8005170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005176:	d204      	bcs.n	8005182 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	e080      	b.n	8005284 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005188:	e07c      	b.n	8005284 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005192:	d149      	bne.n	8005228 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005196:	2200      	movs	r2, #0
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051a0:	f7fe fbbc 	bl	800391c <HAL_RCCEx_GetPeriphCLKFreq>
 80051a4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d06b      	beq.n	8005284 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <UART_SetConfig+0x26c>)
 80051b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b6:	461a      	mov	r2, r3
 80051b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80051be:	005a      	lsls	r2, r3, #1
 80051c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	441a      	add	r2, r3
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d916      	bls.n	8005206 <UART_SetConfig+0x24e>
 80051d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051de:	d212      	bcs.n	8005206 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f023 030f 	bic.w	r3, r3, #15
 80051e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80051f8:	4313      	orrs	r3, r2
 80051fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	e03e      	b.n	8005284 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800520c:	e03a      	b.n	8005284 <UART_SetConfig+0x2cc>
 800520e:	bf00      	nop
 8005210:	cfff69f3 	.word	0xcfff69f3
 8005214:	44002400 	.word	0x44002400
 8005218:	40013800 	.word	0x40013800
 800521c:	40004400 	.word	0x40004400
 8005220:	40004800 	.word	0x40004800
 8005224:	08005a2c 	.word	0x08005a2c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800522a:	2200      	movs	r2, #0
 800522c:	469a      	mov	sl, r3
 800522e:	4693      	mov	fp, r2
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f7fe fb72 	bl	800391c <HAL_RCCEx_GetPeriphCLKFreq>
 8005238:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800523a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d021      	beq.n	8005284 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	4a1a      	ldr	r2, [pc, #104]	@ (80052b0 <UART_SetConfig+0x2f8>)
 8005246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800524a:	461a      	mov	r2, r3
 800524c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800524e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	441a      	add	r2, r3
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005266:	2b0f      	cmp	r3, #15
 8005268:	d909      	bls.n	800527e <UART_SetConfig+0x2c6>
 800526a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005270:	d205      	bcs.n	800527e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005274:	b29a      	uxth	r2, r3
 8005276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60da      	str	r2, [r3, #12]
 800527c:	e002      	b.n	8005284 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	2200      	movs	r2, #0
 8005298:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	2200      	movs	r2, #0
 800529e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3750      	adds	r7, #80	@ 0x50
 80052a8:	46bd      	mov	sp, r7
 80052aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ae:	bf00      	nop
 80052b0:	08005a2c 	.word	0x08005a2c

080052b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b2:	d10a      	bne.n	80053ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b098      	sub	sp, #96	@ 0x60
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005408:	f7fb feae 	bl	8001168 <HAL_GetTick>
 800540c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d12f      	bne.n	800547c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f88e 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d022      	beq.n	800547c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544a:	653b      	str	r3, [r7, #80]	@ 0x50
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005454:	647b      	str	r3, [r7, #68]	@ 0x44
 8005456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e063      	b.n	8005544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d149      	bne.n	800551e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005492:	2200      	movs	r2, #0
 8005494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f857 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d03c      	beq.n	800551e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	623b      	str	r3, [r7, #32]
   return(result);
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e6      	bne.n	80054a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f6:	61fa      	str	r2, [r7, #28]
 80054f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	617b      	str	r3, [r7, #20]
   return(result);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e012      	b.n	8005544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3758      	adds	r7, #88	@ 0x58
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e049      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d045      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fb fdff 	bl	8001168 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e048      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d031      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d110      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f838 	bl	800561a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2208      	movs	r2, #8
 80055ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e029      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055cc:	d111      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f81e 	bl	800561a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0a6      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800561a:	b480      	push	{r7}
 800561c:	b095      	sub	sp, #84	@ 0x54
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005640:	643b      	str	r3, [r7, #64]	@ 0x40
 8005642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	61fb      	str	r3, [r7, #28]
   return(result);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800567a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e3      	bne.n	8005654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d118      	bne.n	80056c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 0310 	bic.w	r3, r3, #16
 80056a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e6      	bne.n	8005694 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056da:	bf00      	nop
 80056dc:	3754      	adds	r7, #84	@ 0x54
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_UARTEx_DisableFifoMode+0x16>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e027      	b.n	800574c <HAL_UARTEx_DisableFifoMode+0x66>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	@ 0x24
 8005708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800572a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e02d      	b.n	80057cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	@ 0x24
 800577c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f84f 	bl	8005850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e02d      	b.n	8005848 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	@ 0x24
 80057f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f811 	bl	8005850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800585c:	2b00      	cmp	r3, #0
 800585e:	d108      	bne.n	8005872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005870:	e031      	b.n	80058d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005872:	2308      	movs	r3, #8
 8005874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005876:	2308      	movs	r3, #8
 8005878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	0e5b      	lsrs	r3, r3, #25
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	0f5b      	lsrs	r3, r3, #29
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	7b3a      	ldrb	r2, [r7, #12]
 800589e:	4911      	ldr	r1, [pc, #68]	@ (80058e4 <UARTEx_SetNbDataToProcess+0x94>)
 80058a0:	5c8a      	ldrb	r2, [r1, r2]
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058a6:	7b3a      	ldrb	r2, [r7, #12]
 80058a8:	490f      	ldr	r1, [pc, #60]	@ (80058e8 <UARTEx_SetNbDataToProcess+0x98>)
 80058aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	7b7a      	ldrb	r2, [r7, #13]
 80058bc:	4909      	ldr	r1, [pc, #36]	@ (80058e4 <UARTEx_SetNbDataToProcess+0x94>)
 80058be:	5c8a      	ldrb	r2, [r1, r2]
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058c4:	7b7a      	ldrb	r2, [r7, #13]
 80058c6:	4908      	ldr	r1, [pc, #32]	@ (80058e8 <UARTEx_SetNbDataToProcess+0x98>)
 80058c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	08005a44 	.word	0x08005a44
 80058e8:	08005a4c 	.word	0x08005a4c

080058ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058f4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80058f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
 8005934:	e00b      	b.n	800594e <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	641a      	str	r2, [r3, #64]	@ 0x40
 8005948:	e001      	b.n	800594e <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800595c:	b084      	sub	sp, #16
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	f107 001c 	add.w	r0, r7, #28
 800596a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	f023 0201 	bic.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005980:	2100      	movs	r1, #0
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ffc7 	bl	8005916 <USB_SetCurrentMode>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800599e:	b004      	add	sp, #16
 80059a0:	4770      	bx	lr

080059a2 <memset>:
 80059a2:	4402      	add	r2, r0
 80059a4:	4603      	mov	r3, r0
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d100      	bne.n	80059ac <memset+0xa>
 80059aa:	4770      	bx	lr
 80059ac:	f803 1b01 	strb.w	r1, [r3], #1
 80059b0:	e7f9      	b.n	80059a6 <memset+0x4>
	...

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4d0d      	ldr	r5, [pc, #52]	@ (80059ec <__libc_init_array+0x38>)
 80059b8:	2600      	movs	r6, #0
 80059ba:	4c0d      	ldr	r4, [pc, #52]	@ (80059f0 <__libc_init_array+0x3c>)
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	4d0b      	ldr	r5, [pc, #44]	@ (80059f4 <__libc_init_array+0x40>)
 80059c6:	2600      	movs	r6, #0
 80059c8:	4c0b      	ldr	r4, [pc, #44]	@ (80059f8 <__libc_init_array+0x44>)
 80059ca:	f000 f817 	bl	80059fc <_init>
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	3601      	adds	r6, #1
 80059de:	4798      	blx	r3
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	3601      	adds	r6, #1
 80059e8:	4798      	blx	r3
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08005a5c 	.word	0x08005a5c
 80059f0:	08005a5c 	.word	0x08005a5c
 80059f4:	08005a5c 	.word	0x08005a5c
 80059f8:	08005a60 	.word	0x08005a60

080059fc <_init>:
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	bf00      	nop
 8005a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a02:	bc08      	pop	{r3}
 8005a04:	469e      	mov	lr, r3
 8005a06:	4770      	bx	lr

08005a08 <_fini>:
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	bf00      	nop
 8005a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0e:	bc08      	pop	{r3}
 8005a10:	469e      	mov	lr, r3
 8005a12:	4770      	bx	lr
