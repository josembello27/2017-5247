
multimitro picha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e9c  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005134  08005134  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800513c  0800513c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  2000000c  08005150  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08005150  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ef5  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002315  00000000  00000000  00030f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00033290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000985  00000000  00000000  00033f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206ff  00000000  00000000  00034885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001098e  00000000  00000000  00054f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8f71  00000000  00000000  00065912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003390  00000000  00000000  0012e884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00131c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080050dc 	.word	0x080050dc

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080050dc 	.word	0x080050dc

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d146      	bne.n	8000366 <__udivmoddi4+0x9e>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d95e      	bls.n	800039c <__udivmoddi4+0xd4>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	409c      	lsls	r4, r3
 80002f0:	fa20 f202 	lsr.w	r2, r0, r2
 80002f4:	4317      	orrs	r7, r2
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	0c22      	lsrs	r2, r4, #16
 8000300:	fbb7 f1fe 	udiv	r1, r7, lr
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	fb01 f005 	mul.w	r0, r1, r5
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 8134 	bhi.w	800058c <__udivmoddi4+0x2c4>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	fbb2 f0fe 	udiv	r0, r2, lr
 800032e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	42a5      	cmp	r5, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x88>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x86>
 8000348:	42a5      	cmp	r5, r4
 800034a:	f200 8119 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 800034e:	4610      	mov	r0, r2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xb4>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80fc 	beq.w	8000568 <__udivmoddi4+0x2a0>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14c      	bne.n	800041e <__udivmoddi4+0x156>
 8000384:	42ab      	cmp	r3, r5
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2a6>
 800038a:	4282      	cmp	r2, r0
 800038c:	f240 80ef 	bls.w	800056e <__udivmoddi4+0x2a6>
 8000390:	4608      	mov	r0, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0x9a>
 8000396:	e9c6 4700 	strd	r4, r7, [r6]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0x9a>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xd8>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f382 	clz	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 809f 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ba:	fb0e 2015 	mls	r0, lr, r5, r2
 80003be:	0c22      	lsrs	r2, r4, #16
 80003c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c4:	fb07 f005 	mul.w	r0, r7, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90f      	bls.n	80003ec <__udivmoddi4+0x124>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d4:	bf2c      	ite	cs
 80003d6:	f04f 0901 	movcs.w	r9, #1
 80003da:	f04f 0900 	movcc.w	r9, #0
 80003de:	4290      	cmp	r0, r2
 80003e0:	d903      	bls.n	80003ea <__udivmoddi4+0x122>
 80003e2:	f1b9 0f00 	cmp.w	r9, #0
 80003e6:	f000 80ce 	beq.w	8000586 <__udivmoddi4+0x2be>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f8:	fb00 f707 	mul.w	r7, r0, r7
 80003fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000400:	42a7      	cmp	r7, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	42a7      	cmp	r7, r4
 8000410:	f200 80b3 	bhi.w	800057a <__udivmoddi4+0x2b2>
 8000414:	4610      	mov	r0, r2
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041c:	e79c      	b.n	8000358 <__udivmoddi4+0x90>
 800041e:	f1c1 0420 	rsb	r4, r1, #32
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 fc01 	lsl.w	ip, r5, r1
 8000428:	fa22 f704 	lsr.w	r7, r2, r4
 800042c:	40e5      	lsrs	r5, r4
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f304 	lsr.w	r3, r0, r4
 8000436:	4088      	lsls	r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb5 fef8 	udiv	lr, r5, r8
 800044c:	fb08 551e 	mls	r5, r8, lr, r5
 8000450:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a9      	cmp	r9, r5
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b2>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a9      	cmp	r9, r5
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 808d 	beq.w	8000592 <__udivmoddi4+0x2ca>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba5 0509 	sub.w	r5, r5, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb5 f3f8 	udiv	r3, r5, r8
 8000486:	fb08 5513 	mls	r5, r8, r3, r5
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000492:	45ac      	cmp	ip, r5
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1dc>
 8000496:	197d      	adds	r5, r7, r5
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1da>
 800049e:	45ac      	cmp	ip, r5
 80004a0:	d87e      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a8:	eba5 050c 	sub.w	r5, r5, ip
 80004ac:	fba3 9802 	umull	r9, r8, r3, r2
 80004b0:	4545      	cmp	r5, r8
 80004b2:	46ce      	mov	lr, r9
 80004b4:	46c4      	mov	ip, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1f6>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x200>
 80004ba:	4548      	cmp	r0, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x200>
 80004be:	3b01      	subs	r3, #1
 80004c0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d06f      	beq.n	80005ac <__udivmoddi4+0x2e4>
 80004cc:	ebb0 020e 	subs.w	r2, r0, lr
 80004d0:	eb65 050c 	sbc.w	r5, r5, ip
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	fa05 f404 	lsl.w	r4, r5, r4
 80004da:	40cd      	lsrs	r5, r1
 80004dc:	4618      	mov	r0, r3
 80004de:	4314      	orrs	r4, r2
 80004e0:	2100      	movs	r1, #0
 80004e2:	e9c6 4500 	strd	r4, r5, [r6]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	4099      	lsls	r1, r3
 80004f2:	409c      	lsls	r4, r3
 80004f4:	40d5      	lsrs	r5, r2
 80004f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fa:	fa20 f202 	lsr.w	r2, r0, r2
 80004fe:	fa1f f78c 	uxth.w	r7, ip
 8000502:	fbb5 f0fe 	udiv	r0, r5, lr
 8000506:	430a      	orrs	r2, r1
 8000508:	fb0e 5510 	mls	r5, lr, r0, r5
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f507 	mul.w	r5, r0, r7
 8000516:	428d      	cmp	r5, r1
 8000518:	d90e      	bls.n	8000538 <__udivmoddi4+0x270>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	bf2c      	ite	cs
 8000524:	f04f 0901 	movcs.w	r9, #1
 8000528:	f04f 0900 	movcc.w	r9, #0
 800052c:	428d      	cmp	r5, r1
 800052e:	d902      	bls.n	8000536 <__udivmoddi4+0x26e>
 8000530:	f1b9 0f00 	cmp.w	r9, #0
 8000534:	d031      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000536:	4640      	mov	r0, r8
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000540:	fb0e 1115 	mls	r1, lr, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f107 	mul.w	r1, r5, r7
 800054c:	4291      	cmp	r1, r2
 800054e:	d907      	bls.n	8000560 <__udivmoddi4+0x298>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d201      	bcs.n	800055e <__udivmoddi4+0x296>
 800055a:	4291      	cmp	r1, r2
 800055c:	d823      	bhi.n	80005a6 <__udivmoddi4+0x2de>
 800055e:	4645      	mov	r5, r8
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000566:	e726      	b.n	80003b6 <__udivmoddi4+0xee>
 8000568:	4631      	mov	r1, r6
 800056a:	4630      	mov	r0, r6
 800056c:	e6f9      	b.n	8000362 <__udivmoddi4+0x9a>
 800056e:	1a84      	subs	r4, r0, r2
 8000570:	eb65 0203 	sbc.w	r2, r5, r3
 8000574:	2001      	movs	r0, #1
 8000576:	4617      	mov	r7, r2
 8000578:	e70b      	b.n	8000392 <__udivmoddi4+0xca>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74a      	b.n	8000416 <__udivmoddi4+0x14e>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e6e4      	b.n	8000350 <__udivmoddi4+0x88>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e72f      	b.n	80003ec <__udivmoddi4+0x124>
 800058c:	3902      	subs	r1, #2
 800058e:	4462      	add	r2, ip
 8000590:	e6c9      	b.n	8000326 <__udivmoddi4+0x5e>
 8000592:	f1ae 0e02 	sub.w	lr, lr, #2
 8000596:	443d      	add	r5, r7
 8000598:	e76f      	b.n	800047a <__udivmoddi4+0x1b2>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7cb      	b.n	8000538 <__udivmoddi4+0x270>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e77e      	b.n	80004a4 <__udivmoddi4+0x1dc>
 80005a6:	3d02      	subs	r5, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7d9      	b.n	8000560 <__udivmoddi4+0x298>
 80005ac:	4618      	mov	r0, r3
 80005ae:	4631      	mov	r1, r6
 80005b0:	e6d7      	b.n	8000362 <__udivmoddi4+0x9a>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fbfc 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f80e 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f952 	bl	800086c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f874 	bl	80006b4 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f884 	bl	80006d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 f8ce 	bl	8000770 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005d4:	f000 f918 	bl	8000808 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 80005d8:	f000 f877 	bl	80006ca <MX_MEMORYMAP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x24>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09c      	sub	sp, #112	; 0x70
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2250      	movs	r2, #80	; 0x50
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fd47 	bl	8005082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <SystemClock_Config+0xd0>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <SystemClock_Config+0xd0>)
 800060c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000610:	6113      	str	r3, [r2, #16]
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xd0>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800061e:	bf00      	nop
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xd0>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	2b08      	cmp	r3, #8
 800062a:	d1f9      	bne.n	8000620 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800062c:	2321      	movs	r3, #33	; 0x21
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000640:	2303      	movs	r3, #3
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000644:	230c      	movs	r3, #12
 8000646:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000648:	23fa      	movs	r3, #250	; 0xfa
 800064a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000658:	2304      	movs	r3, #4
 800065a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800065c:	2300      	movs	r3, #0
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 ff7d 	bl	8001568 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f9ac 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	231f      	movs	r3, #31
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fb9e 	bl	8001dd8 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f995 	bl	80009d0 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3770      	adds	r7, #112	; 0x70
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	44020800 	.word	0x44020800

080006b4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006b8:	f000 fe48 	bl	800134c <HAL_ICACHE_Enable>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80006c2:	f000 f985 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <MX_USART1_UART_Init+0x94>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_USART1_UART_Init+0x90>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_USART1_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART1_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000722:	f003 ff69 	bl	80045f8 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800072c:	f000 f950 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000734:	f004 fb80 	bl	8004e38 <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800073e:	f000 f947 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000746:	f004 fbb5 	bl	8004eb4 <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 f93e 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_USART1_UART_Init+0x90>)
 8000756:	f004 fb36 	bl	8004dc6 <HAL_UARTEx_DisableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f936 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40013800 	.word	0x40013800

08000770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	; (8000804 <MX_USART3_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_USART3_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_USART3_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_USART3_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_USART3_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007ba:	f003 ff1d 	bl	80045f8 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f904 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007cc:	f004 fb34 	bl	8004e38 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f8fb 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007de:	f004 fb69 	bl	8004eb4 <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f8f2 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_USART3_UART_Init+0x90>)
 80007ee:	f004 faea 	bl	8004dc6 <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f8ea 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000bc 	.word	0x200000bc
 8000804:	40004800 	.word	0x40004800

08000808 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MX_USB_PCD_Init+0x60>)
 8000810:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000814:	2208      	movs	r2, #8
 8000816:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800081a:	2202      	movs	r2, #2
 800081c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000820:	2202      	movs	r2, #2
 8000822:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USB_PCD_Init+0x5c>)
 8000850:	f000 fd8c 	bl	800136c <HAL_PCD_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800085a:	f000 f8b9 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000150 	.word	0x20000150
 8000868:	40016000 	.word	0x40016000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_GPIO_Init+0x150>)
 8000884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000888:	4a4c      	ldr	r2, [pc, #304]	; (80009bc <MX_GPIO_Init+0x150>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <MX_GPIO_Init+0x150>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <MX_GPIO_Init+0x150>)
 80008a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a6:	4a45      	ldr	r2, [pc, #276]	; (80009bc <MX_GPIO_Init+0x150>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008b0:	4b42      	ldr	r3, [pc, #264]	; (80009bc <MX_GPIO_Init+0x150>)
 80008b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_GPIO_Init+0x150>)
 80008c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c4:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MX_GPIO_Init+0x150>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_GPIO_Init+0x150>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_GPIO_Init+0x150>)
 80008de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008e2:	4a36      	ldr	r2, [pc, #216]	; (80009bc <MX_GPIO_Init+0x150>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_GPIO_Init+0x150>)
 80008ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x150>)
 80008fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <MX_GPIO_Init+0x150>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_GPIO_Init+0x150>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2120      	movs	r1, #32
 800091c:	4828      	ldr	r0, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x154>)
 800091e:	f000 fcfd 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4826      	ldr	r0, [pc, #152]	; (80009c4 <MX_GPIO_Init+0x158>)
 800092a:	f000 fcf7 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_USER_BUTTON_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4820      	ldr	r0, [pc, #128]	; (80009c4 <MX_GPIO_Init+0x158>)
 8000944:	f000 fb98 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000948:	2320      	movs	r3, #32
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <MX_GPIO_Init+0x154>)
 8000960:	f000 fb8a 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x154>)
 800097a:	f000 fb7d 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x158>)
 8000998:	f000 fb6e 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099c:	2304      	movs	r3, #4
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_GPIO_Init+0x160>)
 80009b0:	f000 fb62 	bl	8001078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	44020c00 	.word	0x44020c00
 80009c0:	42020000 	.word	0x42020000
 80009c4:	42020800 	.word	0x42020800
 80009c8:	10110000 	.word	0x10110000
 80009cc:	42020c00 	.word	0x42020c00

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>

080009da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ae      	sub	sp, #184	; 0xb8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	2288      	movs	r2, #136	; 0x88
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 fb3a 	bl	8005082 <memset>
  if(huart->Instance==USART1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_UART_MspInit+0x15c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d146      	bne.n	8000aa6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a18:	f04f 0201 	mov.w	r2, #1
 8000a1c:	f04f 0300 	mov.w	r3, #0
 8000a20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a24:	2300      	movs	r3, #0
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fd15 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a38:	f7ff ffca 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a3c:	4b42      	ldr	r3, [pc, #264]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000a3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a42:	4a41      	ldr	r2, [pc, #260]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000a4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a60:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000a78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a92:	2304      	movs	r3, #4
 8000a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482b      	ldr	r0, [pc, #172]	; (8000b4c <HAL_UART_MspInit+0x164>)
 8000aa0:	f000 faea 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa4:	e049      	b.n	8000b3a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <HAL_UART_MspInit+0x168>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d144      	bne.n	8000b3a <HAL_UART_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab0:	f04f 0204 	mov.w	r2, #4
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac0:	f107 0318 	add.w	r3, r7, #24
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fcc9 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000ad0:	f7ff ff7e 	bl	80009d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ada:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0x160>)
 8000b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000b10:	2318      	movs	r3, #24
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8000b28:	230d      	movs	r3, #13
 8000b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <HAL_UART_MspInit+0x16c>)
 8000b36:	f000 fa9f 	bl	8001078 <HAL_GPIO_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	37b8      	adds	r7, #184	; 0xb8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40013800 	.word	0x40013800
 8000b48:	44020c00 	.word	0x44020c00
 8000b4c:	42020400 	.word	0x42020400
 8000b50:	40004800 	.word	0x40004800
 8000b54:	42020000 	.word	0x42020000

08000b58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ac      	sub	sp, #176	; 0xb0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2288      	movs	r2, #136	; 0x88
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fa82 	bl	8005082 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <HAL_PCD_MspInit+0xc8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d146      	bne.n	8000c16 <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	f04f 0310 	mov.w	r3, #16
 8000b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b94:	2330      	movs	r3, #48	; 0x30
 8000b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fc5c 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000baa:	f7ff ff11 	bl	80009d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_PCD_MspInit+0xcc>)
 8000bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_PCD_MspInit+0xcc>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_PCD_MspInit+0xcc>)
 8000bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_DN_Pin|USB_FS_DP_Pin;
 8000bcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000be6:	230a      	movs	r3, #10
 8000be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_PCD_MspInit+0xd0>)
 8000bf4:	f000 fa40 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_PCD_MspInit+0xcc>)
 8000bfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_PCD_MspInit+0xcc>)
 8000c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c04:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_PCD_MspInit+0xcc>)
 8000c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	37b0      	adds	r7, #176	; 0xb0
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40016000 	.word	0x40016000
 8000c24:	44020c00 	.word	0x44020c00
 8000c28:	42020000 	.word	0x42020000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8fa 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <SystemInit+0xc8>)
 8000c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8c:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <SystemInit+0xc8>)
 8000c8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <SystemInit+0xcc>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <SystemInit+0xcc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <SystemInit+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <SystemInit+0xcc>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4927      	ldr	r1, [pc, #156]	; (8000d4c <SystemInit+0xcc>)
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <SystemInit+0xd0>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemInit+0xcc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemInit+0xcc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <SystemInit+0xcc>)
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <SystemInit+0xd4>)
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <SystemInit+0xcc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <SystemInit+0xcc>)
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <SystemInit+0xd4>)
 8000cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <SystemInit+0xcc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <SystemInit+0xcc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <SystemInit+0xcc>)
 8000cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <SystemInit+0xcc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <SystemInit+0xc8>)
 8000cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf0:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <SystemInit+0xd8>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000cfa:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000d02:	d003      	beq.n	8000d0c <SystemInit+0x8c>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d0a:	d117      	bne.n	8000d3c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <SystemInit+0xd8>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <SystemInit+0xd8>)
 8000d1a:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <SystemInit+0xdc>)
 8000d1c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <SystemInit+0xd8>)
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <SystemInit+0xe0>)
 8000d22:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <SystemInit+0xd8>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <SystemInit+0xd8>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <SystemInit+0xd8>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <SystemInit+0xd8>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	61d3      	str	r3, [r2, #28]
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	44020c00 	.word	0x44020c00
 8000d50:	fae2eae3 	.word	0xfae2eae3
 8000d54:	01010280 	.word	0x01010280
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	08192a3b 	.word	0x08192a3b
 8000d60:	4c5d6e7f 	.word	0x4c5d6e7f

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d6a:	e003      	b.n	8000d74 <LoopCopyDataInit>

08000d6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d72:	3104      	adds	r1, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d7c:	d3f6      	bcc.n	8000d6c <CopyDataInit>
	ldr	r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d80:	e002      	b.n	8000d88 <LoopFillZerobss>

08000d82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d84:	f842 3b04 	str.w	r3, [r2], #4

08000d88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <LoopForever+0x16>)
	cmp	r2, r3
 8000d8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d8c:	d3f9      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8e:	f7ff ff77 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f004 f97f 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fc0f 	bl	80005b8 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d9c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000da0:	08005144 	.word	0x08005144
	ldr	r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000dac:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000db0:	2000045c 	.word	0x2000045c

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f929 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000dc2:	f001 f9c1 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	490a      	ldr	r1, [pc, #40]	; (8000dfc <HAL_Init+0x44>)
 8000dd2:	5ccb      	ldrb	r3, [r1, r3]
 8000dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_Init+0x48>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	200f      	movs	r0, #15
 8000dde:	f000 f811 	bl	8000e04 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e002      	b.n	8000df2 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fdf5 	bl	80009da <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	44020c00 	.word	0x44020c00
 8000dfc:	080050f4 	.word	0x080050f4
 8000e00:	20000000 	.word	0x20000000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_InitTick+0x60>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e021      	b.n	8000e5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_InitTick+0x64>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_InitTick+0x60>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f915 	bl	800105e <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f8ed 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x68>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000458 	.word	0x20000458

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000458 	.word	0x20000458

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff47 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb2 	bl	8000fd0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001086:	e136      	b.n	80012f6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8128 	beq.w	80012f0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x38>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d125      	bne.n	80010fc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f003 020f 	and.w	r2, r3, #15
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	6979      	ldr	r1, [r7, #20]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4313      	orrs	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d00b      	beq.n	8001150 <HAL_GPIO_Init+0xd8>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d007      	beq.n	8001150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001144:	2b11      	cmp	r3, #17
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	4313      	orrs	r3, r2
 8001178:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4013      	ands	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4013      	ands	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d07c      	beq.n	80012f0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011f6:	4a47      	ldr	r2, [pc, #284]	; (8001314 <HAL_GPIO_Init+0x29c>)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3318      	adds	r3, #24
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4013      	ands	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	0a9a      	lsrs	r2, r3, #10
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 8001220:	4013      	ands	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	00d2      	lsls	r2, r2, #3
 800122a:	4093      	lsls	r3, r2
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001232:	4938      	ldr	r1, [pc, #224]	; (8001314 <HAL_GPIO_Init+0x29c>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3318      	adds	r3, #24
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_GPIO_Init+0x29c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4013      	ands	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001264:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <HAL_GPIO_Init+0x29c>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_GPIO_Init+0x29c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43db      	mvns	r3, r3
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4013      	ands	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800128e:	4a21      	ldr	r2, [pc, #132]	; (8001314 <HAL_GPIO_Init+0x29c>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_GPIO_Init+0x29c>)
 8001296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800129a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	4013      	ands	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <HAL_GPIO_Init+0x29c>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_GPIO_Init+0x29c>)
 80012c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_GPIO_Init+0x29c>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	3301      	adds	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f aec1 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	44022000 	.word	0x44022000
 8001318:	002f7f7f 	.word	0x002f7f7f

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_ICACHE_Enable+0x1c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_ICACHE_Enable+0x1c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40030400 	.word	0x40030400

0800136c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	b08f      	sub	sp, #60	; 0x3c
 8001370:	af0a      	add	r7, sp, #40	; 0x28
 8001372:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0cd      	b.n	800151a <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fbe0 	bl	8000b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fe11 	bl	8004fcc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e03e      	b.n	800142e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	333d      	adds	r3, #61	; 0x3d
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	333c      	adds	r3, #60	; 0x3c
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	333f      	adds	r3, #63	; 0x3f
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	334c      	adds	r3, #76	; 0x4c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3350      	adds	r3, #80	; 0x50
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3354      	adds	r3, #84	; 0x54
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3bb      	bcc.n	80013b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e044      	b.n	80014c8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	f203 137f 	addw	r3, r3, #383	; 0x17f
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3301      	adds	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3b5      	bcc.n	800143e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	687e      	ldr	r6, [r7, #4]
 80014da:	466d      	mov	r5, sp
 80014dc:	f106 0410 	add.w	r4, r6, #16
 80014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f0:	1d33      	adds	r3, r6, #4
 80014f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f003 fda1 	bl	800503c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2b01      	cmp	r3, #1
 8001510:	d102      	bne.n	8001518 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f805 	bl	8001522 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001522 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	f000 bc28 	b.w	8001dcc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157c:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f003 0318 	and.w	r3, r3, #24
 8001584:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001586:	4b92      	ldr	r3, [pc, #584]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2b00      	cmp	r3, #0
 800159a:	d05b      	beq.n	8001654 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x46>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b18      	cmp	r3, #24
 80015a6:	d114      	bne.n	80015d2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d111      	bne.n	80015d2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 bc08 	b.w	8001dcc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80015bc:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	4981      	ldr	r1, [pc, #516]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80015d0:	e040      	b.n	8001654 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d023      	beq.n	8001622 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015da:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7c      	ldr	r2, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc57 	bl	8000e98 <HAL_GetTick>
 80015ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80015ee:	f7ff fc53 	bl	8000e98 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e3e5      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001600:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	496d      	ldr	r1, [pc, #436]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800161c:	4313      	orrs	r3, r2
 800161e:	618b      	str	r3, [r1, #24]
 8001620:	e018      	b.n	8001654 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001622:	4b6b      	ldr	r3, [pc, #428]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6a      	ldr	r2, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fc33 	bl	8000e98 <HAL_GetTick>
 8001632:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001636:	f7ff fc2f 	bl	8000e98 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e3c1      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001648:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a0 	beq.w	80017a2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	2b10      	cmp	r3, #16
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x10c>
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b18      	cmp	r3, #24
 800166c:	d109      	bne.n	8001682 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 8092 	bne.w	80017a2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e3a4      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x132>
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a4f      	ldr	r2, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e058      	b.n	800174c <HAL_RCC_OscConfig+0x1e4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x160>
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e041      	b.n	800174c <HAL_RCC_OscConfig+0x1e4>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d112      	bne.n	80016f8 <HAL_RCC_OscConfig+0x190>
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a3e      	ldr	r2, [pc, #248]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e029      	b.n	800174c <HAL_RCC_OscConfig+0x1e4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001700:	d112      	bne.n	8001728 <HAL_RCC_OscConfig+0x1c0>
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e011      	b.n	800174c <HAL_RCC_OscConfig+0x1e4>
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001746:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fba0 	bl	8000e98 <HAL_GetTick>
 8001758:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb9c 	bl	8000e98 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e32e      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x1f4>
 800177a:	e012      	b.n	80017a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb8c 	bl	8000e98 <HAL_GetTick>
 8001780:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb88 	bl	8000e98 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e31a      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_RCC_OscConfig+0x268>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 809a 	beq.w	80018e4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x25a>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	2b18      	cmp	r3, #24
 80017ba:	d149      	bne.n	8001850 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d146      	bne.n	8001850 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d104      	bne.n	80017d4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e2fe      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
 80017ce:	bf00      	nop
 80017d0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11c      	bne.n	8001814 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80017da:	4b9a      	ldr	r3, [pc, #616]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0218 	and.w	r2, r3, #24
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d014      	beq.n	8001814 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80017ea:	4b96      	ldr	r3, [pc, #600]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0218 	bic.w	r2, r3, #24
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	4993      	ldr	r1, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80017fc:	f000 fdd0 	bl	80023a0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001800:	4b91      	ldr	r3, [pc, #580]	; (8001a48 <HAL_RCC_OscConfig+0x4e0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fafd 	bl	8000e04 <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2db      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb40 	bl	8000e98 <HAL_GetTick>
 8001818:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800181c:	f7ff fb3c 	bl	8000e98 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e2ce      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800183a:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	497e      	ldr	r1, [pc, #504]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800184e:	e049      	b.n	80018e4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d02c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001858:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 0218 	bic.w	r2, r3, #24
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4977      	ldr	r1, [pc, #476]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fb0f 	bl	8000e98 <HAL_GetTick>
 800187a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800187e:	f7ff fb0b 	bl	8000e98 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e29d      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800189c:	4b69      	ldr	r3, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	4966      	ldr	r1, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	610b      	str	r3, [r1, #16]
 80018b0:	e018      	b.n	80018e4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff faeb 	bl	8000e98 <HAL_GetTick>
 80018c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fae7 	bl	8000e98 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e279      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f8:	4b52      	ldr	r3, [pc, #328]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80018fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018fe:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001904:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fac6 	bl	8000e98 <HAL_GetTick>
 800190c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001910:	f7ff fac2 	bl	8000e98 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e254      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x3a8>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800193a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800193e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff faa9 	bl	8000e98 <HAL_GetTick>
 8001946:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800194a:	f7ff faa5 	bl	8000e98 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e237      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 800195e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80d2 	beq.w	8001b1c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001978:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_OscConfig+0x4e4>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d118      	bne.n	80019b6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_OscConfig+0x4e4>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <HAL_RCC_OscConfig+0x4e4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001990:	f7ff fa82 	bl	8000e98 <HAL_GetTick>
 8001994:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff fa7e 	bl	8000e98 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e210      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_RCC_OscConfig+0x4e4>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0x468>
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019ce:	e074      	b.n	8001aba <HAL_RCC_OscConfig+0x552>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d118      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4a2>
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019de:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 80019fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a08:	e057      	b.n	8001aba <HAL_RCC_OscConfig+0x552>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d11e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4e8>
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a38:	4a02      	ldr	r2, [pc, #8]	; (8001a44 <HAL_RCC_OscConfig+0x4dc>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x552>
 8001a44:	44020c00 	.word	0x44020c00
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	44020800 	.word	0x44020800
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b85      	cmp	r3, #133	; 0x85
 8001a56:	d118      	bne.n	8001a8a <HAL_RCC_OscConfig+0x522>
 8001a58:	4ba2      	ldr	r3, [pc, #648]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a5e:	4aa1      	ldr	r2, [pc, #644]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a68:	4b9e      	ldr	r3, [pc, #632]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6e:	4a9d      	ldr	r2, [pc, #628]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a78:	4b9a      	ldr	r3, [pc, #616]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a7e:	4a99      	ldr	r2, [pc, #612]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a88:	e017      	b.n	8001aba <HAL_RCC_OscConfig+0x552>
 8001a8a:	4b96      	ldr	r3, [pc, #600]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a90:	4a94      	ldr	r2, [pc, #592]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a9a:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa0:	4a90      	ldr	r2, [pc, #576]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001aa2:	f023 0304 	bic.w	r3, r3, #4
 8001aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aaa:	4b8e      	ldr	r3, [pc, #568]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab0:	4a8c      	ldr	r2, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f9e9 	bl	8000e98 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f9e5 	bl	8000e98 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e175      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae0:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ed      	beq.n	8001aca <HAL_RCC_OscConfig+0x562>
 8001aee:	e015      	b.n	8001b1c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f9d2 	bl	8000e98 <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f9ce 	bl	8000e98 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e15e      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0e:	4b75      	ldr	r3, [pc, #468]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ed      	bne.n	8001af8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d036      	beq.n	8001b96 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d019      	beq.n	8001b64 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6b      	ldr	r2, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f9ac 	bl	8000e98 <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b44:	f7ff f9a8 	bl	8000e98 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e13a      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x5dc>
 8001b62:	e018      	b.n	8001b96 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b64:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a5e      	ldr	r2, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f992 	bl	8000e98 <HAL_GetTick>
 8001b74:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b78:	f7ff f98e 	bl	8000e98 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e120      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b8a:	4b56      	ldr	r3, [pc, #344]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8115 	beq.w	8001dca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b18      	cmp	r3, #24
 8001ba4:	f000 80af 	beq.w	8001d06 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	f040 8086 	bne.w	8001cbe <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f96b 	bl	8000e98 <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff f967 	bl	8000e98 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0f9      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001bd8:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001be4:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bec:	f023 0303 	bic.w	r3, r3, #3
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bf8:	0212      	lsls	r2, r2, #8
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	4939      	ldr	r1, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	628b      	str	r3, [r1, #40]	; 0x28
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	3b01      	subs	r3, #1
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c32:	492c      	ldr	r1, [pc, #176]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c3e:	f023 0310 	bic.w	r3, r3, #16
 8001c42:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	f023 020c 	bic.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	491f      	ldr	r1, [pc, #124]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f023 0220 	bic.w	r2, r3, #32
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c78:	491a      	ldr	r1, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f8ff 	bl	8000e98 <HAL_GetTick>
 8001c9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff f8fb 	bl	8000e98 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e08d      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x736>
 8001cbc:	e085      	b.n	8001dca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_RCC_OscConfig+0x77c>)
 8001cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff f8e5 	bl	8000e98 <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff f8e1 	bl	8000e98 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d903      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e073      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
 8001ce4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001cf4:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	4a36      	ldr	r2, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001cfa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	6293      	str	r3, [r2, #40]	; 0x28
 8001d04:	e061      	b.n	8001dca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d031      	beq.n	8001d7e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d12a      	bne.n	8001d7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d122      	bne.n	8001d7e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d11a      	bne.n	8001d7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d111      	bne.n	8001d7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d108      	bne.n	8001d7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	0e1b      	lsrs	r3, r3, #24
 8001d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e024      	b.n	8001dcc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d01a      	beq.n	8001dca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001d9a:	f023 0310 	bic.w	r3, r3, #16
 8001d9e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f87a 	bl	8000e98 <HAL_GetTick>
 8001da4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001da6:	bf00      	nop
 8001da8:	f7ff f876 	bl	8000e98 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d0f9      	beq.n	8001da8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x86c>)
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	44020c00 	.word	0x44020c00

08001dd8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e19e      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_RCC_ClockConfig+0x224>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b80      	ldr	r3, [pc, #512]	; (8001ffc <HAL_RCC_ClockConfig+0x224>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 020f 	bic.w	r2, r3, #15
 8001e02:	497e      	ldr	r1, [pc, #504]	; (8001ffc <HAL_RCC_ClockConfig+0x224>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <HAL_RCC_ClockConfig+0x224>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e186      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	4b74      	ldr	r3, [pc, #464]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d909      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001e3a:	4b71      	ldr	r3, [pc, #452]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	496d      	ldr	r1, [pc, #436]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d012      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d909      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e6c:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4961      	ldr	r1, [pc, #388]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e9c:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4955      	ldr	r1, [pc, #340]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d908      	bls.n	8001edc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001eca:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f023 020f 	bic.w	r2, r3, #15
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	494a      	ldr	r1, [pc, #296]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8093 	beq.w	8002010 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d121      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e113      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e107      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0fb      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0f3      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	492c      	ldr	r1, [pc, #176]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f54:	f7fe ffa0 	bl	8000e98 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d112      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe ff98 	bl	8000e98 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0d7      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0318 	and.w	r3, r3, #24
 8001f82:	2b18      	cmp	r3, #24
 8001f84:	d1ee      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x18c>
 8001f86:	e043      	b.n	8002010 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f92:	f7fe ff81 	bl	8000e98 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0c0      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0318 	and.w	r3, r3, #24
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x1ba>
 8001fb4:	e02c      	b.n	8002010 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d122      	bne.n	8002004 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe ff6a 	bl	8000e98 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0a9      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x228>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0318 	and.w	r3, r3, #24
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1e8>
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe ff58 	bl	8000e98 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d906      	bls.n	8002004 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e097      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
 8001ffa:	bf00      	nop
 8001ffc:	40022000 	.word	0x40022000
 8002000:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002004:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 0318 	and.w	r3, r3, #24
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	429a      	cmp	r2, r3
 800202a:	d208      	bcs.n	800203e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f023 020f 	bic.w	r2, r3, #15
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	493e      	ldr	r1, [pc, #248]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 800203a:	4313      	orrs	r3, r2
 800203c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_ClockConfig+0x360>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d210      	bcs.n	800206e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_ClockConfig+0x360>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 020f 	bic.w	r2, r3, #15
 8002054:	4938      	ldr	r1, [pc, #224]	; (8002138 <HAL_RCC_ClockConfig+0x360>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_ClockConfig+0x360>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e05d      	b.n	800212a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002086:	429a      	cmp	r2, r3
 8002088:	d208      	bcs.n	800209c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4927      	ldr	r1, [pc, #156]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d209      	bcs.n	80020ce <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	491a      	ldr	r1, [pc, #104]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d209      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002100:	f000 f822 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x35c>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490b      	ldr	r1, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x364>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x368>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x36c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fe70 	bl	8000e04 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002128:	7afb      	ldrb	r3, [r7, #11]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	44020c00 	.word	0x44020c00
 8002138:	40022000 	.word	0x40022000
 800213c:	080050f4 	.word	0x080050f4
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800214e:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0318 	and.w	r3, r3, #24
 8002156:	2b08      	cmp	r3, #8
 8002158:	d102      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800215a:	4b8a      	ldr	r3, [pc, #552]	; (8002384 <HAL_RCC_GetSysClockFreq+0x23c>)
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e107      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002160:	4b87      	ldr	r3, [pc, #540]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 0318 	and.w	r3, r3, #24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d112      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800216c:	4b84      	ldr	r3, [pc, #528]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002178:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	4a81      	ldr	r2, [pc, #516]	; (8002388 <HAL_RCC_GetSysClockFreq+0x240>)
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e0f1      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800218c:	4b7e      	ldr	r3, [pc, #504]	; (8002388 <HAL_RCC_GetSysClockFreq+0x240>)
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	e0ee      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002192:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0318 	and.w	r3, r3, #24
 800219a:	2b10      	cmp	r3, #16
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800219e:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_GetSysClockFreq+0x244>)
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e0e5      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 0318 	and.w	r3, r3, #24
 80021ac:	2b18      	cmp	r3, #24
 80021ae:	f040 80dd 	bne.w	800236c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80021bc:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80b7 	beq.w	8002366 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0xbe>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d056      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002204:	e077      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002206:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02d      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	4a5a      	ldr	r2, [pc, #360]	; (8002388 <HAL_RCC_GetSysClockFreq+0x240>)
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 800223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800224c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002250:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002390 <HAL_RCC_GetSysClockFreq+0x248>
 8002254:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002258:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800225c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002260:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002268:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800226c:	e065      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002278:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002394 <HAL_RCC_GetSysClockFreq+0x24c>
 800227c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002290:	ed97 6a02 	vldr	s12, [r7, #8]
 8002294:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002390 <HAL_RCC_GetSysClockFreq+0x248>
 8002298:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800229c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80022a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80022b0:	e043      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022bc:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002398 <HAL_RCC_GetSysClockFreq+0x250>
 80022c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80022d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002390 <HAL_RCC_GetSysClockFreq+0x248>
 80022dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80022e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80022f4:	e021      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002300:	eddf 6a26 	vldr	s13, [pc, #152]	; 800239c <HAL_RCC_GetSysClockFreq+0x254>
 8002304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002318:	ed97 6a02 	vldr	s12, [r7, #8]
 800231c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002390 <HAL_RCC_GetSysClockFreq+0x248>
 8002320:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002324:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800232c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002334:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002338:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_GetSysClockFreq+0x238>)
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	0a5b      	lsrs	r3, r3, #9
 8002340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002344:	3301      	adds	r3, #1
 8002346:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002352:	edd7 6a06 	vldr	s13, [r7, #24]
 8002356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	e004      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e001      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetSysClockFreq+0x240>)
 800236e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002370:	69fb      	ldr	r3, [r7, #28]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	44020c00 	.word	0x44020c00
 8002384:	003d0900 	.word	0x003d0900
 8002388:	03d09000 	.word	0x03d09000
 800238c:	016e3600 	.word	0x016e3600
 8002390:	46000000 	.word	0x46000000
 8002394:	4c742400 	.word	0x4c742400
 8002398:	4bb71b00 	.word	0x4bb71b00
 800239c:	4a742400 	.word	0x4a742400

080023a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023a4:	f7ff fed0 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80023ae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023b2:	4907      	ldr	r1, [pc, #28]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80023b6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80023c0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80023c4:	681b      	ldr	r3, [r3, #0]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	44020c00 	.word	0x44020c00
 80023d0:	080050f4 	.word	0x080050f4
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80023dc:	f7ff ffe0 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	44020c00 	.word	0x44020c00
 8002400:	08005104 	.word	0x08005104

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002408:	f7ff ffca 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_RCC_GetPCLK2Freq+0x28>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	44020c00 	.word	0x44020c00
 800242c:	08005104 	.word	0x08005104

08002430 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002434:	f7ff ffb4 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_GetPCLK3Freq+0x24>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	0b1b      	lsrs	r3, r3, #12
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4904      	ldr	r1, [pc, #16]	; (8002458 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	44020c00 	.word	0x44020c00
 8002458:	08005104 	.word	0x08005104

0800245c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800245c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002460:	b0aa      	sub	sp, #168	; 0xa8
 8002462:	af00      	add	r7, sp, #0
 8002464:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002468:	2300      	movs	r3, #0
 800246a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800246e:	2300      	movs	r3, #0
 8002470:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002480:	2500      	movs	r5, #0
 8002482:	ea54 0305 	orrs.w	r3, r4, r5
 8002486:	d00b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002488:	4bb8      	ldr	r3, [pc, #736]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800248a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800248e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	4ab4      	ldr	r2, [pc, #720]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800249a:	430b      	orrs	r3, r1
 800249c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f002 0801 	and.w	r8, r2, #1
 80024ac:	f04f 0900 	mov.w	r9, #0
 80024b0:	ea58 0309 	orrs.w	r3, r8, r9
 80024b4:	d038      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80024b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d819      	bhi.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024c0:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	080024fd 	.word	0x080024fd
 80024cc:	080024e1 	.word	0x080024e1
 80024d0:	080024f5 	.word	0x080024f5
 80024d4:	080024fd 	.word	0x080024fd
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	080024fd 	.word	0x080024fd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80024e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e4:	3308      	adds	r3, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 ffee 	bl	80044c8 <RCCEx_PLL2_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80024f2:	e004      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80024fa:	e000      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80024fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002506:	4b99      	ldr	r3, [pc, #612]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800250c:	f023 0107 	bic.w	r1, r3, #7
 8002510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	4a95      	ldr	r2, [pc, #596]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002518:	430b      	orrs	r3, r1
 800251a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800251e:	e003      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002520:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002524:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002528:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f002 0a02 	and.w	sl, r2, #2
 8002534:	f04f 0b00 	mov.w	fp, #0
 8002538:	ea5a 030b 	orrs.w	r3, sl, fp
 800253c:	d03c      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800253e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	2b28      	cmp	r3, #40	; 0x28
 8002546:	d01b      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002548:	2b28      	cmp	r3, #40	; 0x28
 800254a:	d815      	bhi.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d019      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d811      	bhi.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002554:	2b18      	cmp	r3, #24
 8002556:	d017      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002558:	2b18      	cmp	r3, #24
 800255a:	d80d      	bhi.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002560:	2b08      	cmp	r3, #8
 8002562:	d109      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002568:	3308      	adds	r3, #8
 800256a:	4618      	mov	r0, r3
 800256c:	f001 ffac 	bl	80044c8 <RCCEx_PLL2_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002576:	e00a      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800257e:	e006      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002580:	bf00      	nop
 8002582:	e004      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002584:	bf00      	nop
 8002586:	e002      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002588:	bf00      	nop
 800258a:	e000      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800258c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800258e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002596:	4b75      	ldr	r3, [pc, #468]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800259c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80025a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4a71      	ldr	r2, [pc, #452]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025a8:	430b      	orrs	r3, r1
 80025aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ae:	e003      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80025b4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f002 0304 	and.w	r3, r2, #4
 80025c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80025d2:	460b      	mov	r3, r1
 80025d4:	4313      	orrs	r3, r2
 80025d6:	d040      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80025d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025e2:	d01e      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80025e4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025e8:	d817      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ee:	d01a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80025f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f4:	d811      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025f6:	2bc0      	cmp	r3, #192	; 0xc0
 80025f8:	d017      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80025fa:	2bc0      	cmp	r3, #192	; 0xc0
 80025fc:	d80d      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d109      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002606:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800260a:	3308      	adds	r3, #8
 800260c:	4618      	mov	r0, r3
 800260e:	f001 ff5b 	bl	80044c8 <RCCEx_PLL2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002618:	e00a      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002620:	e006      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002622:	bf00      	nop
 8002624:	e004      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800262e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002630:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10c      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800263a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800263e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002642:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	4a48      	ldr	r2, [pc, #288]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800264a:	430b      	orrs	r3, r1
 800264c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002650:	e003      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002652:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002656:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800265a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002670:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002674:	460b      	mov	r3, r1
 8002676:	4313      	orrs	r3, r2
 8002678:	d043      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800267a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002684:	d021      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002686:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800268a:	d81a      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800268c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002690:	d01d      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002696:	d814      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800269c:	d019      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800269e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026a2:	d80e      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ac:	d109      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026b2:	3308      	adds	r3, #8
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 ff07 	bl	80044c8 <RCCEx_PLL2_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80026c0:	e00a      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026ca:	bf00      	nop
 80026cc:	e004      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80026d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e6:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80026ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026f2:	430b      	orrs	r3, r1
 80026f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f8:	e003      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80026fe:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800270e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002710:	2300      	movs	r3, #0
 8002712:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002714:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002718:	460b      	mov	r3, r1
 800271a:	4313      	orrs	r3, r2
 800271c:	d03e      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800271e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002728:	d01b      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800272a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800272e:	d814      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002734:	d017      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800273a:	d80e      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d017      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d109      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800274a:	3308      	adds	r3, #8
 800274c:	4618      	mov	r0, r3
 800274e:	f001 febb 	bl	80044c8 <RCCEx_PLL2_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002758:	e00b      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002760:	e007      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002762:	bf00      	nop
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002766:	bf00      	nop
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800276a:	bf00      	nop
 800276c:	44020c00 	.word	0x44020c00
        break;
 8002770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002772:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800277a:	4ba5      	ldr	r3, [pc, #660]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800277c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002780:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002784:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4aa1      	ldr	r2, [pc, #644]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800278c:	430b      	orrs	r3, r1
 800278e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002792:	e003      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002798:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80027a8:	673b      	str	r3, [r7, #112]	; 0x70
 80027aa:	2300      	movs	r3, #0
 80027ac:	677b      	str	r3, [r7, #116]	; 0x74
 80027ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80027b2:	460b      	mov	r3, r1
 80027b4:	4313      	orrs	r3, r2
 80027b6:	d03b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80027b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027c2:	d01b      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80027c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027c8:	d814      	bhi.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80027ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027ce:	d017      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80027d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027d4:	d80e      	bhi.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d014      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80027da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027de:	d109      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027e4:	3308      	adds	r3, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fe6e 	bl	80044c8 <RCCEx_PLL2_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80027f2:	e008      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80027fa:	e004      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80027fc:	bf00      	nop
 80027fe:	e002      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002806:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800280e:	4b80      	ldr	r3, [pc, #512]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002810:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002814:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800281c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281e:	4a7c      	ldr	r2, [pc, #496]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002820:	430b      	orrs	r3, r1
 8002822:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002826:	e003      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800282c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800283c:	66bb      	str	r3, [r7, #104]	; 0x68
 800283e:	2300      	movs	r3, #0
 8002840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002842:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002846:	460b      	mov	r3, r1
 8002848:	4313      	orrs	r3, r2
 800284a:	d033      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800284c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800285c:	d80e      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002866:	d109      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002868:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800286c:	3308      	adds	r3, #8
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fe2a 	bl	80044c8 <RCCEx_PLL2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800287a:	e006      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002882:	e002      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002894:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002898:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800289c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	4a5b      	ldr	r2, [pc, #364]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80028a4:	430b      	orrs	r3, r1
 80028a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80028aa:	e003      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80028b0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80028b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	2100      	movs	r1, #0
 80028be:	6639      	str	r1, [r7, #96]	; 0x60
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	667b      	str	r3, [r7, #100]	; 0x64
 80028c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80028ca:	460b      	mov	r3, r1
 80028cc:	4313      	orrs	r3, r2
 80028ce:	d033      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80028d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80028dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e0:	d80e      	bhi.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80028e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ea:	d109      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028f0:	3308      	adds	r3, #8
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fde8 	bl	80044c8 <RCCEx_PLL2_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 80028fe:	e006      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002906:	e002      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800290c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800290e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002918:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800291c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002926:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002928:	430b      	orrs	r3, r1
 800292a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800292e:	e003      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002930:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002934:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	2100      	movs	r1, #0
 8002942:	65b9      	str	r1, [r7, #88]	; 0x58
 8002944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800294a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800294e:	460b      	mov	r3, r1
 8002950:	4313      	orrs	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4a2d      	ldr	r2, [pc, #180]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800295a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800295e:	61d3      	str	r3, [r2, #28]
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002962:	69d9      	ldr	r1, [r3, #28]
 8002964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800296e:	430b      	orrs	r3, r1
 8002970:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002972:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800297e:	653b      	str	r3, [r7, #80]	; 0x50
 8002980:	2300      	movs	r3, #0
 8002982:	657b      	str	r3, [r7, #84]	; 0x54
 8002984:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002988:	460b      	mov	r3, r1
 800298a:	4313      	orrs	r3, r2
 800298c:	d046      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800298e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002998:	d021      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800299a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800299e:	d81a      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	d01d      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d814      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b0:	d019      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80029b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b6:	d80e      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c0:	d109      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029c6:	3308      	adds	r3, #8
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fd7d 	bl	80044c8 <RCCEx_PLL2_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80029d4:	e00a      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80029dc:	e006      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029de:	bf00      	nop
 80029e0:	e004      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029e2:	bf00      	nop
 80029e4:	e002      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029e6:	bf00      	nop
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80029ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80029f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80029fa:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80029fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	4a02      	ldr	r2, [pc, #8]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002a06:	430b      	orrs	r3, r1
 8002a08:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002a0e:	bf00      	nop
 8002a10:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a18:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002a32:	460b      	mov	r3, r1
 8002a34:	4313      	orrs	r3, r2
 8002a36:	d043      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002a42:	d021      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8002a44:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002a48:	d81a      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a4e:	d01d      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a54:	d814      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a5a:	d019      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8002a5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a60:	d80e      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a70:	3308      	adds	r3, #8
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fd28 	bl	80044c8 <RCCEx_PLL2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002a86:	e006      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a88:	bf00      	nop
 8002a8a:	e004      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a8c:	bf00      	nop
 8002a8e:	e002      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a90:	bf00      	nop
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8002a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a96:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002a9e:	4bb6      	ldr	r3, [pc, #728]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002aa0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002aa4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4ab2      	ldr	r2, [pc, #712]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ab6:	e003      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002abc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ace:	2300      	movs	r3, #0
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	d030      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d80f      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d211      	bcs.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d911      	bls.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d109      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002af6:	3308      	adds	r3, #8
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fce5 	bl	80044c8 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b0c:	e002      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8002b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b14:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002b1c:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b22:	f023 0107 	bic.w	r1, r3, #7
 8002b26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b2c:	4a92      	ldr	r2, [pc, #584]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b3a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	2100      	movs	r1, #0
 8002b48:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002b54:	460b      	mov	r3, r1
 8002b56:	4313      	orrs	r3, r2
 8002b58:	d022      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d005      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8002b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b76:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002b7e:	4b7e      	ldr	r3, [pc, #504]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b84:	f023 0108 	bic.w	r1, r3, #8
 8002b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8e:	4a7a      	ldr	r2, [pc, #488]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002b90:	430b      	orrs	r3, r1
 8002b92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b96:	e003      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002b9c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f000 80b0 	beq.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bca:	f7fe f965 	bl	8000e98 <HAL_GetTick>
 8002bce:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002bd2:	e00b      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe f960 	bl	8000e98 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d903      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002bea:	e005      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002bec:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ed      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8002bf8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 808a 	bne.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002c10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d022      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d01b      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c3a:	4a4f      	ldr	r2, [pc, #316]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c4a:	4a4b      	ldr	r2, [pc, #300]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c54:	4a48      	ldr	r2, [pc, #288]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d019      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe f915 	bl	8000e98 <HAL_GetTick>
 8002c6e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c72:	e00d      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe f910 	bl	8000e98 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d903      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8002c8e:	e006      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ea      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8002c9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d132      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002ca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	61d3      	str	r3, [r2, #28]
 8002cd4:	e005      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ce0:	61d3      	str	r3, [r2, #28]
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce8:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002cf4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8002cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d0c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d10:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d1a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002d34:	460b      	mov	r3, r1
 8002d36:	4313      	orrs	r3, r2
 8002d38:	d038      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002d3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d40:	2b30      	cmp	r3, #48	; 0x30
 8002d42:	d014      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002d44:	2b30      	cmp	r3, #48	; 0x30
 8002d46:	d80e      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d012      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d80a      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d106      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8002d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d62:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8002d64:	e00d      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002d6c:	e009      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e007      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8002d72:	bf00      	nop
 8002d74:	e005      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8002d76:	bf00      	nop
 8002d78:	44020c00 	.word	0x44020c00
 8002d7c:	44020800 	.word	0x44020800
        break;
 8002d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d82:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002d8a:	4bb5      	ldr	r3, [pc, #724]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	49b1      	ldr	r1, [pc, #708]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002da2:	e003      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002da8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	d03c      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8002dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d81d      	bhi.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002ded 	.word	0x08002ded
 8002ddc:	08002dfb 	.word	0x08002dfb
 8002de0:	08002e0f 	.word	0x08002e0f
 8002de4:	08002e17 	.word	0x08002e17
 8002de8:	08002e17 	.word	0x08002e17
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dec:	4b9c      	ldr	r3, [pc, #624]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	4a9b      	ldr	r2, [pc, #620]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002df8:	e00e      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dfe:	3308      	adds	r3, #8
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fb61 	bl	80044c8 <RCCEx_PLL2_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002e0c:	e004      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8002e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e18:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002e20:	4b8f      	ldr	r3, [pc, #572]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e30:	498b      	ldr	r1, [pc, #556]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e3e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002e42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	d03c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8002e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d01f      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d819      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8002e6c:	2b18      	cmp	r3, #24
 8002e6e:	d01d      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002e70:	2b18      	cmp	r3, #24
 8002e72:	d815      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d007      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002e7c:	e010      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e7e:	4b78      	ldr	r3, [pc, #480]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	4a77      	ldr	r2, [pc, #476]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8002e8a:	e010      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e90:	3308      	adds	r3, #8
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 fb18 	bl	80044c8 <RCCEx_PLL2_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8002e9e:	e006      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8002eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4966      	ldr	r1, [pc, #408]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002ece:	e003      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ed4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	d03e      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8002ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d020      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f04:	d819      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002f06:	2bc0      	cmp	r3, #192	; 0xc0
 8002f08:	d01d      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8002f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f0c:	d815      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002f16:	e010      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f18:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f22:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8002f24:	e010      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 facb 	bl	80044c8 <RCCEx_PLL2_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002f40:	e002      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8002f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f48:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002f50:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f56:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	493f      	ldr	r1, [pc, #252]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f6e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	d038      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8002f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d00e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8002f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9e:	d815      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8002fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa8:	d110      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002fb6:	e00e      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 fa82 	bl	80044c8 <RCCEx_PLL2_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002fca:	e004      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8002fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	491c      	ldr	r1, [pc, #112]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ffc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003000:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	2100      	movs	r1, #0
 800300a:	6039      	str	r1, [r7, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003016:	460b      	mov	r3, r1
 8003018:	4313      	orrs	r3, r2
 800301a:	d039      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800301c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003022:	2b30      	cmp	r3, #48	; 0x30
 8003024:	d01e      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003026:	2b30      	cmp	r3, #48	; 0x30
 8003028:	d815      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800302a:	2b10      	cmp	r3, #16
 800302c:	d002      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800302e:	2b20      	cmp	r3, #32
 8003030:	d007      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003032:	e010      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800303a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003040:	e011      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003042:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003046:	3308      	adds	r3, #8
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fa3d 	bl	80044c8 <RCCEx_PLL2_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003054:	e007      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800305e:	bf00      	nop
 8003060:	44020c00 	.word	0x44020c00
        break;
 8003064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003066:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800307c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800308c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003090:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 8003094:	4618      	mov	r0, r3
 8003096:	37a8      	adds	r7, #168	; 0xa8
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	44020c00 	.word	0x44020c00

080030a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80030ac:	4bad      	ldr	r3, [pc, #692]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030b6:	4bab      	ldr	r3, [pc, #684]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80030c0:	4ba8      	ldr	r3, [pc, #672]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ca:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80030cc:	4ba5      	ldr	r3, [pc, #660]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80030d6:	4ba3      	ldr	r3, [pc, #652]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	08db      	lsrs	r3, r3, #3
 80030dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8126 	beq.w	8003346 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d053      	beq.n	80031a8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d86f      	bhi.n	80031e6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d003      	beq.n	8003114 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d02b      	beq.n	800316a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003112:	e068      	b.n	80031e6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003114:	4b93      	ldr	r3, [pc, #588]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	4a92      	ldr	r2, [pc, #584]	; (8003368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003148:	ed97 6a04 	vldr	s12, [r7, #16]
 800314c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800336c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003164:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003168:	e068      	b.n	800323c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003174:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003186:	ed97 6a04 	vldr	s12, [r7, #16]
 800318a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800336c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800318e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80031a6:	e049      	b.n	800323c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003374 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80031b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80031c8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800336c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80031cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80031e4:	e02a      	b.n	800323c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80031e6:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	4a5d      	ldr	r2, [pc, #372]	; (8003368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a04 	vldr	s12, [r7, #16]
 800321e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800336c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800323a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800323c:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003248:	d121      	bne.n	800328e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d017      	beq.n	8003286 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	0a5b      	lsrs	r3, r3, #9
 800325c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800326c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003270:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a0:	d121      	bne.n	80032e6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d017      	beq.n	80032de <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80032c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80032c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80032cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	e006      	b.n	80032ec <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	e002      	b.n	80032ec <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032f8:	d121      	bne.n	800333e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	0e1b      	lsrs	r3, r3, #24
 800330c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800331c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003320:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003334:	e010      	b.n	8003358 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	e00c      	b.n	8003358 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	e008      	b.n	8003358 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	372c      	adds	r7, #44	; 0x2c
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	44020c00 	.word	0x44020c00
 8003368:	03d09000 	.word	0x03d09000
 800336c:	46000000 	.word	0x46000000
 8003370:	4a742400 	.word	0x4a742400
 8003374:	4bb71b00 	.word	0x4bb71b00

08003378 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003378:	b480      	push	{r7}
 800337a:	b08b      	sub	sp, #44	; 0x2c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003380:	4bad      	ldr	r3, [pc, #692]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003388:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800338a:	4bab      	ldr	r3, [pc, #684]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003394:	4ba8      	ldr	r3, [pc, #672]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80033a0:	4ba5      	ldr	r3, [pc, #660]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80033aa:	4ba3      	ldr	r3, [pc, #652]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8126 	beq.w	800361a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d053      	beq.n	800347c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d86f      	bhi.n	80034ba <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d003      	beq.n	80033e8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d02b      	beq.n	800343e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80033e6:	e068      	b.n	80034ba <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80033e8:	4b93      	ldr	r3, [pc, #588]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	4a92      	ldr	r2, [pc, #584]	; (800363c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003420:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003438:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800343c:	e068      	b.n	8003510 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003448:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800344c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a04 	vldr	s12, [r7, #16]
 800345e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800347a:	e049      	b.n	8003510 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003648 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003498:	ed97 6a04 	vldr	s12, [r7, #16]
 800349c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80034a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80034b8:	e02a      	b.n	8003510 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034ba:	4b5f      	ldr	r3, [pc, #380]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80034f2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80034f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800350e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003510:	4b49      	ldr	r3, [pc, #292]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351c:	d121      	bne.n	8003562 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800351e:	4b46      	ldr	r3, [pc, #280]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800352a:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800353c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003540:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003544:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e006      	b.n	8003568 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e002      	b.n	8003568 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003574:	d121      	bne.n	80035ba <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003598:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800359c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80035a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	e002      	b.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035cc:	d121      	bne.n	8003612 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d017      	beq.n	800360a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80035da:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	0e1b      	lsrs	r3, r3, #24
 80035e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80035ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80035f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80035f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003600:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003608:	e010      	b.n	800362c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	e00c      	b.n	800362c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
}
 8003618:	e008      	b.n	800362c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	372c      	adds	r7, #44	; 0x2c
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	44020c00 	.word	0x44020c00
 800363c:	03d09000 	.word	0x03d09000
 8003640:	46000000 	.word	0x46000000
 8003644:	4a742400 	.word	0x4a742400
 8003648:	4bb71b00 	.word	0x4bb71b00

0800364c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af00      	add	r7, sp, #0
 8003652:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800365a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800365e:	430b      	orrs	r3, r1
 8003660:	d14b      	bne.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003662:	4bc4      	ldr	r3, [pc, #784]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800366e:	4bc1      	ldr	r3, [pc, #772]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d108      	bne.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003682:	d104      	bne.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	f000 bf14 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800368e:	4bb9      	ldr	r3, [pc, #740]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800369c:	d108      	bne.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a4:	d104      	bne.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80036a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ac:	f000 bf03 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80036b0:	4bb0      	ldr	r3, [pc, #704]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036bc:	d119      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c4:	d115      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80036c6:	4bab      	ldr	r3, [pc, #684]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80036ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d2:	d30a      	bcc.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80036d4:	4ba7      	ldr	r3, [pc, #668]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036de:	4aa6      	ldr	r2, [pc, #664]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80036e6:	f000 bee6 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80036ee:	f000 bee2 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	f000 bede 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80036fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036fe:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 8003702:	ea52 0301 	orrs.w	r3, r2, r1
 8003706:	f000 838e 	beq.w	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800370a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800370e:	2a01      	cmp	r2, #1
 8003710:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 8003714:	f080 86cc 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800371c:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8003720:	ea52 0301 	orrs.w	r3, r2, r1
 8003724:	f000 82aa 	beq.w	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800372c:	2a01      	cmp	r2, #1
 800372e:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 8003732:	f080 86bd 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800373a:	f1a3 0110 	sub.w	r1, r3, #16
 800373e:	ea52 0301 	orrs.w	r3, r2, r1
 8003742:	f000 8681 	beq.w	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8003746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800374a:	2a01      	cmp	r2, #1
 800374c:	f173 0310 	sbcs.w	r3, r3, #16
 8003750:	f080 86ae 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003758:	1f19      	subs	r1, r3, #4
 800375a:	ea52 0301 	orrs.w	r3, r2, r1
 800375e:	f000 84b1 	beq.w	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8003762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003766:	2a01      	cmp	r2, #1
 8003768:	f173 0304 	sbcs.w	r3, r3, #4
 800376c:	f080 86a0 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003774:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8003778:	430b      	orrs	r3, r1
 800377a:	f000 85aa 	beq.w	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800377e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003782:	497e      	ldr	r1, [pc, #504]	; (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003784:	428a      	cmp	r2, r1
 8003786:	f173 0300 	sbcs.w	r3, r3, #0
 800378a:	f080 8691 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800378e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003792:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8003796:	430b      	orrs	r3, r1
 8003798:	f000 8532 	beq.w	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 800379c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a0:	4977      	ldr	r1, [pc, #476]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80037a2:	428a      	cmp	r2, r1
 80037a4:	f173 0300 	sbcs.w	r3, r3, #0
 80037a8:	f080 8682 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80037ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80037b4:	430b      	orrs	r3, r1
 80037b6:	f000 84bc 	beq.w	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80037ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037be:	4971      	ldr	r1, [pc, #452]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80037c0:	428a      	cmp	r2, r1
 80037c2:	f173 0300 	sbcs.w	r3, r3, #0
 80037c6:	f080 8673 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80037ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ce:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f000 85f2 	beq.w	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80037d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037dc:	496a      	ldr	r1, [pc, #424]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80037de:	428a      	cmp	r2, r1
 80037e0:	f173 0300 	sbcs.w	r3, r3, #0
 80037e4:	f080 8664 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80037e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ec:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f000 81e5 	beq.w	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80037f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037fa:	4964      	ldr	r1, [pc, #400]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80037fc:	428a      	cmp	r2, r1
 80037fe:	f173 0300 	sbcs.w	r3, r3, #0
 8003802:	f080 8655 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800380e:	430b      	orrs	r3, r1
 8003810:	f000 83cc 	beq.w	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003818:	495d      	ldr	r1, [pc, #372]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800381a:	428a      	cmp	r2, r1
 800381c:	f173 0300 	sbcs.w	r3, r3, #0
 8003820:	f080 8646 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003828:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800382c:	430b      	orrs	r3, r1
 800382e:	f000 8331 	beq.w	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8003832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003836:	4957      	ldr	r1, [pc, #348]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003838:	428a      	cmp	r2, r1
 800383a:	f173 0300 	sbcs.w	r3, r3, #0
 800383e:	f080 8637 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003846:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800384a:	430b      	orrs	r3, r1
 800384c:	f000 82bb 	beq.w	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8003850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003854:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8003858:	f173 0300 	sbcs.w	r3, r3, #0
 800385c:	f080 8628 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003864:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003868:	430b      	orrs	r3, r1
 800386a:	f000 826d 	beq.w	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800386e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003872:	f244 0101 	movw	r1, #16385	; 0x4001
 8003876:	428a      	cmp	r2, r1
 8003878:	f173 0300 	sbcs.w	r3, r3, #0
 800387c:	f080 8618 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003884:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003888:	430b      	orrs	r3, r1
 800388a:	f000 821e 	beq.w	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800388e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003892:	f242 0101 	movw	r1, #8193	; 0x2001
 8003896:	428a      	cmp	r2, r1
 8003898:	f173 0300 	sbcs.w	r3, r3, #0
 800389c:	f080 8608 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80038a8:	430b      	orrs	r3, r1
 80038aa:	f000 8137 	beq.w	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80038ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b2:	f241 0101 	movw	r1, #4097	; 0x1001
 80038b6:	428a      	cmp	r2, r1
 80038b8:	f173 0300 	sbcs.w	r3, r3, #0
 80038bc:	f080 85f8 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c4:	1f11      	subs	r1, r2, #4
 80038c6:	430b      	orrs	r3, r1
 80038c8:	f000 80d2 	beq.w	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80038cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d0:	2a05      	cmp	r2, #5
 80038d2:	f173 0300 	sbcs.w	r3, r3, #0
 80038d6:	f080 85eb 	bcs.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80038da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038de:	1e51      	subs	r1, r2, #1
 80038e0:	430b      	orrs	r3, r1
 80038e2:	d006      	beq.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80038e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038e8:	1e91      	subs	r1, r2, #2
 80038ea:	430b      	orrs	r3, r1
 80038ec:	d06c      	beq.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80038ee:	f000 bddf 	b.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80038f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003904:	f7fe fd7e 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003908:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800390a:	f000 bdd4 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391a:	d10a      	bne.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fd26 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003930:	e048      	b.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	2b03      	cmp	r3, #3
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	e035      	b.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003964:	d11c      	bne.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	2b04      	cmp	r3, #4
 800396a:	d119      	bne.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003970:	e028      	b.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003972:	bf00      	nop
 8003974:	44020c00 	.word	0x44020c00
 8003978:	016e3600 	.word	0x016e3600
 800397c:	20000001 	.word	0x20000001
 8003980:	10000001 	.word	0x10000001
 8003984:	08000001 	.word	0x08000001
 8003988:	04000001 	.word	0x04000001
 800398c:	00200001 	.word	0x00200001
 8003990:	00040001 	.word	0x00040001
 8003994:	00020001 	.word	0x00020001
 8003998:	03d09000 	.word	0x03d09000
 800399c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80039a0:	4b9f      	ldr	r3, [pc, #636]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80039a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d106      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d103      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80039b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039c0:	f000 bd79 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80039c4:	f000 bd77 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80039c8:	4b95      	ldr	r3, [pc, #596]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80039ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80039da:	f7fe fcfd 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80039de:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80039e0:	f000 bd69 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80039e4:	4b8e      	ldr	r3, [pc, #568]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d107      	bne.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fcbb 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	e031      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003a08:	4b85      	ldr	r3, [pc, #532]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	2b18      	cmp	r3, #24
 8003a18:	d109      	bne.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a1a:	4b81      	ldr	r3, [pc, #516]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	08db      	lsrs	r3, r3, #3
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	4a7f      	ldr	r2, [pc, #508]	; (8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2c:	e01e      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d105      	bne.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d102      	bne.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8003a42:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a46:	e011      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003a48:	4b75      	ldr	r3, [pc, #468]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d106      	bne.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	2b28      	cmp	r3, #40	; 0x28
 8003a5a:	d103      	bne.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8003a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a68:	f000 bd25 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003a6c:	f000 bd23 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a76:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a82:	f7fe fca9 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8003a86:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003a88:	f000 bd15 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003a8c:	4b64      	ldr	r3, [pc, #400]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a98:	d10a      	bne.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fc67 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aae:	e033      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003ab0:	4b5b      	ldr	r3, [pc, #364]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ac2:	4b57      	ldr	r3, [pc, #348]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	4a55      	ldr	r2, [pc, #340]	; (8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad4:	e020      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003ad6:	4b52      	ldr	r3, [pc, #328]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	d102      	bne.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003aec:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af0:	e012      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003af2:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d107      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b06:	d103      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0e:	e003      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b14:	f000 bccf 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003b18:	f000 bccd 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003b1c:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003b2e:	f7fe fc7f 	bl	8002430 <HAL_RCC_GetPCLK3Freq>
 8003b32:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b34:	f000 bcbf 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3e:	d108      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fc17 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b4e:	f000 bcb2 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003b52:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b64:	d109      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b78:	e020      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b86:	d106      	bne.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	e012      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003baa:	d103      	bne.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	e003      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bb8:	f000 bc7d 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003bbc:	f000 bc7b 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003bd2:	f7fe fbe5 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 8003bd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003bd8:	f000 bc6d 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d104      	bne.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe fab1 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8003be8:	f000 bc65 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fbbe 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c00:	f000 bc59 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c10:	d10e      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	e02c      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003c1e:	bf00      	nop
 8003c20:	44020c00 	.word	0x44020c00
 8003c24:	03d09000 	.word	0x03d09000
 8003c28:	003d0900 	.word	0x003d0900
 8003c2c:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003c30:	4b95      	ldr	r3, [pc, #596]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d109      	bne.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c42:	4b91      	ldr	r3, [pc, #580]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	4a8f      	ldr	r2, [pc, #572]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	e010      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003c56:	4b8c      	ldr	r3, [pc, #560]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d102      	bne.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8003c6a:	4b89      	ldr	r3, [pc, #548]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c74:	f000 bc1f 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003c78:	f000 bc1d 	b.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003c7c:	4b82      	ldr	r3, [pc, #520]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003c88:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca2:	e011      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003ca4:	4b78      	ldr	r3, [pc, #480]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d103      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003cba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8003cc6:	e3f6      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003cc8:	e3f5      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003cca:	4b6f      	ldr	r3, [pc, #444]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7fe fb7c 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8003ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ce2:	e3e8      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cea:	d107      	bne.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fb41 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cfa:	e3dc      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003cfc:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d10:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	4a5c      	ldr	r2, [pc, #368]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d22:	e010      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003d24:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d106      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d38:	d102      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8003d3a:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3e:	e002      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d44:	e3b7      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003d46:	e3b6      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003d48:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d4e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d5a:	f7fe fb3d 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8003d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d60:	e3a9      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d68:	d107      	bne.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d6a:	f107 030c 	add.w	r3, r7, #12
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fb02 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d78:	e39d      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003d7a:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d10d      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d8e:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	4a3c      	ldr	r2, [pc, #240]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da0:	e010      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dae:	d106      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003db6:	d102      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dc2:	e378      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003dc4:	e377      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003dc6:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003dc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dcc:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dd8:	f7fe fafe 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8003ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003dde:	e36a      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003de6:	d107      	bne.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fac3 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df6:	e35e      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	08db      	lsrs	r3, r3, #3
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e1e:	e34a      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e24:	e347      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e2c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003e38:	f7fe fafa 	bl	8002430 <HAL_RCC_GetPCLK3Freq>
 8003e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e3e:	e33a      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e46:	d107      	bne.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e48:	f107 030c 	add.w	r3, r7, #12
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fa93 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e56:	e32e      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d109      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	08db      	lsrs	r3, r3, #3
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e7e:	e31a      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e84:	e317      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003e86:	bf00      	nop
 8003e88:	44020c00 	.word	0x44020c00
 8003e8c:	03d09000 	.word	0x03d09000
 8003e90:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003e94:	4b9b      	ldr	r3, [pc, #620]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003e96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ea6:	d044      	beq.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003eae:	d879      	bhi.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d02d      	beq.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d871      	bhi.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec6:	d017      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d869      	bhi.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003edc:	d004      	beq.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8003ede:	e061      	b.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8003ee0:	f7fe faa6 	bl	8002430 <HAL_RCC_GetPCLK3Freq>
 8003ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8003ee6:	e060      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fa43 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003ef6:	e058      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ef8:	4b82      	ldr	r3, [pc, #520]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d103      	bne.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003f0c:	e04d      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003f12:	e04a      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003f14:	4b7b      	ldr	r3, [pc, #492]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f22:	d103      	bne.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8003f24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003f2a:	e03e      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003f30:	e03b      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003f32:	4b74      	ldr	r3, [pc, #464]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f3e:	4b71      	ldr	r3, [pc, #452]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f50:	4b6c      	ldr	r3, [pc, #432]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	4a6b      	ldr	r2, [pc, #428]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f62:	e01e      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f64:	4b67      	ldr	r3, [pc, #412]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d106      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d102      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003f7a:	4b64      	ldr	r3, [pc, #400]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7e:	e010      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f80:	4b60      	ldr	r3, [pc, #384]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f94:	d102      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003f96:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003fa8:	bf00      	nop
          }
        }
        break;
 8003faa:	e284      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003fac:	4b55      	ldr	r3, [pc, #340]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003fae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fb2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003fbe:	d044      	beq.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003fc6:	d879      	bhi.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fce:	d02d      	beq.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd6:	d871      	bhi.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fde:	d017      	beq.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe6:	d869      	bhi.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d004      	beq.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003ff6:	e061      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe f9ee 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8003ffe:	e060      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff f9b7 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800400e:	e058      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004010:	4b3c      	ldr	r3, [pc, #240]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d103      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004024:	e04d      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800402a:	e04a      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800402c:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800402e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403a:	d103      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 800403c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004042:	e03e      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004048:	e03b      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800404c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004050:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004054:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004056:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	08db      	lsrs	r3, r3, #3
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	4a25      	ldr	r2, [pc, #148]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800407a:	e01e      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800407c:	4b21      	ldr	r3, [pc, #132]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004088:	d106      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d102      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004092:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	e010      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ac:	d102      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b2:	e002      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80040ba:	e002      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80040c0:	bf00      	nop
          }
        }
        break;
 80040c2:	e1f8      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d105      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80040e8:	e1e5      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f0:	d110      	bne.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040f2:	f107 0318 	add.w	r3, r7, #24
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe ffd4 	bl	80030a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004100:	e1d9      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004102:	bf00      	nop
 8004104:	44020c00 	.word	0x44020c00
 8004108:	03d09000 	.word	0x03d09000
 800410c:	003d0900 	.word	0x003d0900
 8004110:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411a:	d107      	bne.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff f929 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800412a:	e1c4      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004130:	e1c1      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004132:	4b9d      	ldr	r3, [pc, #628]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	2b04      	cmp	r3, #4
 8004142:	d859      	bhi.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	08004161 	.word	0x08004161
 8004150:	08004171 	.word	0x08004171
 8004154:	080041f9 	.word	0x080041f9
 8004158:	08004181 	.word	0x08004181
 800415c:	08004187 	.word	0x08004187
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004160:	f107 0318 	add.w	r3, r7, #24
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe ff9d 	bl	80030a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800416e:	e046      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff f8ff 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800417e:	e03e      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004180:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004184:	e03b      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800418c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004190:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004192:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041a4:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	08db      	lsrs	r3, r3, #3
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	4a80      	ldr	r2, [pc, #512]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b6:	e01e      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041b8:	4b7b      	ldr	r3, [pc, #492]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d106      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d102      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80041ce:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d2:	e010      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041d4:	4b74      	ldr	r3, [pc, #464]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e0:	d106      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041e8:	d102      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80041ea:	4b73      	ldr	r3, [pc, #460]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80041fc:	bf00      	nop
          }
        }
        break;
 80041fe:	e15a      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004200:	4b69      	ldr	r3, [pc, #420]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	2b20      	cmp	r3, #32
 8004210:	d022      	beq.n	8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	2b20      	cmp	r3, #32
 8004216:	d858      	bhi.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	2b18      	cmp	r3, #24
 800421c:	d019      	beq.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b18      	cmp	r3, #24
 8004222:	d852      	bhi.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	2b08      	cmp	r3, #8
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004230:	e04b      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004232:	f107 0318 	add.w	r3, r7, #24
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe ff34 	bl	80030a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004240:	e046      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004242:	f107 030c 	add.w	r3, r7, #12
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f896 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004250:	e03e      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004256:	e03b      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800425a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800425e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004262:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d10c      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004276:	4b4c      	ldr	r3, [pc, #304]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	4a4b      	ldr	r2, [pc, #300]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004288:	e01e      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d106      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d102      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80042a0:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	e010      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ba:	d102      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80042bc:	4b3e      	ldr	r3, [pc, #248]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80042c8:	e002      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80042ce:	bf00      	nop
          }
        }
        break;
 80042d0:	e0f1      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80042d2:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80042d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d023      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d858      	bhi.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	2bc0      	cmp	r3, #192	; 0xc0
 80042f2:	d019      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2bc0      	cmp	r3, #192	; 0xc0
 80042f8:	d852      	bhi.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004306:	e04b      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004308:	f107 0318 	add.w	r3, r7, #24
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fec9 	bl	80030a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004316:	e046      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff f82b 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004326:	e03e      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800432c:	e03b      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004334:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004338:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435e:	e01e      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436c:	d106      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d102      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004376:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	e010      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004388:	d106      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004390:	d102      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	e002      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 800439c:	e003      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800439e:	e002      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80043a4:	bf00      	nop
          }
        }
        break;
 80043a6:	e086      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80043a8:	44020c00 	.word	0x44020c00
 80043ac:	00bb8000 	.word	0x00bb8000
 80043b0:	03d09000 	.word	0x03d09000
 80043b4:	003d0900 	.word	0x003d0900
 80043b8:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80043bc:	4b40      	ldr	r3, [pc, #256]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80043be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80043c8:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d4:	d105      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80043dc:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e0:	e031      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ee:	d10a      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d107      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043f6:	f107 0318 	add.w	r3, r7, #24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fe52 	bl	80030a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004404:	e01f      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004406:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d106      	bne.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	2b20      	cmp	r3, #32
 8004418:	d103      	bne.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004420:	e011      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004422:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004430:	d106      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d103      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004438:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	e002      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004444:	e037      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004446:	e036      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800444a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800444e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b10      	cmp	r3, #16
 8004458:	d107      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800445a:	f107 0318 	add.w	r3, r7, #24
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fe20 	bl	80030a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8004468:	e025      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004476:	d10a      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2b20      	cmp	r3, #32
 800447c:	d107      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800447e:	f107 030c 	add.w	r3, r7, #12
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe ff78 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448c:	e00f      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2b30      	cmp	r3, #48	; 0x30
 80044a0:	d102      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80044ae:	e002      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044b4:	bf00      	nop
    }
  }

  return (frequency);
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3730      	adds	r7, #48	; 0x30
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	44020c00 	.word	0x44020c00
 80044c4:	02dc6c00 	.word	0x02dc6c00

080044c8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80044d0:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a47      	ldr	r2, [pc, #284]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80044d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044dc:	f7fc fcdc 	bl	8000e98 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044e2:	e008      	b.n	80044f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044e4:	f7fc fcd8 	bl	8000e98 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e07a      	b.n	80045ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044f6:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004502:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6811      	ldr	r1, [r2, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	0212      	lsls	r2, r2, #8
 8004518:	430a      	orrs	r2, r1
 800451a:	4936      	ldr	r1, [pc, #216]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	3b01      	subs	r3, #1
 8004526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	3b01      	subs	r3, #1
 8004530:	025b      	lsls	r3, r3, #9
 8004532:	b29b      	uxth	r3, r3
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	3b01      	subs	r3, #1
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	3b01      	subs	r3, #1
 800454a:	061b      	lsls	r3, r3, #24
 800454c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004550:	4928      	ldr	r1, [pc, #160]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004552:	4313      	orrs	r3, r2
 8004554:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004556:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f023 020c 	bic.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	4924      	ldr	r1, [pc, #144]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f023 0220 	bic.w	r2, r3, #32
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	491f      	ldr	r1, [pc, #124]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	491c      	ldr	r1, [pc, #112]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004584:	4313      	orrs	r3, r2
 8004586:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6a12      	ldr	r2, [r2, #32]
 80045a4:	00d2      	lsls	r2, r2, #3
 80045a6:	4913      	ldr	r1, [pc, #76]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80045b2:	f043 0310 	orr.w	r3, r3, #16
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80045be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045c4:	f7fc fc68 	bl	8000e98 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ca:	e008      	b.n	80045de <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045cc:	f7fc fc64 	bl	8000e98 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e006      	b.n	80045ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <RCCEx_PLL2_Config+0x12c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0

}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	44020c00 	.word	0x44020c00

080045f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e042      	b.n	8004690 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fc f9e3 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2224      	movs	r2, #36	; 0x24
 8004626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9a6 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f825 	bl	8004698 <UART_SetConfig>
 800464e:	4603      	mov	r3, r0
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e01b      	b.n	8004690 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa25 	bl	8004ad8 <UART_CheckIdleState>
 800468e:	4603      	mov	r3, r0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b094      	sub	sp, #80	; 0x50
 800469e:	af00      	add	r7, sp, #0
 80046a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	498a      	ldr	r1, [pc, #552]	; (80048f0 <UART_SetConfig+0x258>)
 80046c8:	4019      	ands	r1, r3
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	68d9      	ldr	r1, [r3, #12]
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	ea40 0301 	orr.w	r3, r0, r1
 80046ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b7f      	ldr	r3, [pc, #508]	; (80048f4 <UART_SetConfig+0x25c>)
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d004      	beq.n	8004706 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	4313      	orrs	r3, r2
 8004704:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8004710:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471a:	430b      	orrs	r3, r1
 800471c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	f023 000f 	bic.w	r0, r3, #15
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	ea40 0301 	orr.w	r3, r0, r1
 8004734:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <UART_SetConfig+0x260>)
 800473c:	429a      	cmp	r2, r3
 800473e:	d102      	bne.n	8004746 <UART_SetConfig+0xae>
 8004740:	2301      	movs	r3, #1
 8004742:	64bb      	str	r3, [r7, #72]	; 0x48
 8004744:	e01a      	b.n	800477c <UART_SetConfig+0xe4>
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b6c      	ldr	r3, [pc, #432]	; (80048fc <UART_SetConfig+0x264>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d102      	bne.n	8004756 <UART_SetConfig+0xbe>
 8004750:	2302      	movs	r3, #2
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48
 8004754:	e012      	b.n	800477c <UART_SetConfig+0xe4>
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b69      	ldr	r3, [pc, #420]	; (8004900 <UART_SetConfig+0x268>)
 800475c:	429a      	cmp	r2, r3
 800475e:	d102      	bne.n	8004766 <UART_SetConfig+0xce>
 8004760:	2304      	movs	r3, #4
 8004762:	64bb      	str	r3, [r7, #72]	; 0x48
 8004764:	e00a      	b.n	800477c <UART_SetConfig+0xe4>
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b62      	ldr	r3, [pc, #392]	; (80048f4 <UART_SetConfig+0x25c>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d103      	bne.n	8004778 <UART_SetConfig+0xe0>
 8004770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
 8004776:	e001      	b.n	800477c <UART_SetConfig+0xe4>
 8004778:	2300      	movs	r3, #0
 800477a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <UART_SetConfig+0x25c>)
 8004782:	429a      	cmp	r2, r3
 8004784:	d171      	bne.n	800486a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	2200      	movs	r2, #0
 800478a:	623b      	str	r3, [r7, #32]
 800478c:	627a      	str	r2, [r7, #36]	; 0x24
 800478e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004792:	f7fe ff5b 	bl	800364c <HAL_RCCEx_GetPeriphCLKFreq>
 8004796:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80e2 	beq.w	8004964 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	4a57      	ldr	r2, [pc, #348]	; (8004904 <UART_SetConfig+0x26c>)
 80047a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d305      	bcc.n	80047d0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047d6:	e0c5      	b.n	8004964 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	2200      	movs	r2, #0
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	61fa      	str	r2, [r7, #28]
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	4a47      	ldr	r2, [pc, #284]	; (8004904 <UART_SetConfig+0x26c>)
 80047e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2200      	movs	r2, #0
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	617a      	str	r2, [r7, #20]
 80047f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047fa:	f7fb fd4d 	bl	8000298 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	020b      	lsls	r3, r1, #8
 8004810:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004814:	0202      	lsls	r2, r0, #8
 8004816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004818:	6849      	ldr	r1, [r1, #4]
 800481a:	0849      	lsrs	r1, r1, #1
 800481c:	2000      	movs	r0, #0
 800481e:	460c      	mov	r4, r1
 8004820:	4605      	mov	r5, r0
 8004822:	eb12 0804 	adds.w	r8, r2, r4
 8004826:	eb43 0905 	adc.w	r9, r3, r5
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	60fa      	str	r2, [r7, #12]
 8004834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	f7fb fd2c 	bl	8000298 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800484e:	d308      	bcc.n	8004862 <UART_SetConfig+0x1ca>
 8004850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004856:	d204      	bcs.n	8004862 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800485e:	60da      	str	r2, [r3, #12]
 8004860:	e080      	b.n	8004964 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004868:	e07c      	b.n	8004964 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004872:	d149      	bne.n	8004908 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	2200      	movs	r2, #0
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004880:	f7fe fee4 	bl	800364c <HAL_RCCEx_GetPeriphCLKFreq>
 8004884:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d06b      	beq.n	8004964 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <UART_SetConfig+0x26c>)
 8004892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004896:	461a      	mov	r2, r3
 8004898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489a:	fbb3 f3f2 	udiv	r3, r3, r2
 800489e:	005a      	lsls	r2, r3, #1
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	441a      	add	r2, r3
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b4:	2b0f      	cmp	r3, #15
 80048b6:	d916      	bls.n	80048e6 <UART_SetConfig+0x24e>
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d212      	bcs.n	80048e6 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f023 030f 	bic.w	r3, r3, #15
 80048c8:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048d8:	4313      	orrs	r3, r2
 80048da:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	e03e      	b.n	8004964 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80048ec:	e03a      	b.n	8004964 <UART_SetConfig+0x2cc>
 80048ee:	bf00      	nop
 80048f0:	cfff69f3 	.word	0xcfff69f3
 80048f4:	44002400 	.word	0x44002400
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40004400 	.word	0x40004400
 8004900:	40004800 	.word	0x40004800
 8004904:	0800510c 	.word	0x0800510c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490a:	2200      	movs	r2, #0
 800490c:	469a      	mov	sl, r3
 800490e:	4693      	mov	fp, r2
 8004910:	4650      	mov	r0, sl
 8004912:	4659      	mov	r1, fp
 8004914:	f7fe fe9a 	bl	800364c <HAL_RCCEx_GetPeriphCLKFreq>
 8004918:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800491a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d021      	beq.n	8004964 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	4a1a      	ldr	r2, [pc, #104]	; (8004990 <UART_SetConfig+0x2f8>)
 8004926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492a:	461a      	mov	r2, r3
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	441a      	add	r2, r3
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	2b0f      	cmp	r3, #15
 8004948:	d909      	bls.n	800495e <UART_SetConfig+0x2c6>
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004950:	d205      	bcs.n	800495e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004954:	b29a      	uxth	r2, r3
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e002      	b.n	8004964 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	2201      	movs	r2, #1
 8004968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	2201      	movs	r2, #1
 8004970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2200      	movs	r2, #0
 8004978:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	2200      	movs	r2, #0
 800497e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004984:	4618      	mov	r0, r3
 8004986:	3750      	adds	r7, #80	; 0x50
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	0800510c 	.word	0x0800510c

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b098      	sub	sp, #96	; 0x60
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc f9d6 	bl	8000e98 <HAL_GetTick>
 8004aec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d12f      	bne.n	8004b5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f88e 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d022      	beq.n	8004b5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
 8004b36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e063      	b.n	8004c24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d149      	bne.n	8004bfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b72:	2200      	movs	r2, #0
 8004b74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f857 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03c      	beq.n	8004bfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	623b      	str	r3, [r7, #32]
   return(result);
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e6      	bne.n	8004b84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd6:	61fa      	str	r2, [r7, #28]
 8004bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	617b      	str	r3, [r7, #20]
   return(result);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e5      	bne.n	8004bb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e012      	b.n	8004c24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3758      	adds	r7, #88	; 0x58
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	e049      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d045      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fc f927 	bl	8000e98 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e048      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d031      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d110      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2208      	movs	r2, #8
 8004c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f838 	bl	8004cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e029      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cac:	d111      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f81e 	bl	8004cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e00f      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0a6      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b095      	sub	sp, #84	; 0x54
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d20:	643b      	str	r3, [r7, #64]	; 0x40
 8004d22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e3      	bne.n	8004d34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d118      	bne.n	8004da6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0310 	bic.w	r3, r3, #16
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e6      	bne.n	8004d74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004dba:	bf00      	nop
 8004dbc:	3754      	adds	r7, #84	; 0x54
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_UARTEx_DisableFifoMode+0x16>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e027      	b.n	8004e2c <HAL_UARTEx_DisableFifoMode+0x66>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e02d      	b.n	8004eac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f84f 	bl	8004f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e02d      	b.n	8004f28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f811 	bl	8004f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d108      	bne.n	8004f52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f50:	e031      	b.n	8004fb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f52:	2308      	movs	r3, #8
 8004f54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f56:	2308      	movs	r3, #8
 8004f58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	0e5b      	lsrs	r3, r3, #25
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	0f5b      	lsrs	r3, r3, #29
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
 8004f7c:	7b3a      	ldrb	r2, [r7, #12]
 8004f7e:	4911      	ldr	r1, [pc, #68]	; (8004fc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004f80:	5c8a      	ldrb	r2, [r1, r2]
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f86:	7b3a      	ldrb	r2, [r7, #12]
 8004f88:	490f      	ldr	r1, [pc, #60]	; (8004fc8 <UARTEx_SetNbDataToProcess+0x98>)
 8004f8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	7b7a      	ldrb	r2, [r7, #13]
 8004f9c:	4909      	ldr	r1, [pc, #36]	; (8004fc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004f9e:	5c8a      	ldrb	r2, [r1, r2]
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fa4:	7b7a      	ldrb	r2, [r7, #13]
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004faa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	08005124 	.word	0x08005124
 8004fc8:	0800512c 	.word	0x0800512c

08004fcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fd4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004fd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
 8005014:	e00b      	b.n	800502e <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
 8005028:	e001      	b.n	800502e <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800503c:	b084      	sub	sp, #16
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	f107 001c 	add.w	r0, r7, #28
 800504a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f023 0201 	bic.w	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005060:	2100      	movs	r1, #0
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ffc7 	bl	8004ff6 <USB_SetCurrentMode>
 8005068:	4603      	mov	r3, r0
 800506a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800507e:	b004      	add	sp, #16
 8005080:	4770      	bx	lr

08005082 <memset>:
 8005082:	4402      	add	r2, r0
 8005084:	4603      	mov	r3, r0
 8005086:	4293      	cmp	r3, r2
 8005088:	d100      	bne.n	800508c <memset+0xa>
 800508a:	4770      	bx	lr
 800508c:	f803 1b01 	strb.w	r1, [r3], #1
 8005090:	e7f9      	b.n	8005086 <memset+0x4>
	...

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	4d0d      	ldr	r5, [pc, #52]	; (80050cc <__libc_init_array+0x38>)
 8005098:	2600      	movs	r6, #0
 800509a:	4c0d      	ldr	r4, [pc, #52]	; (80050d0 <__libc_init_array+0x3c>)
 800509c:	1b64      	subs	r4, r4, r5
 800509e:	10a4      	asrs	r4, r4, #2
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	4d0b      	ldr	r5, [pc, #44]	; (80050d4 <__libc_init_array+0x40>)
 80050a6:	2600      	movs	r6, #0
 80050a8:	4c0b      	ldr	r4, [pc, #44]	; (80050d8 <__libc_init_array+0x44>)
 80050aa:	f000 f817 	bl	80050dc <_init>
 80050ae:	1b64      	subs	r4, r4, r5
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050bc:	3601      	adds	r6, #1
 80050be:	4798      	blx	r3
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c6:	3601      	adds	r6, #1
 80050c8:	4798      	blx	r3
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	0800513c 	.word	0x0800513c
 80050d0:	0800513c 	.word	0x0800513c
 80050d4:	0800513c 	.word	0x0800513c
 80050d8:	08005140 	.word	0x08005140

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
